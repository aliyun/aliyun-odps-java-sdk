// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/types.proto

package apsara.odps;

public final class TypesProtos {
  private TypesProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    Integer(0, 1),
    Double(1, 2),
    String(2, 3),
    Datetime(3, 4),
    Bool(4, 5),
    Decimal(5, 6),
    ArrayInteger(6, 7),
    ArrayDouble(7, 8),
    ArrayString(8, 9),
    ArrayDatetime(9, 10),
    ArrayBool(10, 11),
    ArrayDecimal(11, 12),
    MapIntegerInteger(12, 13),
    MapIntegerDouble(13, 14),
    MapIntegerString(14, 15),
    MapIntegerDatetime(15, 16),
    MapIntegerBool(16, 17),
    MapIntegerDecimal(17, 18),
    MapStringInteger(18, 19),
    MapStringDouble(19, 20),
    MapStringString(20, 21),
    MapStringDatetime(21, 22),
    MapStringBool(22, 23),
    MapStringDecimal(23, 24),
    MapDatetimeInteger(24, 25),
    MapDatetimeDouble(25, 26),
    MapDatetimeString(26, 27),
    MapDatetimeDatetime(27, 28),
    MapDatetimeBool(28, 29),
    MapDatetimeDecimal(29, 30),
    MapDecimalInteger(30, 31),
    MapDecimalDouble(31, 32),
    MapDecimalString(32, 33),
    MapDecimalDatetime(33, 34),
    MapDecimalBool(34, 35),
    MapDecimalDecimal(35, 36),
    Map(36, 107),
    Array(37, 108),
    Void(38, 109),
    Tinyint(39, 110),
    Smallint(40, 111),
    Int(41, 112),
    Float(42, 113),
    Char(43, 114),
    Varchar(44, 115),
    Date(45, 116),
    Timestamp(46, 117),
    Binary(47, 118),
    Interval_day_time(48, 119),
    Interval_year_month(49, 120),
    Struct(50, 121),
    ;
    
    public static final int Integer_VALUE = 1;
    public static final int Double_VALUE = 2;
    public static final int String_VALUE = 3;
    public static final int Datetime_VALUE = 4;
    public static final int Bool_VALUE = 5;
    public static final int Decimal_VALUE = 6;
    public static final int ArrayInteger_VALUE = 7;
    public static final int ArrayDouble_VALUE = 8;
    public static final int ArrayString_VALUE = 9;
    public static final int ArrayDatetime_VALUE = 10;
    public static final int ArrayBool_VALUE = 11;
    public static final int ArrayDecimal_VALUE = 12;
    public static final int MapIntegerInteger_VALUE = 13;
    public static final int MapIntegerDouble_VALUE = 14;
    public static final int MapIntegerString_VALUE = 15;
    public static final int MapIntegerDatetime_VALUE = 16;
    public static final int MapIntegerBool_VALUE = 17;
    public static final int MapIntegerDecimal_VALUE = 18;
    public static final int MapStringInteger_VALUE = 19;
    public static final int MapStringDouble_VALUE = 20;
    public static final int MapStringString_VALUE = 21;
    public static final int MapStringDatetime_VALUE = 22;
    public static final int MapStringBool_VALUE = 23;
    public static final int MapStringDecimal_VALUE = 24;
    public static final int MapDatetimeInteger_VALUE = 25;
    public static final int MapDatetimeDouble_VALUE = 26;
    public static final int MapDatetimeString_VALUE = 27;
    public static final int MapDatetimeDatetime_VALUE = 28;
    public static final int MapDatetimeBool_VALUE = 29;
    public static final int MapDatetimeDecimal_VALUE = 30;
    public static final int MapDecimalInteger_VALUE = 31;
    public static final int MapDecimalDouble_VALUE = 32;
    public static final int MapDecimalString_VALUE = 33;
    public static final int MapDecimalDatetime_VALUE = 34;
    public static final int MapDecimalBool_VALUE = 35;
    public static final int MapDecimalDecimal_VALUE = 36;
    public static final int Map_VALUE = 107;
    public static final int Array_VALUE = 108;
    public static final int Void_VALUE = 109;
    public static final int Tinyint_VALUE = 110;
    public static final int Smallint_VALUE = 111;
    public static final int Int_VALUE = 112;
    public static final int Float_VALUE = 113;
    public static final int Char_VALUE = 114;
    public static final int Varchar_VALUE = 115;
    public static final int Date_VALUE = 116;
    public static final int Timestamp_VALUE = 117;
    public static final int Binary_VALUE = 118;
    public static final int Interval_day_time_VALUE = 119;
    public static final int Interval_year_month_VALUE = 120;
    public static final int Struct_VALUE = 121;
    
    
    public final int getNumber() { return value; }
    
    public static Type valueOf(int value) {
      switch (value) {
        case 1: return Integer;
        case 2: return Double;
        case 3: return String;
        case 4: return Datetime;
        case 5: return Bool;
        case 6: return Decimal;
        case 7: return ArrayInteger;
        case 8: return ArrayDouble;
        case 9: return ArrayString;
        case 10: return ArrayDatetime;
        case 11: return ArrayBool;
        case 12: return ArrayDecimal;
        case 13: return MapIntegerInteger;
        case 14: return MapIntegerDouble;
        case 15: return MapIntegerString;
        case 16: return MapIntegerDatetime;
        case 17: return MapIntegerBool;
        case 18: return MapIntegerDecimal;
        case 19: return MapStringInteger;
        case 20: return MapStringDouble;
        case 21: return MapStringString;
        case 22: return MapStringDatetime;
        case 23: return MapStringBool;
        case 24: return MapStringDecimal;
        case 25: return MapDatetimeInteger;
        case 26: return MapDatetimeDouble;
        case 27: return MapDatetimeString;
        case 28: return MapDatetimeDatetime;
        case 29: return MapDatetimeBool;
        case 30: return MapDatetimeDecimal;
        case 31: return MapDecimalInteger;
        case 32: return MapDecimalDouble;
        case 33: return MapDecimalString;
        case 34: return MapDecimalDatetime;
        case 35: return MapDecimalBool;
        case 36: return MapDecimalDecimal;
        case 107: return Map;
        case 108: return Array;
        case 109: return Void;
        case 110: return Tinyint;
        case 111: return Smallint;
        case 112: return Int;
        case 113: return Float;
        case 114: return Char;
        case 115: return Varchar;
        case 116: return Date;
        case 117: return Timestamp;
        case 118: return Binary;
        case 119: return Interval_day_time;
        case 120: return Interval_year_month;
        case 121: return Struct;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return TypesProtos.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final Type[] VALUES = {
      Integer, Double, String, Datetime, Bool, Decimal, ArrayInteger, ArrayDouble, ArrayString, ArrayDatetime, ArrayBool, ArrayDecimal, MapIntegerInteger, MapIntegerDouble, MapIntegerString, MapIntegerDatetime, MapIntegerBool, MapIntegerDecimal, MapStringInteger, MapStringDouble, MapStringString, MapStringDatetime, MapStringBool, MapStringDecimal, MapDatetimeInteger, MapDatetimeDouble, MapDatetimeString, MapDatetimeDatetime, MapDatetimeBool, MapDatetimeDecimal, MapDecimalInteger, MapDecimalDouble, MapDecimalString, MapDecimalDatetime, MapDecimalBool, MapDecimalDecimal, Map, Array, Void, Tinyint, Smallint, Int, Float, Char, Varchar, Date, Timestamp, Binary, Interval_day_time, Interval_year_month, Struct, 
    };
    
    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private Type(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:apsara.odps.Type)
  }
  
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\022common/types.proto\022\013apsara.odps*\225\007\n\004Ty" +
      "pe\022\013\n\007Integer\020\001\022\n\n\006Double\020\002\022\n\n\006String\020\003\022" +
      "\014\n\010Datetime\020\004\022\010\n\004Bool\020\005\022\013\n\007Decimal\020\006\022\020\n\014" +
      "ArrayInteger\020\007\022\017\n\013ArrayDouble\020\010\022\017\n\013Array" +
      "String\020\t\022\021\n\rArrayDatetime\020\n\022\r\n\tArrayBool" +
      "\020\013\022\020\n\014ArrayDecimal\020\014\022\025\n\021MapIntegerIntege" +
      "r\020\r\022\024\n\020MapIntegerDouble\020\016\022\024\n\020MapIntegerS" +
      "tring\020\017\022\026\n\022MapIntegerDatetime\020\020\022\022\n\016MapIn" +
      "tegerBool\020\021\022\025\n\021MapIntegerDecimal\020\022\022\024\n\020Ma" +
      "pStringInteger\020\023\022\023\n\017MapStringDouble\020\024\022\023\n",
      "\017MapStringString\020\025\022\025\n\021MapStringDatetime\020" +
      "\026\022\021\n\rMapStringBool\020\027\022\024\n\020MapStringDecimal" +
      "\020\030\022\026\n\022MapDatetimeInteger\020\031\022\025\n\021MapDatetim" +
      "eDouble\020\032\022\025\n\021MapDatetimeString\020\033\022\027\n\023MapD" +
      "atetimeDatetime\020\034\022\023\n\017MapDatetimeBool\020\035\022\026" +
      "\n\022MapDatetimeDecimal\020\036\022\025\n\021MapDecimalInte" +
      "ger\020\037\022\024\n\020MapDecimalDouble\020 \022\024\n\020MapDecima" +
      "lString\020!\022\026\n\022MapDecimalDatetime\020\"\022\022\n\016Map" +
      "DecimalBool\020#\022\025\n\021MapDecimalDecimal\020$\022\007\n\003" +
      "Map\020k\022\t\n\005Array\020l\022\010\n\004Void\020m\022\013\n\007Tinyint\020n\022",
      "\014\n\010Smallint\020o\022\007\n\003Int\020p\022\t\n\005Float\020q\022\010\n\004Cha" +
      "r\020r\022\013\n\007Varchar\020s\022\010\n\004Date\020t\022\r\n\tTimestamp\020" +
      "u\022\n\n\006Binary\020v\022\025\n\021Interval_day_time\020w\022\027\n\023" +
      "Interval_year_month\020x\022\n\n\006Struct\020yB\rB\013Typ" +
      "esProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
