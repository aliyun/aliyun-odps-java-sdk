package com.aliyun.odps.sqa.commandapi.antlr;// Generated from CommandParser.g4 by ANTLR 4.9.2

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CommandParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		KW_MAJOR=1, KW_MINOR=2, KW_FREEZE=3, KW_HELP=4, KW_HELP_SHORT=5, KW_ALIAS=6, 
		KW_UNALIAS=7, KW_QUOTA=8, KW_REGION=9, KW_EXTERNALPROJECT=10, KW_LS=11, 
		KW_PRIV=12, KW_COST=13, KW_PROCESSLIST=14, KW_PROC=15, KW_INSTANCES=16, 
		KW_INSTANCE=17, KW_TRUE=18, KW_FALSE=19, KW_ALL=20, KW_NONE=21, KW_AND=22, 
		KW_OR=23, KW_NOT=24, KW_LIKE=25, KW_IF=26, KW_EXISTS=27, KW_ASC=28, KW_DESC=29, 
		KW_ORDER=30, KW_ZORDER=31, KW_GROUP=32, KW_GROUPS=33, KW_BY=34, KW_HAVING=35, 
		KW_WHERE=36, KW_FROM=37, KW_AS=38, KW_SELECT=39, KW_DISTINCT=40, KW_INSERT=41, 
		KW_OVERWRITE=42, KW_OUTER=43, KW_UNIQUEJOIN=44, KW_PRESERVE=45, KW_JOIN=46, 
		KW_LEFT=47, KW_RIGHT=48, KW_FULL=49, KW_ON=50, KW_PARTITION=51, KW_PARTITIONS=52, 
		KW_TABLE=53, KW_TABLES=54, KW_COLUMNS=55, KW_INDEX=56, KW_INDEXES=57, 
		KW_REBUILD=58, KW_FUNCTIONS=59, KW_SHOW=60, KW_MSCK=61, KW_REPAIR=62, 
		KW_DIRECTORY=63, KW_LOCAL=64, KW_TRANSFORM=65, KW_USING=66, KW_CLUSTER=67, 
		KW_DISTRIBUTE=68, KW_SORT=69, KW_UNION=70, KW_LOAD=71, KW_UNLOAD=72, KW_EXPORT=73, 
		KW_IMPORT=74, KW_REPLICATION=75, KW_METADATA=76, KW_DATA=77, KW_INPATH=78, 
		KW_IS=79, KW_NULL=80, KW_CREATE=81, KW_EXTERNAL=82, KW_ALTER=83, KW_CHANGE=84, 
		KW_COLUMN=85, KW_FIRST=86, KW_LAST=87, KW_NULLS=88, KW_AFTER=89, KW_DESCRIBE=90, 
		KW_DROP=91, KW_RENAME=92, KW_IGNORE=93, KW_PROTECTION=94, KW_TO=95, KW_COMMENT=96, 
		KW_BOOLEAN=97, KW_TINYINT=98, KW_SMALLINT=99, KW_INT=100, KW_BIGINT=101, 
		KW_FLOAT=102, KW_DOUBLE=103, KW_DATE=104, KW_DATETIME=105, KW_TIMESTAMP=106, 
		KW_INTERVAL=107, KW_DECIMAL=108, KW_STRING=109, KW_CHAR=110, KW_VARCHAR=111, 
		KW_ARRAY=112, KW_STRUCT=113, KW_MAP=114, KW_UNIONTYPE=115, KW_REDUCE=116, 
		KW_PARTITIONED=117, KW_CLUSTERED=118, KW_SORTED=119, KW_INTO=120, KW_BUCKETS=121, 
		KW_ROW=122, KW_ROWS=123, KW_FORMAT=124, KW_DELIMITED=125, KW_FIELDS=126, 
		KW_TERMINATED=127, KW_ESCAPED=128, KW_COLLECTION=129, KW_ITEMS=130, KW_KEYS=131, 
		KW_KEY_TYPE=132, KW_LINES=133, KW_STORED=134, KW_FILEFORMAT=135, KW_INPUTFORMAT=136, 
		KW_OUTPUTFORMAT=137, KW_INPUTDRIVER=138, KW_OUTPUTDRIVER=139, KW_OFFLINE=140, 
		KW_ENABLE=141, KW_DISABLE=142, KW_READONLY=143, KW_NO_DROP=144, KW_LOCATION=145, 
		KW_TABLESAMPLE=146, KW_BUCKET=147, KW_OUT=148, KW_OF=149, KW_PERCENT=150, 
		KW_CAST=151, KW_ADD=152, KW_REPLACE=153, KW_RLIKE=154, KW_REGEXP=155, 
		KW_TEMPORARY=156, KW_FUNCTION=157, KW_MACRO=158, KW_FILE=159, KW_JAR=160, 
		KW_EXPLAIN=161, KW_EXTENDED=162, KW_FORMATTED=163, KW_PRETTY=164, KW_DEPENDENCY=165, 
		KW_LOGICAL=166, KW_SERDE=167, KW_WITH=168, KW_DEFERRED=169, KW_SERDEPROPERTIES=170, 
		KW_DBPROPERTIES=171, KW_LIMIT=172, KW_OFFSET=173, KW_SET=174, KW_UNSET=175, 
		KW_TBLPROPERTIES=176, KW_IDXPROPERTIES=177, KW_VALUE_TYPE=178, KW_ELEM_TYPE=179, 
		KW_DEFINED=180, KW_CASE=181, KW_WHEN=182, KW_THEN=183, KW_ELSE=184, KW_END=185, 
		KW_MAPJOIN=186, KW_SKEWJOIN=187, KW_DYNAMICFILTER=188, KW_STREAMTABLE=189, 
		KW_HOLD_DDLTIME=190, KW_CLUSTERSTATUS=191, KW_UTC=192, KW_UTCTIMESTAMP=193, 
		KW_LONG=194, KW_DELETE=195, KW_PLUS=196, KW_MINUS=197, KW_FETCH=198, KW_INTERSECT=199, 
		KW_VIEW=200, KW_IN=201, KW_DATABASE=202, KW_DATABASES=203, KW_MATERIALIZED=204, 
		KW_SCHEMA=205, KW_SCHEMAS=206, KW_GRANT=207, KW_REVOKE=208, KW_SSL=209, 
		KW_UNDO=210, KW_LOCK=211, KW_LOCKS=212, KW_UNLOCK=213, KW_SHARED=214, 
		KW_EXCLUSIVE=215, KW_PROCEDURE=216, KW_UNSIGNED=217, KW_WHILE=218, KW_READ=219, 
		KW_READS=220, KW_PURGE=221, KW_RANGE=222, KW_ANALYZE=223, KW_BEFORE=224, 
		KW_BETWEEN=225, KW_BOTH=226, KW_BINARY=227, KW_CROSS=228, KW_CONTINUE=229, 
		KW_CURSOR=230, KW_TRIGGER=231, KW_RECORDREADER=232, KW_RECORDWRITER=233, 
		KW_SEMI=234, KW_ANTI=235, KW_LATERAL=236, KW_TOUCH=237, KW_ARCHIVE=238, 
		KW_UNARCHIVE=239, KW_COMPUTE=240, KW_STATISTICS=241, KW_NULL_VALUE=242, 
		KW_DISTINCT_VALUE=243, KW_TABLE_COUNT=244, KW_COLUMN_SUM=245, KW_COLUMN_MAX=246, 
		KW_COLUMN_MIN=247, KW_EXPRESSION_CONDITION=248, KW_USE=249, KW_OPTION=250, 
		KW_CONCATENATE=251, KW_SHOW_DATABASE=252, KW_UPDATE=253, KW_MATCHED=254, 
		KW_RESTRICT=255, KW_CASCADE=256, KW_SKEWED=257, KW_ROLLUP=258, KW_CUBE=259, 
		KW_DIRECTORIES=260, KW_FOR=261, KW_WINDOW=262, KW_UNBOUNDED=263, KW_PRECEDING=264, 
		KW_FOLLOWING=265, KW_CURRENT=266, KW_LOCALTIMESTAMP=267, KW_CURRENT_DATE=268, 
		KW_CURRENT_TIMESTAMP=269, KW_LESS=270, KW_MORE=271, KW_OVER=272, KW_GROUPING=273, 
		KW_SETS=274, KW_TRUNCATE=275, KW_NOSCAN=276, KW_PARTIALSCAN=277, KW_USER=278, 
		KW_ROLE=279, KW_ROLES=280, KW_INNER=281, KW_EXCHANGE=282, KW_URI=283, 
		KW_SERVER=284, KW_ADMIN=285, KW_OWNER=286, KW_PRINCIPALS=287, KW_COMPACT=288, 
		KW_COMPACTIONS=289, KW_TRANSACTIONS=290, KW_REWRITE=291, KW_AUTHORIZATION=292, 
		KW_CONF=293, KW_VALUES=294, KW_RELOAD=295, KW_YEAR=296, KW_MONTH=297, 
		KW_DAY=298, KW_HOUR=299, KW_MINUTE=300, KW_SECOND=301, KW_YEARS=302, KW_MONTHS=303, 
		KW_DAYS=304, KW_HOURS=305, KW_MINUTES=306, KW_SECONDS=307, KW_UDFPROPERTIES=308, 
		KW_EXCLUDE=309, KW_TIES=310, KW_NO=311, KW_OTHERS=312, KW_BEGIN=313, KW_RETURNS=314, 
		KW_SQL=315, KW_LOOP=316, KW_NEW=317, KW_LIFECYCLE=318, KW_REMOVE=319, 
		KW_GRANTS=320, KW_ACL=321, KW_TYPE=322, KW_LIST=323, KW_USERS=324, KW_WHOAMI=325, 
		KW_TRUSTEDPROJECTS=326, KW_TRUSTEDPROJECT=327, KW_SECURITYCONFIGURATION=328, 
		KW_PRIVILEGES=329, KW_PROJECT=330, KW_PROJECTS=331, KW_LABEL=332, KW_ALLOW=333, 
		KW_DISALLOW=334, KW_PACKAGE=335, KW_PACKAGES=336, KW_INSTALL=337, KW_UNINSTALL=338, 
		KW_P=339, KW_JOB=340, KW_JOBS=341, KW_ACCOUNTPROVIDERS=342, KW_RESOURCES=343, 
		KW_FLAGS=344, KW_COUNT=345, KW_STATISTIC=346, KW_STATISTIC_LIST=347, KW_GET=348, 
		KW_PUT=349, KW_POLICY=350, KW_PROJECTPROTECTION=351, KW_EXCEPTION=352, 
		KW_CLEAR=353, KW_EXPIRED=354, KW_EXP=355, KW_ACCOUNTPROVIDER=356, KW_SUPER=357, 
		KW_VOLUMEFILE=358, KW_VOLUMEARCHIVE=359, KW_OFFLINEMODEL=360, KW_PY=361, 
		KW_RESOURCE=362, KW_KILL=363, KW_STATUS=364, KW_SETPROJECT=365, KW_MERGE=366, 
		KW_SMALLFILES=367, KW_PARTITIONPROPERTIES=368, KW_EXSTORE=369, KW_CHANGELOGS=370, 
		KW_REDO=371, KW_CHANGEOWNER=372, KW_RECYCLEBIN=373, KW_PRIVILEGEPROPERTIES=374, 
		KW_CACHE=375, KW_CACHEPROPERTIES=376, KW_VARIABLES=377, KW_EXCEPT=378, 
		KW_SELECTIVITY=379, KW_EXTRACT=380, KW_SUBSTRING=381, KW_DEFAULT=382, 
		KW_ANY=383, KW_NATURAL=384, KW_CONSTRAINT=385, KW_PRIMARY=386, KW_KEY=387, 
		KW_VALIDATE=388, KW_NOVALIDATE=389, KW_RELY=390, KW_NORELY=391, KW_CLONE=392, 
		KW_HISTORY=393, KW_RESTORE=394, KW_LSN=395, KW_WITHIN=396, KW_FILTER=397, 
		KW_TENANT=398, KW_SHARDS=399, KW_HUBLIFECYCLE=400, KW_HUBTABLE=401, KW_OUTPUT=402, 
		KW_CODE_BEGIN=403, KW_CODE_END=404, KW_MODEL=405, KW_PROPERTIES=406, DOT=407, 
		COLON=408, COMMA=409, SEMICOLON=410, LPAREN=411, RPAREN=412, LSQUARE=413, 
		RSQUARE=414, LCURLY=415, RCURLY=416, EQUAL=417, EQUAL_NS=418, NOTEQUAL=419, 
		LESSTHANOREQUALTO=420, LESSTHAN=421, GREATERTHANOREQUALTO=422, GREATERTHAN=423, 
		DIVIDE=424, PLUS=425, MINUS=426, STAR=427, MOD=428, DIV=429, AMPERSAND=430, 
		TILDE=431, BITWISEOR=432, CONCATENATE=433, BITWISEXOR=434, QUESTION=435, 
		DOLLAR=436, SHARP=437, ASSIGN=438, LAMBDA_IMPLEMENT=439, Letter=440, Num=441, 
		StringLiteral=442, DoubleQuoteStringLiteral=443, BigintLiteral=444, SmallintLiteral=445, 
		TinyintLiteral=446, DecimalLiteral=447, ByteLengthLiteral=448, Number=449, 
		Variable=450, Identifier=451, QuotedIdentifier=452, CharSetStringLiteral=453, 
		WS=454, COMMENT=455, HintStart=456, ESCAPE=457, AT=458, UNDERLINE=459, 
		ANY_CHAR=460;
	public static final int
		RULE_command = 0, RULE_statement = 1, RULE_whoamiStatement = 2, RULE_sqlCostStatement = 3, 
		RULE_compoundStatement = 4, RULE_cteStatement = 5, RULE_tableAliasWithCols = 6, 
		RULE_subQuerySource = 7, RULE_functionParameters = 8, RULE_parameterDefinition = 9, 
		RULE_parameterTypeDeclaration = 10, RULE_functionTypeDeclaration = 11, 
		RULE_parameterTypeDeclarationList = 12, RULE_parameterColumnNameTypeList = 13, 
		RULE_parameterColumnNameType = 14, RULE_varSizeParam = 15, RULE_preSelectClauses = 16, 
		RULE_postSelectClauses = 17, RULE_selectRest = 18, RULE_multiInsertFromRest = 19, 
		RULE_fromRest = 20, RULE_simpleQueryExpression = 21, RULE_selectQueryExpression = 22, 
		RULE_fromQueryExpression = 23, RULE_setOperationFactor = 24, RULE_queryExpression = 25, 
		RULE_queryExpressionWithCTE = 26, RULE_setRHS = 27, RULE_multiInsertSetOperationFactor = 28, 
		RULE_multiInsertSelect = 29, RULE_multiInsertSetRHS = 30, RULE_subQueryExpression = 31, 
		RULE_limitClause = 32, RULE_fromSource = 33, RULE_tableVariableSource = 34, 
		RULE_tableFunctionSource = 35, RULE_variableName = 36, RULE_atomExpression = 37, 
		RULE_variableRef = 38, RULE_variableCall = 39, RULE_funNameRef = 40, RULE_lambdaExpression = 41, 
		RULE_lambdaParameter = 42, RULE_tableOrColumnRef = 43, RULE_newExpression = 44, 
		RULE_existsExpression = 45, RULE_scalarSubQueryExpression = 46, RULE_classNameWithPackage = 47, 
		RULE_classNameOrArrayDecl = 48, RULE_classNameList = 49, RULE_odpsqlNonReserved = 50, 
		RULE_relaxedKeywords = 51, RULE_identifier = 52, RULE_aliasIdentifier = 53, 
		RULE_identifierWithoutSql11 = 54, RULE_anythingButSemi = 55, RULE_memberAccessOperator = 56, 
		RULE_methodAccessOperator = 57, RULE_isNullOperator = 58, RULE_inOperator = 59, 
		RULE_betweenOperator = 60, RULE_mathExpression = 61, RULE_unarySuffixExpression = 62, 
		RULE_unaryPrefixExpression = 63, RULE_fieldExpression = 64, RULE_logicalExpression = 65, 
		RULE_notExpression = 66, RULE_equalExpression = 67, RULE_mathExpressionListInParentheses = 68, 
		RULE_mathExpressionList = 69, RULE_expression = 70, RULE_instanceId = 71, 
		RULE_authorizationStatement = 72, RULE_listUsers = 73, RULE_listGroups = 74, 
		RULE_addUserStatement = 75, RULE_addGroupStatement = 76, RULE_removeUserStatement = 77, 
		RULE_removeGroupStatement = 78, RULE_addAccountProvider = 79, RULE_removeAccountProvider = 80, 
		RULE_showAcl = 81, RULE_describeRole = 82, RULE_listRoles = 83, RULE_listTrustedProjects = 84, 
		RULE_addTrustedProject = 85, RULE_removeTrustedProject = 86, RULE_showSecurityConfiguration = 87, 
		RULE_showPackages = 88, RULE_showItems = 89, RULE_installPackage = 90, 
		RULE_uninstallPackage = 91, RULE_createPackage = 92, RULE_deletePackage = 93, 
		RULE_addToPackage = 94, RULE_removeFromPackage = 95, RULE_allowPackage = 96, 
		RULE_disallowPackage = 97, RULE_putPolicy = 98, RULE_getPolicy = 99, RULE_clearExpiredGrants = 100, 
		RULE_grantLabel = 101, RULE_revokeLabel = 102, RULE_showLabel = 103, RULE_grantSuperPrivilege = 104, 
		RULE_revokeSuperPrivilege = 105, RULE_createRoleStatement = 106, RULE_dropRoleStatement = 107, 
		RULE_addRoleToProject = 108, RULE_removeRoleFromProject = 109, RULE_grantRole = 110, 
		RULE_revokeRole = 111, RULE_grantPrivileges = 112, RULE_privilegeProperties = 113, 
		RULE_revokePrivileges = 114, RULE_purgePrivileges = 115, RULE_showGrants = 116, 
		RULE_showRoleGrants = 117, RULE_showRoles = 118, RULE_showRolePrincipals = 119, 
		RULE_user = 120, RULE_userRoleComments = 121, RULE_accountProvider = 122, 
		RULE_privilegeObjectName = 123, RULE_privilegeObjectType = 124, RULE_roleName = 125, 
		RULE_packageName = 126, RULE_packageNameWithProject = 127, RULE_principalSpecification = 128, 
		RULE_principalName = 129, RULE_describePackage = 130, RULE_principalIdentifier = 131, 
		RULE_privilege = 132, RULE_privilegeType = 133, RULE_privilegeObject = 134, 
		RULE_filePath = 135, RULE_adminOptionFor = 136, RULE_withAdminOption = 137, 
		RULE_withGrantOption = 138, RULE_grantOptionFor = 139, RULE_label = 140, 
		RULE_columnNameList = 141, RULE_columnName = 142, RULE_allIdentifiers = 143, 
		RULE_options = 144, RULE_projectName = 145, RULE_alterStatement = 146, 
		RULE_alterTableStatementSuffix = 147, RULE_alterStatementSuffixArchive = 148, 
		RULE_alterStatementSuffixMergeFiles = 149, RULE_alterStatementSuffixCompact = 150, 
		RULE_compactType = 151, RULE_alterStatementSuffixFreeze = 152, RULE_alterStatementSuffixRestore = 153, 
		RULE_descStatement = 154, RULE_descSchemaStatement = 155, RULE_descTableStatement = 156, 
		RULE_descTableExtendedStatement = 157, RULE_descProjectStatement = 158, 
		RULE_descInstanceStatement = 159, RULE_showStatement = 160, RULE_showCreateTableStatement = 161, 
		RULE_showSchemasStatament = 162, RULE_showPartitionStatement = 163, RULE_showInstanceStatement = 164, 
		RULE_showTableStatement = 165, RULE_bareDate = 166, RULE_showStmtIdentifier = 167, 
		RULE_rowFormat = 168, RULE_recordReader = 169, RULE_recordWriter = 170, 
		RULE_rowFormatSerde = 171, RULE_rowFormatDelimited = 172, RULE_tableRowFormat = 173, 
		RULE_tableProperties = 174, RULE_tablePropertiesList = 175, RULE_keyValueProperty = 176, 
		RULE_userDefinedJoinPropertiesList = 177, RULE_tableRowFormatFieldIdentifier = 178, 
		RULE_tableRowFormatCollItemsIdentifier = 179, RULE_tableRowFormatMapKeysIdentifier = 180, 
		RULE_tableRowFormatLinesIdentifier = 181, RULE_tableRowNullFormat = 182, 
		RULE_columnNameTypeList = 183, RULE_columnNameColonTypeList = 184, RULE_columnNameCommentList = 185, 
		RULE_columnNameComment = 186, RULE_columnRefOrder = 187, RULE_columnNameType = 188, 
		RULE_columnNameColonType = 189, RULE_colType = 190, RULE_colTypeList = 191, 
		RULE_anyType = 192, RULE_type = 193, RULE_primitiveType = 194, RULE_builtinTypeOrUdt = 195, 
		RULE_primitiveTypeOrUdt = 196, RULE_listType = 197, RULE_structType = 198, 
		RULE_mapType = 199, RULE_unionType = 200, RULE_setOperator = 201, RULE_withClause = 202, 
		RULE_selectClause = 203, RULE_selectList = 204, RULE_selectTrfmClause = 205, 
		RULE_hintClause = 206, RULE_hintList = 207, RULE_hintItem = 208, RULE_dynamicfilterHint = 209, 
		RULE_mapJoinHint = 210, RULE_skewJoinHint = 211, RULE_selectivityHint = 212, 
		RULE_multipleSkewHintArgs = 213, RULE_skewJoinHintArgs = 214, RULE_skewColumns = 215, 
		RULE_skewJoinHintKeyValues = 216, RULE_hintName = 217, RULE_hintArgs = 218, 
		RULE_hintArgName = 219, RULE_selectItem = 220, RULE_trfmClause = 221, 
		RULE_selectExpression = 222, RULE_selectExpressionList = 223, RULE_window_clause = 224, 
		RULE_window_defn = 225, RULE_window_specification = 226, RULE_window_frame = 227, 
		RULE_frame_exclusion = 228, RULE_window_frame_boundary = 229, RULE_tableAllColumns = 230, 
		RULE_expressionList = 231, RULE_aliasList = 232, RULE_fromClause = 233, 
		RULE_joinSource = 234, RULE_joinRHS = 235, RULE_uniqueJoinSource = 236, 
		RULE_uniqueJoinExpr = 237, RULE_uniqueJoinToken = 238, RULE_joinToken = 239, 
		RULE_lateralView = 240, RULE_tableAlias = 241, RULE_tableBucketSample = 242, 
		RULE_splitSample = 243, RULE_tableSample = 244, RULE_tableSource = 245, 
		RULE_availableSql11KeywordsForOdpsTableAlias = 246, RULE_schemaName = 247, 
		RULE_tableName = 248, RULE_partitioningSpec = 249, RULE_partitionTableFunctionSource = 250, 
		RULE_partitionedTableFunction = 251, RULE_whereClause = 252, RULE_valueRowConstructor = 253, 
		RULE_valuesTableConstructor = 254, RULE_valuesClause = 255, RULE_virtualTableSource = 256, 
		RULE_tableNameColList = 257, RULE_functionTypeCubeOrRollup = 258, RULE_groupingSetsItem = 259, 
		RULE_groupingSetsClause = 260, RULE_groupByKey = 261, RULE_groupByClause = 262, 
		RULE_groupingSetExpression = 263, RULE_groupingSetExpressionMultiple = 264, 
		RULE_groupingExpressionSingle = 265, RULE_havingClause = 266, RULE_havingCondition = 267, 
		RULE_expressionsInParenthese = 268, RULE_expressionsNotInParenthese = 269, 
		RULE_columnRefOrderInParenthese = 270, RULE_columnRefOrderNotInParenthese = 271, 
		RULE_orderByClause = 272, RULE_columnNameOrIndexInParenthese = 273, RULE_columnNameOrIndexNotInParenthese = 274, 
		RULE_columnNameOrIndex = 275, RULE_zorderByClause = 276, RULE_clusterByClause = 277, 
		RULE_partitionByClause = 278, RULE_distributeByClause = 279, RULE_sortByClause = 280, 
		RULE_function = 281, RULE_functionArgument = 282, RULE_builtinFunctionStructure = 283, 
		RULE_functionName = 284, RULE_castExpression = 285, RULE_caseExpression = 286, 
		RULE_whenExpression = 287, RULE_constant = 288, RULE_simpleStringLiteral = 289, 
		RULE_stringLiteral = 290, RULE_doubleQuoteStringLiteral = 291, RULE_charSetStringLiteral = 292, 
		RULE_dateLiteral = 293, RULE_dateTimeLiteral = 294, RULE_timestampLiteral = 295, 
		RULE_intervalLiteral = 296, RULE_intervalQualifiers = 297, RULE_intervalQualifiersUnit = 298, 
		RULE_intervalQualifierPrecision = 299, RULE_booleanValue = 300, RULE_partitionSpec = 301, 
		RULE_partitionVal = 302, RULE_dateWithoutQuote = 303, RULE_functionIdentifier = 304, 
		RULE_nonReserved = 305, RULE_sql11ReservedKeywordsUsedAsCastFunctionName = 306, 
		RULE_sql11ReservedKeywordsUsedAsIdentifier = 307, RULE_reserved = 308;
	private static String[] makeRuleNames() {
		return new String[] {
			"command", "statement", "whoamiStatement", "sqlCostStatement", "compoundStatement", 
			"cteStatement", "tableAliasWithCols", "subQuerySource", "functionParameters", 
			"parameterDefinition", "parameterTypeDeclaration", "functionTypeDeclaration", 
			"parameterTypeDeclarationList", "parameterColumnNameTypeList", "parameterColumnNameType", 
			"varSizeParam", "preSelectClauses", "postSelectClauses", "selectRest", 
			"multiInsertFromRest", "fromRest", "simpleQueryExpression", "selectQueryExpression", 
			"fromQueryExpression", "setOperationFactor", "queryExpression", "queryExpressionWithCTE", 
			"setRHS", "multiInsertSetOperationFactor", "multiInsertSelect", "multiInsertSetRHS", 
			"subQueryExpression", "limitClause", "fromSource", "tableVariableSource", 
			"tableFunctionSource", "variableName", "atomExpression", "variableRef", 
			"variableCall", "funNameRef", "lambdaExpression", "lambdaParameter", 
			"tableOrColumnRef", "newExpression", "existsExpression", "scalarSubQueryExpression", 
			"classNameWithPackage", "classNameOrArrayDecl", "classNameList", "odpsqlNonReserved", 
			"relaxedKeywords", "identifier", "aliasIdentifier", "identifierWithoutSql11", 
			"anythingButSemi", "memberAccessOperator", "methodAccessOperator", "isNullOperator", 
			"inOperator", "betweenOperator", "mathExpression", "unarySuffixExpression", 
			"unaryPrefixExpression", "fieldExpression", "logicalExpression", "notExpression", 
			"equalExpression", "mathExpressionListInParentheses", "mathExpressionList", 
			"expression", "instanceId", "authorizationStatement", "listUsers", "listGroups", 
			"addUserStatement", "addGroupStatement", "removeUserStatement", "removeGroupStatement", 
			"addAccountProvider", "removeAccountProvider", "showAcl", "describeRole", 
			"listRoles", "listTrustedProjects", "addTrustedProject", "removeTrustedProject", 
			"showSecurityConfiguration", "showPackages", "showItems", "installPackage", 
			"uninstallPackage", "createPackage", "deletePackage", "addToPackage", 
			"removeFromPackage", "allowPackage", "disallowPackage", "putPolicy", 
			"getPolicy", "clearExpiredGrants", "grantLabel", "revokeLabel", "showLabel", 
			"grantSuperPrivilege", "revokeSuperPrivilege", "createRoleStatement", 
			"dropRoleStatement", "addRoleToProject", "removeRoleFromProject", "grantRole", 
			"revokeRole", "grantPrivileges", "privilegeProperties", "revokePrivileges", 
			"purgePrivileges", "showGrants", "showRoleGrants", "showRoles", "showRolePrincipals", 
			"user", "userRoleComments", "accountProvider", "privilegeObjectName", 
			"privilegeObjectType", "roleName", "packageName", "packageNameWithProject", 
			"principalSpecification", "principalName", "describePackage", "principalIdentifier", 
			"privilege", "privilegeType", "privilegeObject", "filePath", "adminOptionFor", 
			"withAdminOption", "withGrantOption", "grantOptionFor", "label", "columnNameList", 
			"columnName", "allIdentifiers", "options", "projectName", "alterStatement", 
			"alterTableStatementSuffix", "alterStatementSuffixArchive", "alterStatementSuffixMergeFiles", 
			"alterStatementSuffixCompact", "compactType", "alterStatementSuffixFreeze", 
			"alterStatementSuffixRestore", "descStatement", "descSchemaStatement", 
			"descTableStatement", "descTableExtendedStatement", "descProjectStatement", 
			"descInstanceStatement", "showStatement", "showCreateTableStatement", 
			"showSchemasStatament", "showPartitionStatement", "showInstanceStatement", 
			"showTableStatement", "bareDate", "showStmtIdentifier", "rowFormat", 
			"recordReader", "recordWriter", "rowFormatSerde", "rowFormatDelimited", 
			"tableRowFormat", "tableProperties", "tablePropertiesList", "keyValueProperty", 
			"userDefinedJoinPropertiesList", "tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
			"tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", "tableRowNullFormat", 
			"columnNameTypeList", "columnNameColonTypeList", "columnNameCommentList", 
			"columnNameComment", "columnRefOrder", "columnNameType", "columnNameColonType", 
			"colType", "colTypeList", "anyType", "type", "primitiveType", "builtinTypeOrUdt", 
			"primitiveTypeOrUdt", "listType", "structType", "mapType", "unionType", 
			"setOperator", "withClause", "selectClause", "selectList", "selectTrfmClause", 
			"hintClause", "hintList", "hintItem", "dynamicfilterHint", "mapJoinHint", 
			"skewJoinHint", "selectivityHint", "multipleSkewHintArgs", "skewJoinHintArgs", 
			"skewColumns", "skewJoinHintKeyValues", "hintName", "hintArgs", "hintArgName", 
			"selectItem", "trfmClause", "selectExpression", "selectExpressionList", 
			"window_clause", "window_defn", "window_specification", "window_frame", 
			"frame_exclusion", "window_frame_boundary", "tableAllColumns", "expressionList", 
			"aliasList", "fromClause", "joinSource", "joinRHS", "uniqueJoinSource", 
			"uniqueJoinExpr", "uniqueJoinToken", "joinToken", "lateralView", "tableAlias", 
			"tableBucketSample", "splitSample", "tableSample", "tableSource", "availableSql11KeywordsForOdpsTableAlias", 
			"schemaName", "tableName", "partitioningSpec", "partitionTableFunctionSource", 
			"partitionedTableFunction", "whereClause", "valueRowConstructor", "valuesTableConstructor", 
			"valuesClause", "virtualTableSource", "tableNameColList", "functionTypeCubeOrRollup", 
			"groupingSetsItem", "groupingSetsClause", "groupByKey", "groupByClause", 
			"groupingSetExpression", "groupingSetExpressionMultiple", "groupingExpressionSingle", 
			"havingClause", "havingCondition", "expressionsInParenthese", "expressionsNotInParenthese", 
			"columnRefOrderInParenthese", "columnRefOrderNotInParenthese", "orderByClause", 
			"columnNameOrIndexInParenthese", "columnNameOrIndexNotInParenthese", 
			"columnNameOrIndex", "zorderByClause", "clusterByClause", "partitionByClause", 
			"distributeByClause", "sortByClause", "function", "functionArgument", 
			"builtinFunctionStructure", "functionName", "castExpression", "caseExpression", 
			"whenExpression", "constant", "simpleStringLiteral", "stringLiteral", 
			"doubleQuoteStringLiteral", "charSetStringLiteral", "dateLiteral", "dateTimeLiteral", 
			"timestampLiteral", "intervalLiteral", "intervalQualifiers", "intervalQualifiersUnit", 
			"intervalQualifierPrecision", "booleanValue", "partitionSpec", "partitionVal", 
			"dateWithoutQuote", "functionIdentifier", "nonReserved", "sql11ReservedKeywordsUsedAsCastFunctionName", 
			"sql11ReservedKeywordsUsedAsIdentifier", "reserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, "'new'", null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			"'.'", "':'", null, null, null, null, "'['", "']'", "'{'", "'}'", null, 
			"'<=>'", null, "'<='", "'<'", "'>='", "'>'", "'/'", "'+'", "'-'", "'*'", 
			"'%'", null, "'&'", "'~'", "'|'", "'||'", "'^'", "'?'", "'$'", "'#'", 
			"':='", "'->'", null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, "'\\'", "'@'", "'_'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "KW_MAJOR", "KW_MINOR", "KW_FREEZE", "KW_HELP", "KW_HELP_SHORT", 
			"KW_ALIAS", "KW_UNALIAS", "KW_QUOTA", "KW_REGION", "KW_EXTERNALPROJECT", 
			"KW_LS", "KW_PRIV", "KW_COST", "KW_PROCESSLIST", "KW_PROC", "KW_INSTANCES", 
			"KW_INSTANCE", "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_NONE", "KW_AND", 
			"KW_OR", "KW_NOT", "KW_LIKE", "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", 
			"KW_ORDER", "KW_ZORDER", "KW_GROUP", "KW_GROUPS", "KW_BY", "KW_HAVING", 
			"KW_WHERE", "KW_FROM", "KW_AS", "KW_SELECT", "KW_DISTINCT", "KW_INSERT", 
			"KW_OVERWRITE", "KW_OUTER", "KW_UNIQUEJOIN", "KW_PRESERVE", "KW_JOIN", 
			"KW_LEFT", "KW_RIGHT", "KW_FULL", "KW_ON", "KW_PARTITION", "KW_PARTITIONS", 
			"KW_TABLE", "KW_TABLES", "KW_COLUMNS", "KW_INDEX", "KW_INDEXES", "KW_REBUILD", 
			"KW_FUNCTIONS", "KW_SHOW", "KW_MSCK", "KW_REPAIR", "KW_DIRECTORY", "KW_LOCAL", 
			"KW_TRANSFORM", "KW_USING", "KW_CLUSTER", "KW_DISTRIBUTE", "KW_SORT", 
			"KW_UNION", "KW_LOAD", "KW_UNLOAD", "KW_EXPORT", "KW_IMPORT", "KW_REPLICATION", 
			"KW_METADATA", "KW_DATA", "KW_INPATH", "KW_IS", "KW_NULL", "KW_CREATE", 
			"KW_EXTERNAL", "KW_ALTER", "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_LAST", 
			"KW_NULLS", "KW_AFTER", "KW_DESCRIBE", "KW_DROP", "KW_RENAME", "KW_IGNORE", 
			"KW_PROTECTION", "KW_TO", "KW_COMMENT", "KW_BOOLEAN", "KW_TINYINT", "KW_SMALLINT", 
			"KW_INT", "KW_BIGINT", "KW_FLOAT", "KW_DOUBLE", "KW_DATE", "KW_DATETIME", 
			"KW_TIMESTAMP", "KW_INTERVAL", "KW_DECIMAL", "KW_STRING", "KW_CHAR", 
			"KW_VARCHAR", "KW_ARRAY", "KW_STRUCT", "KW_MAP", "KW_UNIONTYPE", "KW_REDUCE", 
			"KW_PARTITIONED", "KW_CLUSTERED", "KW_SORTED", "KW_INTO", "KW_BUCKETS", 
			"KW_ROW", "KW_ROWS", "KW_FORMAT", "KW_DELIMITED", "KW_FIELDS", "KW_TERMINATED", 
			"KW_ESCAPED", "KW_COLLECTION", "KW_ITEMS", "KW_KEYS", "KW_KEY_TYPE", 
			"KW_LINES", "KW_STORED", "KW_FILEFORMAT", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", 
			"KW_INPUTDRIVER", "KW_OUTPUTDRIVER", "KW_OFFLINE", "KW_ENABLE", "KW_DISABLE", 
			"KW_READONLY", "KW_NO_DROP", "KW_LOCATION", "KW_TABLESAMPLE", "KW_BUCKET", 
			"KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", "KW_ADD", "KW_REPLACE", "KW_RLIKE", 
			"KW_REGEXP", "KW_TEMPORARY", "KW_FUNCTION", "KW_MACRO", "KW_FILE", "KW_JAR", 
			"KW_EXPLAIN", "KW_EXTENDED", "KW_FORMATTED", "KW_PRETTY", "KW_DEPENDENCY", 
			"KW_LOGICAL", "KW_SERDE", "KW_WITH", "KW_DEFERRED", "KW_SERDEPROPERTIES", 
			"KW_DBPROPERTIES", "KW_LIMIT", "KW_OFFSET", "KW_SET", "KW_UNSET", "KW_TBLPROPERTIES", 
			"KW_IDXPROPERTIES", "KW_VALUE_TYPE", "KW_ELEM_TYPE", "KW_DEFINED", "KW_CASE", 
			"KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "KW_MAPJOIN", "KW_SKEWJOIN", 
			"KW_DYNAMICFILTER", "KW_STREAMTABLE", "KW_HOLD_DDLTIME", "KW_CLUSTERSTATUS", 
			"KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", "KW_PLUS", "KW_MINUS", 
			"KW_FETCH", "KW_INTERSECT", "KW_VIEW", "KW_IN", "KW_DATABASE", "KW_DATABASES", 
			"KW_MATERIALIZED", "KW_SCHEMA", "KW_SCHEMAS", "KW_GRANT", "KW_REVOKE", 
			"KW_SSL", "KW_UNDO", "KW_LOCK", "KW_LOCKS", "KW_UNLOCK", "KW_SHARED", 
			"KW_EXCLUSIVE", "KW_PROCEDURE", "KW_UNSIGNED", "KW_WHILE", "KW_READ", 
			"KW_READS", "KW_PURGE", "KW_RANGE", "KW_ANALYZE", "KW_BEFORE", "KW_BETWEEN", 
			"KW_BOTH", "KW_BINARY", "KW_CROSS", "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", 
			"KW_RECORDREADER", "KW_RECORDWRITER", "KW_SEMI", "KW_ANTI", "KW_LATERAL", 
			"KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_COMPUTE", "KW_STATISTICS", 
			"KW_NULL_VALUE", "KW_DISTINCT_VALUE", "KW_TABLE_COUNT", "KW_COLUMN_SUM", 
			"KW_COLUMN_MAX", "KW_COLUMN_MIN", "KW_EXPRESSION_CONDITION", "KW_USE", 
			"KW_OPTION", "KW_CONCATENATE", "KW_SHOW_DATABASE", "KW_UPDATE", "KW_MATCHED", 
			"KW_RESTRICT", "KW_CASCADE", "KW_SKEWED", "KW_ROLLUP", "KW_CUBE", "KW_DIRECTORIES", 
			"KW_FOR", "KW_WINDOW", "KW_UNBOUNDED", "KW_PRECEDING", "KW_FOLLOWING", 
			"KW_CURRENT", "KW_LOCALTIMESTAMP", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", 
			"KW_LESS", "KW_MORE", "KW_OVER", "KW_GROUPING", "KW_SETS", "KW_TRUNCATE", 
			"KW_NOSCAN", "KW_PARTIALSCAN", "KW_USER", "KW_ROLE", "KW_ROLES", "KW_INNER", 
			"KW_EXCHANGE", "KW_URI", "KW_SERVER", "KW_ADMIN", "KW_OWNER", "KW_PRINCIPALS", 
			"KW_COMPACT", "KW_COMPACTIONS", "KW_TRANSACTIONS", "KW_REWRITE", "KW_AUTHORIZATION", 
			"KW_CONF", "KW_VALUES", "KW_RELOAD", "KW_YEAR", "KW_MONTH", "KW_DAY", 
			"KW_HOUR", "KW_MINUTE", "KW_SECOND", "KW_YEARS", "KW_MONTHS", "KW_DAYS", 
			"KW_HOURS", "KW_MINUTES", "KW_SECONDS", "KW_UDFPROPERTIES", "KW_EXCLUDE", 
			"KW_TIES", "KW_NO", "KW_OTHERS", "KW_BEGIN", "KW_RETURNS", "KW_SQL", 
			"KW_LOOP", "KW_NEW", "KW_LIFECYCLE", "KW_REMOVE", "KW_GRANTS", "KW_ACL", 
			"KW_TYPE", "KW_LIST", "KW_USERS", "KW_WHOAMI", "KW_TRUSTEDPROJECTS", 
			"KW_TRUSTEDPROJECT", "KW_SECURITYCONFIGURATION", "KW_PRIVILEGES", "KW_PROJECT", 
			"KW_PROJECTS", "KW_LABEL", "KW_ALLOW", "KW_DISALLOW", "KW_PACKAGE", "KW_PACKAGES", 
			"KW_INSTALL", "KW_UNINSTALL", "KW_P", "KW_JOB", "KW_JOBS", "KW_ACCOUNTPROVIDERS", 
			"KW_RESOURCES", "KW_FLAGS", "KW_COUNT", "KW_STATISTIC", "KW_STATISTIC_LIST", 
			"KW_GET", "KW_PUT", "KW_POLICY", "KW_PROJECTPROTECTION", "KW_EXCEPTION", 
			"KW_CLEAR", "KW_EXPIRED", "KW_EXP", "KW_ACCOUNTPROVIDER", "KW_SUPER", 
			"KW_VOLUMEFILE", "KW_VOLUMEARCHIVE", "KW_OFFLINEMODEL", "KW_PY", "KW_RESOURCE", 
			"KW_KILL", "KW_STATUS", "KW_SETPROJECT", "KW_MERGE", "KW_SMALLFILES", 
			"KW_PARTITIONPROPERTIES", "KW_EXSTORE", "KW_CHANGELOGS", "KW_REDO", "KW_CHANGEOWNER", 
			"KW_RECYCLEBIN", "KW_PRIVILEGEPROPERTIES", "KW_CACHE", "KW_CACHEPROPERTIES", 
			"KW_VARIABLES", "KW_EXCEPT", "KW_SELECTIVITY", "KW_EXTRACT", "KW_SUBSTRING", 
			"KW_DEFAULT", "KW_ANY", "KW_NATURAL", "KW_CONSTRAINT", "KW_PRIMARY", 
			"KW_KEY", "KW_VALIDATE", "KW_NOVALIDATE", "KW_RELY", "KW_NORELY", "KW_CLONE", 
			"KW_HISTORY", "KW_RESTORE", "KW_LSN", "KW_WITHIN", "KW_FILTER", "KW_TENANT", 
			"KW_SHARDS", "KW_HUBLIFECYCLE", "KW_HUBTABLE", "KW_OUTPUT", "KW_CODE_BEGIN", 
			"KW_CODE_END", "KW_MODEL", "KW_PROPERTIES", "DOT", "COLON", "COMMA", 
			"SEMICOLON", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", 
			"EQUAL", "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", "GREATERTHANOREQUALTO", 
			"GREATERTHAN", "DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", "AMPERSAND", 
			"TILDE", "BITWISEOR", "CONCATENATE", "BITWISEXOR", "QUESTION", "DOLLAR", 
			"SHARP", "ASSIGN", "LAMBDA_IMPLEMENT", "Letter", "Num", "StringLiteral", 
			"DoubleQuoteStringLiteral", "BigintLiteral", "SmallintLiteral", "TinyintLiteral", 
			"DecimalLiteral", "ByteLengthLiteral", "Number", "Variable", "Identifier", 
			"QuotedIdentifier", "CharSetStringLiteral", "WS", "COMMENT", "HintStart", 
			"ESCAPE", "AT", "UNDERLINE", "ANY_CHAR"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "CommandParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public CommandParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class CommandContext extends ParserRuleContext {
		public TerminalNode SEMICOLON() { return getToken(CommandParser.SEMICOLON, 0); }
		public TerminalNode EOF() { return getToken(CommandParser.EOF, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCommand(this);
		}
	}

	public final CommandContext command() throws RecognitionException {
		CommandContext _localctx = new CommandContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_COST) | (1L << KW_DESC) | (1L << KW_SHOW))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (KW_CREATE - 81)) | (1L << (KW_ALTER - 81)) | (1L << (KW_DESCRIBE - 81)) | (1L << (KW_DROP - 81)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (KW_ADD - 152)) | (1L << (KW_DELETE - 152)) | (1L << (KW_GRANT - 152)) | (1L << (KW_REVOKE - 152)))) != 0) || _la==KW_PURGE || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (KW_REMOVE - 319)) | (1L << (KW_LIST - 319)) | (1L << (KW_WHOAMI - 319)) | (1L << (KW_ALLOW - 319)) | (1L << (KW_DISALLOW - 319)) | (1L << (KW_INSTALL - 319)) | (1L << (KW_UNINSTALL - 319)) | (1L << (KW_GET - 319)) | (1L << (KW_PUT - 319)) | (1L << (KW_CLEAR - 319)))) != 0)) {
				{
				setState(618);
				statement();
				}
			}

			setState(621);
			match(SEMICOLON);
			setState(622);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return getRuleContext(AlterStatementContext.class,0);
		}
		public AuthorizationStatementContext authorizationStatement() {
			return getRuleContext(AuthorizationStatementContext.class,0);
		}
		public SqlCostStatementContext sqlCostStatement() {
			return getRuleContext(SqlCostStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public DescStatementContext descStatement() {
			return getRuleContext(DescStatementContext.class,0);
		}
		public WhoamiStatementContext whoamiStatement() {
			return getRuleContext(WhoamiStatementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			setState(630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(624);
				alterStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(625);
				authorizationStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(626);
				sqlCostStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(627);
				showStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(628);
				descStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(629);
				whoamiStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhoamiStatementContext extends ParserRuleContext {
		public TerminalNode KW_WHOAMI() { return getToken(CommandParser.KW_WHOAMI, 0); }
		public WhoamiStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whoamiStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWhoamiStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWhoamiStatement(this);
		}
	}

	public final WhoamiStatementContext whoamiStatement() throws RecognitionException {
		WhoamiStatementContext _localctx = new WhoamiStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_whoamiStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(632);
			match(KW_WHOAMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlCostStatementContext extends ParserRuleContext {
		public AnythingButSemiContext query;
		public TerminalNode KW_COST() { return getToken(CommandParser.KW_COST, 0); }
		public TerminalNode KW_SQL() { return getToken(CommandParser.KW_SQL, 0); }
		public AnythingButSemiContext anythingButSemi() {
			return getRuleContext(AnythingButSemiContext.class,0);
		}
		public SqlCostStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlCostStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSqlCostStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSqlCostStatement(this);
		}
	}

	public final SqlCostStatementContext sqlCostStatement() throws RecognitionException {
		SqlCostStatementContext _localctx = new SqlCostStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sqlCostStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(634);
			match(KW_COST);
			setState(635);
			match(KW_SQL);
			setState(636);
			((SqlCostStatementContext)_localctx).query = anythingButSemi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public TerminalNode KW_BEGIN() { return getToken(CommandParser.KW_BEGIN, 0); }
		public TerminalNode KW_END() { return getToken(CommandParser.KW_END, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCompoundStatement(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_compoundStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(638);
			match(KW_BEGIN);
			setState(642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_COST) | (1L << KW_DESC) | (1L << KW_SHOW))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (KW_CREATE - 81)) | (1L << (KW_ALTER - 81)) | (1L << (KW_DESCRIBE - 81)) | (1L << (KW_DROP - 81)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (KW_ADD - 152)) | (1L << (KW_DELETE - 152)) | (1L << (KW_GRANT - 152)) | (1L << (KW_REVOKE - 152)))) != 0) || _la==KW_PURGE || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (KW_REMOVE - 319)) | (1L << (KW_LIST - 319)) | (1L << (KW_WHOAMI - 319)) | (1L << (KW_ALLOW - 319)) | (1L << (KW_DISALLOW - 319)) | (1L << (KW_INSTALL - 319)) | (1L << (KW_UNINSTALL - 319)) | (1L << (KW_GET - 319)) | (1L << (KW_PUT - 319)) | (1L << (KW_CLEAR - 319)))) != 0)) {
				{
				{
				setState(639);
				statement();
				}
				}
				setState(644);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(645);
			match(KW_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteStatementContext extends ParserRuleContext {
		public IdentifierContext id;
		public ColumnNameCommentListContext cols;
		public FunctionParametersContext param;
		public VariableNameContext retvar;
		public ParameterTypeDeclarationContext retType;
		public QueryExpressionContext queryExp;
		public ExpressionContext exp;
		public CompoundStatementContext cpd;
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(CommandParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(CommandParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(CommandParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(CommandParser.RPAREN, i);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public ColumnNameCommentListContext columnNameCommentList() {
			return getRuleContext(ColumnNameCommentListContext.class,0);
		}
		public FunctionParametersContext functionParameters() {
			return getRuleContext(FunctionParametersContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_RETURNS() { return getToken(CommandParser.KW_RETURNS, 0); }
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public ParameterTypeDeclarationContext parameterTypeDeclaration() {
			return getRuleContext(ParameterTypeDeclarationContext.class,0);
		}
		public CteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCteStatement(this);
		}
	}

	public final CteStatementContext cteStatement() throws RecognitionException {
		CteStatementContext _localctx = new CteStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_cteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(647);
			((CteStatementContext)_localctx).id = identifier();
			setState(659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(648);
				match(LPAREN);
				setState(649);
				((CteStatementContext)_localctx).cols = columnNameCommentList();
				setState(650);
				match(RPAREN);
				}
				break;
			case 2:
				{
				setState(652);
				((CteStatementContext)_localctx).param = functionParameters();
				setState(657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_RETURNS) {
					{
					setState(653);
					match(KW_RETURNS);
					setState(654);
					((CteStatementContext)_localctx).retvar = variableName();
					setState(655);
					((CteStatementContext)_localctx).retType = parameterTypeDeclaration();
					}
				}

				}
				break;
			}
			setState(661);
			match(KW_AS);
			setState(670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				setState(662);
				match(LPAREN);
				setState(665);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					setState(663);
					((CteStatementContext)_localctx).queryExp = queryExpression();
					}
					break;
				case 2:
					{
					setState(664);
					((CteStatementContext)_localctx).exp = expression();
					}
					break;
				}
				setState(667);
				match(RPAREN);
				}
				break;
			case KW_BEGIN:
				{
				setState(669);
				((CteStatementContext)_localctx).cpd = compoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasWithColsContext extends ParserRuleContext {
		public IdentifierContext table;
		public IdentifierContext identifier;
		public List<IdentifierContext> col = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TableAliasWithColsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasWithCols; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableAliasWithCols(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableAliasWithCols(this);
		}
	}

	public final TableAliasWithColsContext tableAliasWithCols() throws RecognitionException {
		TableAliasWithColsContext _localctx = new TableAliasWithColsContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_tableAliasWithCols);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(672);
				match(KW_AS);
				}
				break;
			}
			setState(675);
			((TableAliasWithColsContext)_localctx).table = identifier();
			setState(687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(676);
				match(LPAREN);
				setState(677);
				((TableAliasWithColsContext)_localctx).identifier = identifier();
				((TableAliasWithColsContext)_localctx).col.add(((TableAliasWithColsContext)_localctx).identifier);
				setState(682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(678);
					match(COMMA);
					setState(679);
					((TableAliasWithColsContext)_localctx).identifier = identifier();
					((TableAliasWithColsContext)_localctx).col.add(((TableAliasWithColsContext)_localctx).identifier);
					}
					}
					setState(684);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(685);
				match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubQuerySourceContext extends ParserRuleContext {
		public SubQueryExpressionContext subQuery;
		public TableAliasWithColsContext alias;
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public TableAliasWithColsContext tableAliasWithCols() {
			return getRuleContext(TableAliasWithColsContext.class,0);
		}
		public SubQuerySourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subQuerySource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSubQuerySource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSubQuerySource(this);
		}
	}

	public final SubQuerySourceContext subQuerySource() throws RecognitionException {
		SubQuerySourceContext _localctx = new SubQuerySourceContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_subQuerySource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(689);
			((SubQuerySourceContext)_localctx).subQuery = subQueryExpression();
			setState(691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(690);
				((SubQuerySourceContext)_localctx).alias = tableAliasWithCols();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParametersContext extends ParserRuleContext {
		public ParameterDefinitionContext parameterDefinition;
		public List<ParameterDefinitionContext> param = new ArrayList<ParameterDefinitionContext>();
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<ParameterDefinitionContext> parameterDefinition() {
			return getRuleContexts(ParameterDefinitionContext.class);
		}
		public ParameterDefinitionContext parameterDefinition(int i) {
			return getRuleContext(ParameterDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunctionParameters(this);
		}
	}

	public final FunctionParametersContext functionParameters() throws RecognitionException {
		FunctionParametersContext _localctx = new FunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_functionParameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(693);
			match(LPAREN);
			setState(702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Variable) {
				{
				setState(694);
				((FunctionParametersContext)_localctx).parameterDefinition = parameterDefinition();
				((FunctionParametersContext)_localctx).param.add(((FunctionParametersContext)_localctx).parameterDefinition);
				setState(699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(695);
					match(COMMA);
					setState(696);
					((FunctionParametersContext)_localctx).parameterDefinition = parameterDefinition();
					((FunctionParametersContext)_localctx).param.add(((FunctionParametersContext)_localctx).parameterDefinition);
					}
					}
					setState(701);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(704);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDefinitionContext extends ParserRuleContext {
		public VariableNameContext var;
		public ParameterTypeDeclarationContext decl;
		public ExpressionContext init;
		public StringLiteralContext comment;
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public ParameterTypeDeclarationContext parameterTypeDeclaration() {
			return getRuleContext(ParameterTypeDeclarationContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(CommandParser.EQUAL, 0); }
		public TerminalNode KW_COMMENT() { return getToken(CommandParser.KW_COMMENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ParameterDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterParameterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitParameterDefinition(this);
		}
	}

	public final ParameterDefinitionContext parameterDefinition() throws RecognitionException {
		ParameterDefinitionContext _localctx = new ParameterDefinitionContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_parameterDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(706);
			((ParameterDefinitionContext)_localctx).var = variableName();
			setState(707);
			((ParameterDefinitionContext)_localctx).decl = parameterTypeDeclaration();
			setState(710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(708);
				match(EQUAL);
				setState(709);
				((ParameterDefinitionContext)_localctx).init = expression();
				}
			}

			setState(714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(712);
				match(KW_COMMENT);
				setState(713);
				((ParameterDefinitionContext)_localctx).comment = stringLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterTypeDeclarationContext extends ParserRuleContext {
		public VarSizeParamContext var;
		public ParameterColumnNameTypeListContext columnsType;
		public FunctionTypeDeclarationContext funType;
		public AnyTypeContext singleType;
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public VarSizeParamContext varSizeParam() {
			return getRuleContext(VarSizeParamContext.class,0);
		}
		public ParameterColumnNameTypeListContext parameterColumnNameTypeList() {
			return getRuleContext(ParameterColumnNameTypeListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CommandParser.COMMA, 0); }
		public FunctionTypeDeclarationContext functionTypeDeclaration() {
			return getRuleContext(FunctionTypeDeclarationContext.class,0);
		}
		public AnyTypeContext anyType() {
			return getRuleContext(AnyTypeContext.class,0);
		}
		public ParameterTypeDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterTypeDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterParameterTypeDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitParameterTypeDeclaration(this);
		}
	}

	public final ParameterTypeDeclarationContext parameterTypeDeclaration() throws RecognitionException {
		ParameterTypeDeclarationContext _localctx = new ParameterTypeDeclarationContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_parameterTypeDeclaration);
		int _la;
		try {
			setState(730);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(716);
				match(KW_TABLE);
				setState(717);
				match(LPAREN);
				setState(724);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(718);
					((ParameterTypeDeclarationContext)_localctx).var = varSizeParam();
					}
					break;
				case KW_TRUE:
				case KW_FALSE:
				case KW_ALL:
				case KW_NONE:
				case KW_LIKE:
				case KW_EXISTS:
				case KW_ASC:
				case KW_DESC:
				case KW_ORDER:
				case KW_ZORDER:
				case KW_GROUP:
				case KW_GROUPS:
				case KW_BY:
				case KW_AS:
				case KW_INSERT:
				case KW_OVERWRITE:
				case KW_OUTER:
				case KW_UNIQUEJOIN:
				case KW_LEFT:
				case KW_RIGHT:
				case KW_FULL:
				case KW_PARTITION:
				case KW_PARTITIONS:
				case KW_TABLE:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_LOCAL:
				case KW_TRANSFORM:
				case KW_USING:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_UNION:
				case KW_LOAD:
				case KW_UNLOAD:
				case KW_EXPORT:
				case KW_IMPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_IS:
				case KW_NULL:
				case KW_CREATE:
				case KW_EXTERNAL:
				case KW_ALTER:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_LAST:
				case KW_NULLS:
				case KW_AFTER:
				case KW_DESCRIBE:
				case KW_DROP:
				case KW_RENAME:
				case KW_IGNORE:
				case KW_PROTECTION:
				case KW_TO:
				case KW_COMMENT:
				case KW_BOOLEAN:
				case KW_TINYINT:
				case KW_SMALLINT:
				case KW_INT:
				case KW_BIGINT:
				case KW_FLOAT:
				case KW_DOUBLE:
				case KW_DATE:
				case KW_DATETIME:
				case KW_TIMESTAMP:
				case KW_INTERVAL:
				case KW_DECIMAL:
				case KW_STRING:
				case KW_ARRAY:
				case KW_STRUCT:
				case KW_MAP:
				case KW_UNIONTYPE:
				case KW_REDUCE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_INTO:
				case KW_BUCKETS:
				case KW_ROW:
				case KW_ROWS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_OFFLINE:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_READONLY:
				case KW_NO_DROP:
				case KW_LOCATION:
				case KW_TABLESAMPLE:
				case KW_BUCKET:
				case KW_OUT:
				case KW_OF:
				case KW_PERCENT:
				case KW_ADD:
				case KW_REPLACE:
				case KW_RLIKE:
				case KW_REGEXP:
				case KW_TEMPORARY:
				case KW_MACRO:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_PRETTY:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_WITH:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_SET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_SKEWJOIN:
				case KW_DYNAMICFILTER:
				case KW_STREAMTABLE:
				case KW_HOLD_DDLTIME:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_DELETE:
				case KW_PLUS:
				case KW_MINUS:
				case KW_FETCH:
				case KW_INTERSECT:
				case KW_VIEW:
				case KW_IN:
				case KW_DATABASE:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_GRANT:
				case KW_REVOKE:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_PROCEDURE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_READS:
				case KW_PURGE:
				case KW_RANGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BOTH:
				case KW_BINARY:
				case KW_CONTINUE:
				case KW_CURSOR:
				case KW_TRIGGER:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_ANTI:
				case KW_LATERAL:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_NULL_VALUE:
				case KW_DISTINCT_VALUE:
				case KW_TABLE_COUNT:
				case KW_COLUMN_SUM:
				case KW_COLUMN_MAX:
				case KW_COLUMN_MIN:
				case KW_EXPRESSION_CONDITION:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_UPDATE:
				case KW_MATCHED:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_ROLLUP:
				case KW_CUBE:
				case KW_DIRECTORIES:
				case KW_FOR:
				case KW_WINDOW:
				case KW_UNBOUNDED:
				case KW_PRECEDING:
				case KW_FOLLOWING:
				case KW_LOCALTIMESTAMP:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_LESS:
				case KW_MORE:
				case KW_OVER:
				case KW_GROUPING:
				case KW_SETS:
				case KW_TRUNCATE:
				case KW_NOSCAN:
				case KW_PARTIALSCAN:
				case KW_USER:
				case KW_ROLE:
				case KW_ROLES:
				case KW_INNER:
				case KW_EXCHANGE:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_AUTHORIZATION:
				case KW_CONF:
				case KW_VALUES:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_MONTH:
				case KW_DAY:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_YEARS:
				case KW_MONTHS:
				case KW_DAYS:
				case KW_HOURS:
				case KW_MINUTES:
				case KW_SECONDS:
				case KW_UDFPROPERTIES:
				case KW_EXCLUDE:
				case KW_TIES:
				case KW_NO:
				case KW_OTHERS:
				case KW_BEGIN:
				case KW_RETURNS:
				case KW_SQL:
				case KW_LOOP:
				case KW_NEW:
				case KW_LIFECYCLE:
				case KW_REMOVE:
				case KW_GRANTS:
				case KW_ACL:
				case KW_TYPE:
				case KW_LIST:
				case KW_USERS:
				case KW_WHOAMI:
				case KW_TRUSTEDPROJECTS:
				case KW_TRUSTEDPROJECT:
				case KW_SECURITYCONFIGURATION:
				case KW_PRIVILEGES:
				case KW_PROJECT:
				case KW_PROJECTS:
				case KW_LABEL:
				case KW_ALLOW:
				case KW_DISALLOW:
				case KW_PACKAGE:
				case KW_PACKAGES:
				case KW_INSTALL:
				case KW_UNINSTALL:
				case KW_P:
				case KW_JOB:
				case KW_JOBS:
				case KW_ACCOUNTPROVIDERS:
				case KW_RESOURCES:
				case KW_FLAGS:
				case KW_COUNT:
				case KW_STATISTIC:
				case KW_STATISTIC_LIST:
				case KW_GET:
				case KW_PUT:
				case KW_POLICY:
				case KW_PROJECTPROTECTION:
				case KW_EXCEPTION:
				case KW_CLEAR:
				case KW_EXPIRED:
				case KW_EXP:
				case KW_ACCOUNTPROVIDER:
				case KW_SUPER:
				case KW_VOLUMEFILE:
				case KW_VOLUMEARCHIVE:
				case KW_OFFLINEMODEL:
				case KW_PY:
				case KW_RESOURCE:
				case KW_KILL:
				case KW_STATUS:
				case KW_SETPROJECT:
				case KW_MERGE:
				case KW_SMALLFILES:
				case KW_PARTITIONPROPERTIES:
				case KW_EXSTORE:
				case KW_CHANGELOGS:
				case KW_REDO:
				case KW_CHANGEOWNER:
				case KW_RECYCLEBIN:
				case KW_PRIVILEGEPROPERTIES:
				case KW_CACHE:
				case KW_CACHEPROPERTIES:
				case KW_VARIABLES:
				case KW_EXCEPT:
				case KW_SELECTIVITY:
				case KW_EXTRACT:
				case KW_SUBSTRING:
				case KW_DEFAULT:
				case KW_ANY:
				case KW_NATURAL:
				case KW_CONSTRAINT:
				case KW_PRIMARY:
				case KW_KEY:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_CLONE:
				case KW_HISTORY:
				case KW_RESTORE:
				case KW_LSN:
				case KW_WITHIN:
				case KW_FILTER:
				case KW_TENANT:
				case KW_SHARDS:
				case KW_HUBLIFECYCLE:
				case KW_HUBTABLE:
				case KW_OUTPUT:
				case KW_CODE_BEGIN:
				case KW_CODE_END:
				case KW_MODEL:
				case KW_PROPERTIES:
				case ByteLengthLiteral:
				case Identifier:
					{
					setState(719);
					((ParameterTypeDeclarationContext)_localctx).columnsType = parameterColumnNameTypeList();
					setState(722);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(720);
						match(COMMA);
						setState(721);
						((ParameterTypeDeclarationContext)_localctx).var = varSizeParam();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(726);
				match(RPAREN);
				}
				break;
			case KW_FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(728);
				((ParameterTypeDeclarationContext)_localctx).funType = functionTypeDeclaration();
				}
				break;
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_CHAR:
			case KW_VARCHAR:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_BINARY:
			case KW_ANY:
				enterOuterAlt(_localctx, 3);
				{
				setState(729);
				((ParameterTypeDeclarationContext)_localctx).singleType = anyType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTypeDeclarationContext extends ParserRuleContext {
		public ParameterTypeDeclarationListContext argType;
		public ParameterTypeDeclarationContext ret;
		public TerminalNode KW_FUNCTION() { return getToken(CommandParser.KW_FUNCTION, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public TerminalNode KW_RETURNS() { return getToken(CommandParser.KW_RETURNS, 0); }
		public ParameterTypeDeclarationContext parameterTypeDeclaration() {
			return getRuleContext(ParameterTypeDeclarationContext.class,0);
		}
		public ParameterTypeDeclarationListContext parameterTypeDeclarationList() {
			return getRuleContext(ParameterTypeDeclarationListContext.class,0);
		}
		public FunctionTypeDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTypeDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunctionTypeDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunctionTypeDeclaration(this);
		}
	}

	public final FunctionTypeDeclarationContext functionTypeDeclaration() throws RecognitionException {
		FunctionTypeDeclarationContext _localctx = new FunctionTypeDeclarationContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_functionTypeDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(732);
			match(KW_FUNCTION);
			setState(733);
			match(LPAREN);
			setState(735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TABLE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (KW_BOOLEAN - 97)) | (1L << (KW_TINYINT - 97)) | (1L << (KW_SMALLINT - 97)) | (1L << (KW_INT - 97)) | (1L << (KW_BIGINT - 97)) | (1L << (KW_FLOAT - 97)) | (1L << (KW_DOUBLE - 97)) | (1L << (KW_DATE - 97)) | (1L << (KW_DATETIME - 97)) | (1L << (KW_TIMESTAMP - 97)) | (1L << (KW_DECIMAL - 97)) | (1L << (KW_STRING - 97)) | (1L << (KW_CHAR - 97)) | (1L << (KW_VARCHAR - 97)) | (1L << (KW_ARRAY - 97)) | (1L << (KW_STRUCT - 97)) | (1L << (KW_MAP - 97)) | (1L << (KW_UNIONTYPE - 97)) | (1L << (KW_FUNCTION - 97)))) != 0) || _la==KW_BINARY || _la==KW_ANY) {
				{
				setState(734);
				((FunctionTypeDeclarationContext)_localctx).argType = parameterTypeDeclarationList();
				}
			}

			setState(737);
			match(RPAREN);
			setState(738);
			match(KW_RETURNS);
			setState(739);
			((FunctionTypeDeclarationContext)_localctx).ret = parameterTypeDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterTypeDeclarationListContext extends ParserRuleContext {
		public List<ParameterTypeDeclarationContext> parameterTypeDeclaration() {
			return getRuleContexts(ParameterTypeDeclarationContext.class);
		}
		public ParameterTypeDeclarationContext parameterTypeDeclaration(int i) {
			return getRuleContext(ParameterTypeDeclarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ParameterTypeDeclarationListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterTypeDeclarationList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterParameterTypeDeclarationList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitParameterTypeDeclarationList(this);
		}
	}

	public final ParameterTypeDeclarationListContext parameterTypeDeclarationList() throws RecognitionException {
		ParameterTypeDeclarationListContext _localctx = new ParameterTypeDeclarationListContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_parameterTypeDeclarationList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(741);
			parameterTypeDeclaration();
			setState(746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(742);
				match(COMMA);
				setState(743);
				parameterTypeDeclaration();
				}
				}
				setState(748);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterColumnNameTypeListContext extends ParserRuleContext {
		public List<ParameterColumnNameTypeContext> parameterColumnNameType() {
			return getRuleContexts(ParameterColumnNameTypeContext.class);
		}
		public ParameterColumnNameTypeContext parameterColumnNameType(int i) {
			return getRuleContext(ParameterColumnNameTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ParameterColumnNameTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterColumnNameTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterParameterColumnNameTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitParameterColumnNameTypeList(this);
		}
	}

	public final ParameterColumnNameTypeListContext parameterColumnNameTypeList() throws RecognitionException {
		ParameterColumnNameTypeListContext _localctx = new ParameterColumnNameTypeListContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_parameterColumnNameTypeList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(749);
			parameterColumnNameType();
			setState(754);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(750);
					match(COMMA);
					setState(751);
					parameterColumnNameType();
					}
					} 
				}
				setState(756);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterColumnNameTypeContext extends ParserRuleContext {
		public IdentifierContext colName;
		public AnyTypeContext t;
		public StringLiteralContext comment;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AnyTypeContext anyType() {
			return getRuleContext(AnyTypeContext.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(CommandParser.KW_COMMENT, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ParameterColumnNameTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterColumnNameType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterParameterColumnNameType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitParameterColumnNameType(this);
		}
	}

	public final ParameterColumnNameTypeContext parameterColumnNameType() throws RecognitionException {
		ParameterColumnNameTypeContext _localctx = new ParameterColumnNameTypeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_parameterColumnNameType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(757);
			((ParameterColumnNameTypeContext)_localctx).colName = identifier();
			setState(758);
			((ParameterColumnNameTypeContext)_localctx).t = anyType();
			setState(761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(759);
				match(KW_COMMENT);
				setState(760);
				((ParameterColumnNameTypeContext)_localctx).comment = stringLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarSizeParamContext extends ParserRuleContext {
		public AnyTypeContext any;
		public TerminalNode STAR() { return getToken(CommandParser.STAR, 0); }
		public AnyTypeContext anyType() {
			return getRuleContext(AnyTypeContext.class,0);
		}
		public VarSizeParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varSizeParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterVarSizeParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitVarSizeParam(this);
		}
	}

	public final VarSizeParamContext varSizeParam() throws RecognitionException {
		VarSizeParamContext _localctx = new VarSizeParamContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_varSizeParam);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(763);
			match(STAR);
			setState(764);
			((VarSizeParamContext)_localctx).any = anyType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreSelectClausesContext extends ParserRuleContext {
		public WhereClauseContext w;
		public GroupByClauseContext g;
		public HavingClauseContext h;
		public Window_clauseContext win;
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public PreSelectClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preSelectClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPreSelectClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPreSelectClauses(this);
		}
	}

	public final PreSelectClausesContext preSelectClauses() throws RecognitionException {
		PreSelectClausesContext _localctx = new PreSelectClausesContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_preSelectClauses);
		int _la;
		try {
			setState(788);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(766);
				((PreSelectClausesContext)_localctx).w = whereClause();
				setState(768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_GROUP) {
					{
					setState(767);
					((PreSelectClausesContext)_localctx).g = groupByClause();
					}
				}

				setState(771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_HAVING) {
					{
					setState(770);
					((PreSelectClausesContext)_localctx).h = havingClause();
					}
				}

				setState(774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WINDOW) {
					{
					setState(773);
					((PreSelectClausesContext)_localctx).win = window_clause();
					}
				}

				}
				break;
			case KW_GROUP:
				enterOuterAlt(_localctx, 2);
				{
				setState(776);
				((PreSelectClausesContext)_localctx).g = groupByClause();
				setState(778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_HAVING) {
					{
					setState(777);
					((PreSelectClausesContext)_localctx).h = havingClause();
					}
				}

				setState(781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WINDOW) {
					{
					setState(780);
					((PreSelectClausesContext)_localctx).win = window_clause();
					}
				}

				}
				break;
			case KW_HAVING:
				enterOuterAlt(_localctx, 3);
				{
				setState(783);
				((PreSelectClausesContext)_localctx).h = havingClause();
				setState(785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WINDOW) {
					{
					setState(784);
					((PreSelectClausesContext)_localctx).win = window_clause();
					}
				}

				}
				break;
			case KW_WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(787);
				((PreSelectClausesContext)_localctx).win = window_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PostSelectClausesContext extends ParserRuleContext {
		public OrderByClauseContext o;
		public ClusterByClauseContext c;
		public DistributeByClauseContext d;
		public SortByClauseContext sort;
		public ZorderByClauseContext zorder;
		public LimitClauseContext l;
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public ClusterByClauseContext clusterByClause() {
			return getRuleContext(ClusterByClauseContext.class,0);
		}
		public DistributeByClauseContext distributeByClause() {
			return getRuleContext(DistributeByClauseContext.class,0);
		}
		public SortByClauseContext sortByClause() {
			return getRuleContext(SortByClauseContext.class,0);
		}
		public ZorderByClauseContext zorderByClause() {
			return getRuleContext(ZorderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public PostSelectClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_postSelectClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPostSelectClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPostSelectClauses(this);
		}
	}

	public final PostSelectClausesContext postSelectClauses() throws RecognitionException {
		PostSelectClausesContext _localctx = new PostSelectClausesContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_postSelectClauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ORDER) {
				{
				setState(790);
				((PostSelectClausesContext)_localctx).o = orderByClause();
				}
			}

			setState(794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CLUSTER) {
				{
				setState(793);
				((PostSelectClausesContext)_localctx).c = clusterByClause();
				}
			}

			setState(797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_DISTRIBUTE) {
				{
				setState(796);
				((PostSelectClausesContext)_localctx).d = distributeByClause();
				}
			}

			setState(800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_SORT) {
				{
				setState(799);
				((PostSelectClausesContext)_localctx).sort = sortByClause();
				}
			}

			setState(803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ZORDER) {
				{
				setState(802);
				((PostSelectClausesContext)_localctx).zorder = zorderByClause();
				}
			}

			setState(806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LIMIT) {
				{
				setState(805);
				((PostSelectClausesContext)_localctx).l = limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectRestContext extends ParserRuleContext {
		public FromClauseContext f;
		public LateralViewContext lv;
		public PreSelectClausesContext pre;
		public PostSelectClausesContext post;
		public PostSelectClausesContext postSelectClauses() {
			return getRuleContext(PostSelectClausesContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public LateralViewContext lateralView() {
			return getRuleContext(LateralViewContext.class,0);
		}
		public PreSelectClausesContext preSelectClauses() {
			return getRuleContext(PreSelectClausesContext.class,0);
		}
		public SelectRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectRest(this);
		}
	}

	public final SelectRestContext selectRest() throws RecognitionException {
		SelectRestContext _localctx = new SelectRestContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_selectRest);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_FROM:
				{
				setState(808);
				((SelectRestContext)_localctx).f = fromClause();
				}
				break;
			case KW_LATERAL:
				{
				setState(809);
				((SelectRestContext)_localctx).lv = lateralView();
				}
				break;
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_HAVING:
			case KW_WHERE:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LIMIT:
			case KW_MINUS:
			case KW_INTERSECT:
			case KW_WINDOW:
			case KW_EXCEPT:
			case COMMA:
			case RPAREN:
				break;
			default:
				break;
			}
			setState(813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_GROUP) | (1L << KW_HAVING) | (1L << KW_WHERE))) != 0) || _la==KW_WINDOW) {
				{
				setState(812);
				((SelectRestContext)_localctx).pre = preSelectClauses();
				}
			}

			setState(815);
			((SelectRestContext)_localctx).post = postSelectClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiInsertFromRestContext extends ParserRuleContext {
		public SelectClauseContext s;
		public LateralViewContext lv;
		public PreSelectClausesContext pre;
		public PostSelectClausesContext post;
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public PostSelectClausesContext postSelectClauses() {
			return getRuleContext(PostSelectClausesContext.class,0);
		}
		public LateralViewContext lateralView() {
			return getRuleContext(LateralViewContext.class,0);
		}
		public PreSelectClausesContext preSelectClauses() {
			return getRuleContext(PreSelectClausesContext.class,0);
		}
		public MultiInsertFromRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInsertFromRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMultiInsertFromRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMultiInsertFromRest(this);
		}
	}

	public final MultiInsertFromRestContext multiInsertFromRest() throws RecognitionException {
		MultiInsertFromRestContext _localctx = new MultiInsertFromRestContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_multiInsertFromRest);
		int _la;
		try {
			setState(833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(817);
				((MultiInsertFromRestContext)_localctx).s = selectClause();
				setState(819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LATERAL) {
					{
					setState(818);
					((MultiInsertFromRestContext)_localctx).lv = lateralView();
					}
				}

				setState(822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_GROUP) | (1L << KW_HAVING) | (1L << KW_WHERE))) != 0) || _la==KW_WINDOW) {
					{
					setState(821);
					((MultiInsertFromRestContext)_localctx).pre = preSelectClauses();
					}
				}

				setState(824);
				((MultiInsertFromRestContext)_localctx).post = postSelectClauses();
				}
				break;
			case KW_GROUP:
			case KW_HAVING:
			case KW_WHERE:
			case KW_LATERAL:
			case KW_WINDOW:
				enterOuterAlt(_localctx, 2);
				{
				setState(827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LATERAL) {
					{
					setState(826);
					((MultiInsertFromRestContext)_localctx).lv = lateralView();
					}
				}

				setState(829);
				((MultiInsertFromRestContext)_localctx).pre = preSelectClauses();
				setState(830);
				((MultiInsertFromRestContext)_localctx).s = selectClause();
				setState(831);
				((MultiInsertFromRestContext)_localctx).post = postSelectClauses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromRestContext extends ParserRuleContext {
		public SelectClauseContext s;
		public PreSelectClausesContext pre;
		public PostSelectClausesContext post;
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public PostSelectClausesContext postSelectClauses() {
			return getRuleContext(PostSelectClausesContext.class,0);
		}
		public PreSelectClausesContext preSelectClauses() {
			return getRuleContext(PreSelectClausesContext.class,0);
		}
		public FromRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFromRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFromRest(this);
		}
	}

	public final FromRestContext fromRest() throws RecognitionException {
		FromRestContext _localctx = new FromRestContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_fromRest);
		int _la;
		try {
			setState(845);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(835);
				((FromRestContext)_localctx).s = selectClause();
				setState(837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_GROUP) | (1L << KW_HAVING) | (1L << KW_WHERE))) != 0) || _la==KW_WINDOW) {
					{
					setState(836);
					((FromRestContext)_localctx).pre = preSelectClauses();
					}
				}

				setState(839);
				((FromRestContext)_localctx).post = postSelectClauses();
				}
				break;
			case KW_GROUP:
			case KW_HAVING:
			case KW_WHERE:
			case KW_WINDOW:
				enterOuterAlt(_localctx, 2);
				{
				setState(841);
				((FromRestContext)_localctx).pre = preSelectClauses();
				setState(842);
				((FromRestContext)_localctx).s = selectClause();
				setState(843);
				((FromRestContext)_localctx).post = postSelectClauses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleQueryExpressionContext extends ParserRuleContext {
		public SelectQueryExpressionContext s;
		public FromQueryExpressionContext f;
		public SelectQueryExpressionContext selectQueryExpression() {
			return getRuleContext(SelectQueryExpressionContext.class,0);
		}
		public FromQueryExpressionContext fromQueryExpression() {
			return getRuleContext(FromQueryExpressionContext.class,0);
		}
		public SimpleQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSimpleQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSimpleQueryExpression(this);
		}
	}

	public final SimpleQueryExpressionContext simpleQueryExpression() throws RecognitionException {
		SimpleQueryExpressionContext _localctx = new SimpleQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_simpleQueryExpression);
		try {
			setState(849);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(847);
				((SimpleQueryExpressionContext)_localctx).s = selectQueryExpression();
				}
				break;
			case KW_FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(848);
				((SimpleQueryExpressionContext)_localctx).f = fromQueryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryExpressionContext extends ParserRuleContext {
		public SelectClauseContext s;
		public SelectRestContext rest;
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public SelectRestContext selectRest() {
			return getRuleContext(SelectRestContext.class,0);
		}
		public SelectQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectQueryExpression(this);
		}
	}

	public final SelectQueryExpressionContext selectQueryExpression() throws RecognitionException {
		SelectQueryExpressionContext _localctx = new SelectQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_selectQueryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(851);
			((SelectQueryExpressionContext)_localctx).s = selectClause();
			setState(852);
			((SelectQueryExpressionContext)_localctx).rest = selectRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromQueryExpressionContext extends ParserRuleContext {
		public FromClauseContext f;
		public FromRestContext rest;
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public FromRestContext fromRest() {
			return getRuleContext(FromRestContext.class,0);
		}
		public FromQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFromQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFromQueryExpression(this);
		}
	}

	public final FromQueryExpressionContext fromQueryExpression() throws RecognitionException {
		FromQueryExpressionContext _localctx = new FromQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_fromQueryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(854);
			((FromQueryExpressionContext)_localctx).f = fromClause();
			setState(855);
			((FromQueryExpressionContext)_localctx).rest = fromRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetOperationFactorContext extends ParserRuleContext {
		public SimpleQueryExpressionContext s;
		public QueryExpressionContext q;
		public SimpleQueryExpressionContext simpleQueryExpression() {
			return getRuleContext(SimpleQueryExpressionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public SetOperationFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setOperationFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSetOperationFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSetOperationFactor(this);
		}
	}

	public final SetOperationFactorContext setOperationFactor() throws RecognitionException {
		SetOperationFactorContext _localctx = new SetOperationFactorContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_setOperationFactor);
		try {
			setState(862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_FROM:
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(857);
				((SetOperationFactorContext)_localctx).s = simpleQueryExpression();
				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(858);
				match(LPAREN);
				setState(859);
				((SetOperationFactorContext)_localctx).q = queryExpression();
				setState(860);
				match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public QueryExpressionContext q;
		public SetRHSContext setRHS;
		public List<SetRHSContext> rhs = new ArrayList<SetRHSContext>();
		public SimpleQueryExpressionContext s;
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public List<SetRHSContext> setRHS() {
			return getRuleContexts(SetRHSContext.class);
		}
		public SetRHSContext setRHS(int i) {
			return getRuleContext(SetRHSContext.class,i);
		}
		public SimpleQueryExpressionContext simpleQueryExpression() {
			return getRuleContext(SimpleQueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitQueryExpression(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_queryExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(870);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				setState(864);
				match(LPAREN);
				setState(865);
				((QueryExpressionContext)_localctx).q = queryExpression();
				setState(866);
				match(RPAREN);
				setState(867);
				((QueryExpressionContext)_localctx).setRHS = setRHS();
				((QueryExpressionContext)_localctx).rhs.add(((QueryExpressionContext)_localctx).setRHS);
				}
				break;
			case KW_FROM:
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
				{
				setState(869);
				((QueryExpressionContext)_localctx).s = simpleQueryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_UNION || _la==KW_MINUS || _la==KW_INTERSECT || _la==KW_EXCEPT) {
				{
				{
				setState(872);
				((QueryExpressionContext)_localctx).setRHS = setRHS();
				((QueryExpressionContext)_localctx).rhs.add(((QueryExpressionContext)_localctx).setRHS);
				}
				}
				setState(877);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionWithCTEContext extends ParserRuleContext {
		public WithClauseContext w;
		public QueryExpressionContext exp;
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public QueryExpressionWithCTEContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionWithCTE; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterQueryExpressionWithCTE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitQueryExpressionWithCTE(this);
		}
	}

	public final QueryExpressionWithCTEContext queryExpressionWithCTE() throws RecognitionException {
		QueryExpressionWithCTEContext _localctx = new QueryExpressionWithCTEContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_queryExpressionWithCTE);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(878);
				((QueryExpressionWithCTEContext)_localctx).w = withClause();
				}
			}

			setState(881);
			((QueryExpressionWithCTEContext)_localctx).exp = queryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRHSContext extends ParserRuleContext {
		public SetOperatorContext op;
		public SetOperationFactorContext operand;
		public SetOperatorContext setOperator() {
			return getRuleContext(SetOperatorContext.class,0);
		}
		public SetOperationFactorContext setOperationFactor() {
			return getRuleContext(SetOperationFactorContext.class,0);
		}
		public SetRHSContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRHS; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSetRHS(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSetRHS(this);
		}
	}

	public final SetRHSContext setRHS() throws RecognitionException {
		SetRHSContext _localctx = new SetRHSContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_setRHS);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(883);
			((SetRHSContext)_localctx).op = setOperator();
			setState(884);
			((SetRHSContext)_localctx).operand = setOperationFactor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiInsertSetOperationFactorContext extends ParserRuleContext {
		public FromRestContext f;
		public MultiInsertSelectContext m;
		public FromRestContext fromRest() {
			return getRuleContext(FromRestContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public MultiInsertSelectContext multiInsertSelect() {
			return getRuleContext(MultiInsertSelectContext.class,0);
		}
		public MultiInsertSetOperationFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInsertSetOperationFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMultiInsertSetOperationFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMultiInsertSetOperationFactor(this);
		}
	}

	public final MultiInsertSetOperationFactorContext multiInsertSetOperationFactor() throws RecognitionException {
		MultiInsertSetOperationFactorContext _localctx = new MultiInsertSetOperationFactorContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_multiInsertSetOperationFactor);
		try {
			setState(891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_GROUP:
			case KW_HAVING:
			case KW_WHERE:
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_WINDOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(886);
				((MultiInsertSetOperationFactorContext)_localctx).f = fromRest();
				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(887);
				match(LPAREN);
				setState(888);
				((MultiInsertSetOperationFactorContext)_localctx).m = multiInsertSelect();
				setState(889);
				match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiInsertSelectContext extends ParserRuleContext {
		public MultiInsertSelectContext m;
		public MultiInsertSetRHSContext multiInsertSetRHS;
		public List<MultiInsertSetRHSContext> rhs = new ArrayList<MultiInsertSetRHSContext>();
		public MultiInsertFromRestContext f;
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public MultiInsertSelectContext multiInsertSelect() {
			return getRuleContext(MultiInsertSelectContext.class,0);
		}
		public List<MultiInsertSetRHSContext> multiInsertSetRHS() {
			return getRuleContexts(MultiInsertSetRHSContext.class);
		}
		public MultiInsertSetRHSContext multiInsertSetRHS(int i) {
			return getRuleContext(MultiInsertSetRHSContext.class,i);
		}
		public MultiInsertFromRestContext multiInsertFromRest() {
			return getRuleContext(MultiInsertFromRestContext.class,0);
		}
		public MultiInsertSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInsertSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMultiInsertSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMultiInsertSelect(this);
		}
	}

	public final MultiInsertSelectContext multiInsertSelect() throws RecognitionException {
		MultiInsertSelectContext _localctx = new MultiInsertSelectContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_multiInsertSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(899);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				setState(893);
				match(LPAREN);
				setState(894);
				((MultiInsertSelectContext)_localctx).m = multiInsertSelect();
				setState(895);
				match(RPAREN);
				setState(896);
				((MultiInsertSelectContext)_localctx).multiInsertSetRHS = multiInsertSetRHS();
				((MultiInsertSelectContext)_localctx).rhs.add(((MultiInsertSelectContext)_localctx).multiInsertSetRHS);
				}
				break;
			case KW_GROUP:
			case KW_HAVING:
			case KW_WHERE:
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_LATERAL:
			case KW_WINDOW:
				{
				setState(898);
				((MultiInsertSelectContext)_localctx).f = multiInsertFromRest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_UNION || _la==KW_MINUS || _la==KW_INTERSECT || _la==KW_EXCEPT) {
				{
				{
				setState(901);
				((MultiInsertSelectContext)_localctx).multiInsertSetRHS = multiInsertSetRHS();
				((MultiInsertSelectContext)_localctx).rhs.add(((MultiInsertSelectContext)_localctx).multiInsertSetRHS);
				}
				}
				setState(906);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiInsertSetRHSContext extends ParserRuleContext {
		public SetOperatorContext op;
		public MultiInsertSetOperationFactorContext operand;
		public SetOperatorContext setOperator() {
			return getRuleContext(SetOperatorContext.class,0);
		}
		public MultiInsertSetOperationFactorContext multiInsertSetOperationFactor() {
			return getRuleContext(MultiInsertSetOperationFactorContext.class,0);
		}
		public MultiInsertSetRHSContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInsertSetRHS; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMultiInsertSetRHS(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMultiInsertSetRHS(this);
		}
	}

	public final MultiInsertSetRHSContext multiInsertSetRHS() throws RecognitionException {
		MultiInsertSetRHSContext _localctx = new MultiInsertSetRHSContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_multiInsertSetRHS);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(907);
			((MultiInsertSetRHSContext)_localctx).op = setOperator();
			setState(908);
			((MultiInsertSetRHSContext)_localctx).operand = multiInsertSetOperationFactor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionContext query;
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public SubQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSubQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSubQueryExpression(this);
		}
	}

	public final SubQueryExpressionContext subQueryExpression() throws RecognitionException {
		SubQueryExpressionContext _localctx = new SubQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_subQueryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(910);
			match(LPAREN);
			setState(911);
			((SubQueryExpressionContext)_localctx).query = queryExpression();
			setState(912);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public MathExpressionContext offset;
		public MathExpressionContext exp;
		public TerminalNode KW_LIMIT() { return getToken(CommandParser.KW_LIMIT, 0); }
		public TerminalNode COMMA() { return getToken(CommandParser.COMMA, 0); }
		public List<MathExpressionContext> mathExpression() {
			return getRuleContexts(MathExpressionContext.class);
		}
		public MathExpressionContext mathExpression(int i) {
			return getRuleContext(MathExpressionContext.class,i);
		}
		public TerminalNode KW_OFFSET() { return getToken(CommandParser.KW_OFFSET, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitLimitClause(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_limitClause);
		int _la;
		try {
			setState(925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(914);
				match(KW_LIMIT);
				setState(915);
				((LimitClauseContext)_localctx).offset = mathExpression(0);
				setState(916);
				match(COMMA);
				setState(917);
				((LimitClauseContext)_localctx).exp = mathExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(919);
				match(KW_LIMIT);
				setState(920);
				((LimitClauseContext)_localctx).exp = mathExpression(0);
				setState(923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_OFFSET) {
					{
					setState(921);
					match(KW_OFFSET);
					setState(922);
					((LimitClauseContext)_localctx).offset = mathExpression(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromSourceContext extends ParserRuleContext {
		public PartitionedTableFunctionContext pt;
		public TableSourceContext t;
		public SubQuerySourceContext sq;
		public VirtualTableSourceContext vt;
		public TableVariableSourceContext tv;
		public TableFunctionSourceContext tf;
		public JoinSourceContext js;
		public PartitionedTableFunctionContext partitionedTableFunction() {
			return getRuleContext(PartitionedTableFunctionContext.class,0);
		}
		public TableSourceContext tableSource() {
			return getRuleContext(TableSourceContext.class,0);
		}
		public SubQuerySourceContext subQuerySource() {
			return getRuleContext(SubQuerySourceContext.class,0);
		}
		public VirtualTableSourceContext virtualTableSource() {
			return getRuleContext(VirtualTableSourceContext.class,0);
		}
		public TableVariableSourceContext tableVariableSource() {
			return getRuleContext(TableVariableSourceContext.class,0);
		}
		public TableFunctionSourceContext tableFunctionSource() {
			return getRuleContext(TableFunctionSourceContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public JoinSourceContext joinSource() {
			return getRuleContext(JoinSourceContext.class,0);
		}
		public FromSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFromSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFromSource(this);
		}
	}

	public final FromSourceContext fromSource() throws RecognitionException {
		FromSourceContext _localctx = new FromSourceContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_fromSource);
		try {
			setState(937);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(927);
				((FromSourceContext)_localctx).pt = partitionedTableFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(928);
				((FromSourceContext)_localctx).t = tableSource();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(929);
				((FromSourceContext)_localctx).sq = subQuerySource();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(930);
				((FromSourceContext)_localctx).vt = virtualTableSource();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(931);
				((FromSourceContext)_localctx).tv = tableVariableSource();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(932);
				((FromSourceContext)_localctx).tf = tableFunctionSource();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(933);
				match(LPAREN);
				setState(934);
				((FromSourceContext)_localctx).js = joinSource();
				setState(935);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableVariableSourceContext extends ParserRuleContext {
		public VariableNameContext var;
		public TableAliasWithColsContext alias;
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public TableAliasWithColsContext tableAliasWithCols() {
			return getRuleContext(TableAliasWithColsContext.class,0);
		}
		public TableVariableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableVariableSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableVariableSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableVariableSource(this);
		}
	}

	public final TableVariableSourceContext tableVariableSource() throws RecognitionException {
		TableVariableSourceContext _localctx = new TableVariableSourceContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_tableVariableSource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(939);
			((TableVariableSourceContext)_localctx).var = variableName();
			setState(941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(940);
				((TableVariableSourceContext)_localctx).alias = tableAliasWithCols();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionSourceContext extends ParserRuleContext {
		public FunctionContext fun;
		public TableAliasWithColsContext alias;
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TableAliasWithColsContext tableAliasWithCols() {
			return getRuleContext(TableAliasWithColsContext.class,0);
		}
		public TableFunctionSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunctionSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableFunctionSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableFunctionSource(this);
		}
	}

	public final TableFunctionSourceContext tableFunctionSource() throws RecognitionException {
		TableFunctionSourceContext _localctx = new TableFunctionSourceContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_tableFunctionSource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(943);
			((TableFunctionSourceContext)_localctx).fun = function();
			setState(945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(944);
				((TableFunctionSourceContext)_localctx).alias = tableAliasWithCols();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableNameContext extends ParserRuleContext {
		public TerminalNode Variable() { return getToken(CommandParser.Variable, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitVariableName(this);
		}
	}

	public final VariableNameContext variableName() throws RecognitionException {
		VariableNameContext _localctx = new VariableNameContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_variableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(947);
			match(Variable);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomExpressionContext extends ParserRuleContext {
		public ConstantContext con;
		public CastExpressionContext castExp;
		public CaseExpressionContext caseExp;
		public WhenExpressionContext whenExp;
		public ExpressionContext exp;
		public VariableRefContext var;
		public VariableCallContext varFun;
		public FunctionContext fun;
		public TableOrColumnRefContext col;
		public NewExpressionContext newExp;
		public ExistsExpressionContext exists;
		public ScalarSubQueryExpressionContext subQuery;
		public TerminalNode KW_NULL() { return getToken(CommandParser.KW_NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public CastExpressionContext castExpression() {
			return getRuleContext(CastExpressionContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public WhenExpressionContext whenExpression() {
			return getRuleContext(WhenExpressionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public VariableRefContext variableRef() {
			return getRuleContext(VariableRefContext.class,0);
		}
		public VariableCallContext variableCall() {
			return getRuleContext(VariableCallContext.class,0);
		}
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TableOrColumnRefContext tableOrColumnRef() {
			return getRuleContext(TableOrColumnRefContext.class,0);
		}
		public NewExpressionContext newExpression() {
			return getRuleContext(NewExpressionContext.class,0);
		}
		public ExistsExpressionContext existsExpression() {
			return getRuleContext(ExistsExpressionContext.class,0);
		}
		public ScalarSubQueryExpressionContext scalarSubQueryExpression() {
			return getRuleContext(ScalarSubQueryExpressionContext.class,0);
		}
		public AtomExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAtomExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAtomExpression(this);
		}
	}

	public final AtomExpressionContext atomExpression() throws RecognitionException {
		AtomExpressionContext _localctx = new AtomExpressionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_atomExpression);
		try {
			setState(965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(949);
				match(KW_NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(950);
				((AtomExpressionContext)_localctx).con = constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(951);
				((AtomExpressionContext)_localctx).castExp = castExpression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(952);
				((AtomExpressionContext)_localctx).caseExp = caseExpression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(953);
				((AtomExpressionContext)_localctx).whenExp = whenExpression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(954);
				match(LPAREN);
				setState(955);
				((AtomExpressionContext)_localctx).exp = expression();
				setState(956);
				match(RPAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(958);
				((AtomExpressionContext)_localctx).var = variableRef();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(959);
				((AtomExpressionContext)_localctx).varFun = variableCall();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(960);
				((AtomExpressionContext)_localctx).fun = function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(961);
				((AtomExpressionContext)_localctx).col = tableOrColumnRef();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(962);
				((AtomExpressionContext)_localctx).newExp = newExpression();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(963);
				((AtomExpressionContext)_localctx).exists = existsExpression();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(964);
				((AtomExpressionContext)_localctx).subQuery = scalarSubQueryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableRefContext extends ParserRuleContext {
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public VariableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterVariableRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitVariableRef(this);
		}
	}

	public final VariableRefContext variableRef() throws RecognitionException {
		VariableRefContext _localctx = new VariableRefContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_variableRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(967);
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableCallContext extends ParserRuleContext {
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ExpressionListContext expressionList() {
			return getRuleContext(ExpressionListContext.class,0);
		}
		public VariableCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterVariableCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitVariableCall(this);
		}
	}

	public final VariableCallContext variableCall() throws RecognitionException {
		VariableCallContext _localctx = new VariableCallContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_variableCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(969);
			variableName();
			setState(970);
			match(LPAREN);
			setState(972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_NOT - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_IF - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_CAST - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_CASE - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (COLON - 402)) | (1L << (LPAREN - 402)) | (1L << (PLUS - 402)) | (1L << (MINUS - 402)) | (1L << (TILDE - 402)) | (1L << (StringLiteral - 402)) | (1L << (DoubleQuoteStringLiteral - 402)) | (1L << (BigintLiteral - 402)) | (1L << (SmallintLiteral - 402)) | (1L << (TinyintLiteral - 402)) | (1L << (DecimalLiteral - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Number - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)) | (1L << (CharSetStringLiteral - 402)))) != 0)) {
				{
				setState(971);
				expressionList();
				}
			}

			setState(974);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunNameRefContext extends ParserRuleContext {
		public IdentifierContext db;
		public IdentifierContext fn;
		public TerminalNode COLON() { return getToken(CommandParser.COLON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public FunNameRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funNameRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunNameRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunNameRef(this);
		}
	}

	public final FunNameRefContext funNameRef() throws RecognitionException {
		FunNameRefContext _localctx = new FunNameRefContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_funNameRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(976);
			((FunNameRefContext)_localctx).db = identifier();
			setState(977);
			match(COLON);
			setState(978);
			((FunNameRefContext)_localctx).fn = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LambdaExpressionContext extends ParserRuleContext {
		public LambdaParameterContext lambdaParameter;
		public List<LambdaParameterContext> p = new ArrayList<LambdaParameterContext>();
		public VariableNameContext retvar;
		public ParameterTypeDeclarationContext retType;
		public CompoundStatementContext c;
		public QueryExpressionWithCTEContext q;
		public ExpressionContext e;
		public TerminalNode KW_FUNCTION() { return getToken(CommandParser.KW_FUNCTION, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public TerminalNode KW_RETURNS() { return getToken(CommandParser.KW_RETURNS, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public QueryExpressionWithCTEContext queryExpressionWithCTE() {
			return getRuleContext(QueryExpressionWithCTEContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<LambdaParameterContext> lambdaParameter() {
			return getRuleContexts(LambdaParameterContext.class);
		}
		public LambdaParameterContext lambdaParameter(int i) {
			return getRuleContext(LambdaParameterContext.class,i);
		}
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public ParameterTypeDeclarationContext parameterTypeDeclaration() {
			return getRuleContext(ParameterTypeDeclarationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TerminalNode LAMBDA_IMPLEMENT() { return getToken(CommandParser.LAMBDA_IMPLEMENT, 0); }
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lambdaExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterLambdaExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitLambdaExpression(this);
		}
	}

	public final LambdaExpressionContext lambdaExpression() throws RecognitionException {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_lambdaExpression);
		int _la;
		try {
			setState(1022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_FUNCTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(980);
				match(KW_FUNCTION);
				setState(981);
				match(LPAREN);
				setState(990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)))) != 0)) {
					{
					setState(982);
					((LambdaExpressionContext)_localctx).lambdaParameter = lambdaParameter();
					((LambdaExpressionContext)_localctx).p.add(((LambdaExpressionContext)_localctx).lambdaParameter);
					setState(987);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(983);
						match(COMMA);
						setState(984);
						((LambdaExpressionContext)_localctx).lambdaParameter = lambdaParameter();
						((LambdaExpressionContext)_localctx).p.add(((LambdaExpressionContext)_localctx).lambdaParameter);
						}
						}
						setState(989);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(992);
				match(RPAREN);
				setState(997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_RETURNS) {
					{
					setState(993);
					match(KW_RETURNS);
					setState(994);
					((LambdaExpressionContext)_localctx).retvar = variableName();
					setState(995);
					((LambdaExpressionContext)_localctx).retType = parameterTypeDeclaration();
					}
				}

				setState(999);
				match(KW_AS);
				setState(1003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1000);
					((LambdaExpressionContext)_localctx).c = compoundStatement();
					}
					break;
				case 2:
					{
					setState(1001);
					((LambdaExpressionContext)_localctx).q = queryExpressionWithCTE();
					}
					break;
				case 3:
					{
					setState(1002);
					((LambdaExpressionContext)_localctx).e = expression();
					}
					break;
				}
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case LPAREN:
			case ByteLengthLiteral:
			case Variable:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(1018);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_TRUE:
				case KW_FALSE:
				case KW_ALL:
				case KW_NONE:
				case KW_LIKE:
				case KW_EXISTS:
				case KW_ASC:
				case KW_DESC:
				case KW_ORDER:
				case KW_ZORDER:
				case KW_GROUP:
				case KW_GROUPS:
				case KW_BY:
				case KW_AS:
				case KW_INSERT:
				case KW_OVERWRITE:
				case KW_OUTER:
				case KW_UNIQUEJOIN:
				case KW_LEFT:
				case KW_RIGHT:
				case KW_FULL:
				case KW_PARTITION:
				case KW_PARTITIONS:
				case KW_TABLE:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_LOCAL:
				case KW_TRANSFORM:
				case KW_USING:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_UNION:
				case KW_LOAD:
				case KW_UNLOAD:
				case KW_EXPORT:
				case KW_IMPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_IS:
				case KW_NULL:
				case KW_CREATE:
				case KW_EXTERNAL:
				case KW_ALTER:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_LAST:
				case KW_NULLS:
				case KW_AFTER:
				case KW_DESCRIBE:
				case KW_DROP:
				case KW_RENAME:
				case KW_IGNORE:
				case KW_PROTECTION:
				case KW_TO:
				case KW_COMMENT:
				case KW_BOOLEAN:
				case KW_TINYINT:
				case KW_SMALLINT:
				case KW_INT:
				case KW_BIGINT:
				case KW_FLOAT:
				case KW_DOUBLE:
				case KW_DATE:
				case KW_DATETIME:
				case KW_TIMESTAMP:
				case KW_INTERVAL:
				case KW_DECIMAL:
				case KW_STRING:
				case KW_ARRAY:
				case KW_STRUCT:
				case KW_MAP:
				case KW_UNIONTYPE:
				case KW_REDUCE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_INTO:
				case KW_BUCKETS:
				case KW_ROW:
				case KW_ROWS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_OFFLINE:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_READONLY:
				case KW_NO_DROP:
				case KW_LOCATION:
				case KW_TABLESAMPLE:
				case KW_BUCKET:
				case KW_OUT:
				case KW_OF:
				case KW_PERCENT:
				case KW_ADD:
				case KW_REPLACE:
				case KW_RLIKE:
				case KW_REGEXP:
				case KW_TEMPORARY:
				case KW_MACRO:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_PRETTY:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_WITH:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_SET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_SKEWJOIN:
				case KW_DYNAMICFILTER:
				case KW_STREAMTABLE:
				case KW_HOLD_DDLTIME:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_DELETE:
				case KW_PLUS:
				case KW_MINUS:
				case KW_FETCH:
				case KW_INTERSECT:
				case KW_VIEW:
				case KW_IN:
				case KW_DATABASE:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_GRANT:
				case KW_REVOKE:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_PROCEDURE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_READS:
				case KW_PURGE:
				case KW_RANGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BOTH:
				case KW_BINARY:
				case KW_CONTINUE:
				case KW_CURSOR:
				case KW_TRIGGER:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_ANTI:
				case KW_LATERAL:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_NULL_VALUE:
				case KW_DISTINCT_VALUE:
				case KW_TABLE_COUNT:
				case KW_COLUMN_SUM:
				case KW_COLUMN_MAX:
				case KW_COLUMN_MIN:
				case KW_EXPRESSION_CONDITION:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_UPDATE:
				case KW_MATCHED:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_ROLLUP:
				case KW_CUBE:
				case KW_DIRECTORIES:
				case KW_FOR:
				case KW_WINDOW:
				case KW_UNBOUNDED:
				case KW_PRECEDING:
				case KW_FOLLOWING:
				case KW_LOCALTIMESTAMP:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_LESS:
				case KW_MORE:
				case KW_OVER:
				case KW_GROUPING:
				case KW_SETS:
				case KW_TRUNCATE:
				case KW_NOSCAN:
				case KW_PARTIALSCAN:
				case KW_USER:
				case KW_ROLE:
				case KW_ROLES:
				case KW_INNER:
				case KW_EXCHANGE:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_AUTHORIZATION:
				case KW_CONF:
				case KW_VALUES:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_MONTH:
				case KW_DAY:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_YEARS:
				case KW_MONTHS:
				case KW_DAYS:
				case KW_HOURS:
				case KW_MINUTES:
				case KW_SECONDS:
				case KW_UDFPROPERTIES:
				case KW_EXCLUDE:
				case KW_TIES:
				case KW_NO:
				case KW_OTHERS:
				case KW_BEGIN:
				case KW_RETURNS:
				case KW_SQL:
				case KW_LOOP:
				case KW_NEW:
				case KW_LIFECYCLE:
				case KW_REMOVE:
				case KW_GRANTS:
				case KW_ACL:
				case KW_TYPE:
				case KW_LIST:
				case KW_USERS:
				case KW_WHOAMI:
				case KW_TRUSTEDPROJECTS:
				case KW_TRUSTEDPROJECT:
				case KW_SECURITYCONFIGURATION:
				case KW_PRIVILEGES:
				case KW_PROJECT:
				case KW_PROJECTS:
				case KW_LABEL:
				case KW_ALLOW:
				case KW_DISALLOW:
				case KW_PACKAGE:
				case KW_PACKAGES:
				case KW_INSTALL:
				case KW_UNINSTALL:
				case KW_P:
				case KW_JOB:
				case KW_JOBS:
				case KW_ACCOUNTPROVIDERS:
				case KW_RESOURCES:
				case KW_FLAGS:
				case KW_COUNT:
				case KW_STATISTIC:
				case KW_STATISTIC_LIST:
				case KW_GET:
				case KW_PUT:
				case KW_POLICY:
				case KW_PROJECTPROTECTION:
				case KW_EXCEPTION:
				case KW_CLEAR:
				case KW_EXPIRED:
				case KW_EXP:
				case KW_ACCOUNTPROVIDER:
				case KW_SUPER:
				case KW_VOLUMEFILE:
				case KW_VOLUMEARCHIVE:
				case KW_OFFLINEMODEL:
				case KW_PY:
				case KW_RESOURCE:
				case KW_KILL:
				case KW_STATUS:
				case KW_SETPROJECT:
				case KW_MERGE:
				case KW_SMALLFILES:
				case KW_PARTITIONPROPERTIES:
				case KW_EXSTORE:
				case KW_CHANGELOGS:
				case KW_REDO:
				case KW_CHANGEOWNER:
				case KW_RECYCLEBIN:
				case KW_PRIVILEGEPROPERTIES:
				case KW_CACHE:
				case KW_CACHEPROPERTIES:
				case KW_VARIABLES:
				case KW_EXCEPT:
				case KW_SELECTIVITY:
				case KW_EXTRACT:
				case KW_SUBSTRING:
				case KW_DEFAULT:
				case KW_ANY:
				case KW_NATURAL:
				case KW_CONSTRAINT:
				case KW_PRIMARY:
				case KW_KEY:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_CLONE:
				case KW_HISTORY:
				case KW_RESTORE:
				case KW_LSN:
				case KW_WITHIN:
				case KW_FILTER:
				case KW_TENANT:
				case KW_SHARDS:
				case KW_HUBLIFECYCLE:
				case KW_HUBTABLE:
				case KW_OUTPUT:
				case KW_CODE_BEGIN:
				case KW_CODE_END:
				case KW_MODEL:
				case KW_PROPERTIES:
				case ByteLengthLiteral:
				case Variable:
				case Identifier:
					{
					setState(1005);
					((LambdaExpressionContext)_localctx).lambdaParameter = lambdaParameter();
					((LambdaExpressionContext)_localctx).p.add(((LambdaExpressionContext)_localctx).lambdaParameter);
					}
					break;
				case LPAREN:
					{
					setState(1006);
					match(LPAREN);
					setState(1015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)))) != 0)) {
						{
						setState(1007);
						((LambdaExpressionContext)_localctx).lambdaParameter = lambdaParameter();
						((LambdaExpressionContext)_localctx).p.add(((LambdaExpressionContext)_localctx).lambdaParameter);
						setState(1012);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1008);
							match(COMMA);
							setState(1009);
							((LambdaExpressionContext)_localctx).lambdaParameter = lambdaParameter();
							((LambdaExpressionContext)_localctx).p.add(((LambdaExpressionContext)_localctx).lambdaParameter);
							}
							}
							setState(1014);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(1017);
					match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1020);
				match(LAMBDA_IMPLEMENT);
				setState(1021);
				((LambdaExpressionContext)_localctx).e = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LambdaParameterContext extends ParserRuleContext {
		public VariableNameContext v;
		public IdentifierContext i;
		public ParameterTypeDeclarationContext p;
		public VariableNameContext variableName() {
			return getRuleContext(VariableNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterTypeDeclarationContext parameterTypeDeclaration() {
			return getRuleContext(ParameterTypeDeclarationContext.class,0);
		}
		public LambdaParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lambdaParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterLambdaParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitLambdaParameter(this);
		}
	}

	public final LambdaParameterContext lambdaParameter() throws RecognitionException {
		LambdaParameterContext _localctx = new LambdaParameterContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_lambdaParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1026);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Variable:
				{
				setState(1024);
				((LambdaParameterContext)_localctx).v = variableName();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				{
				setState(1025);
				((LambdaParameterContext)_localctx).i = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TABLE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (KW_BOOLEAN - 97)) | (1L << (KW_TINYINT - 97)) | (1L << (KW_SMALLINT - 97)) | (1L << (KW_INT - 97)) | (1L << (KW_BIGINT - 97)) | (1L << (KW_FLOAT - 97)) | (1L << (KW_DOUBLE - 97)) | (1L << (KW_DATE - 97)) | (1L << (KW_DATETIME - 97)) | (1L << (KW_TIMESTAMP - 97)) | (1L << (KW_DECIMAL - 97)) | (1L << (KW_STRING - 97)) | (1L << (KW_CHAR - 97)) | (1L << (KW_VARCHAR - 97)) | (1L << (KW_ARRAY - 97)) | (1L << (KW_STRUCT - 97)) | (1L << (KW_MAP - 97)) | (1L << (KW_UNIONTYPE - 97)) | (1L << (KW_FUNCTION - 97)))) != 0) || _la==KW_BINARY || _la==KW_ANY) {
				{
				setState(1028);
				((LambdaParameterContext)_localctx).p = parameterTypeDeclaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOrColumnRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableOrColumnRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOrColumnRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableOrColumnRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableOrColumnRef(this);
		}
	}

	public final TableOrColumnRefContext tableOrColumnRef() throws RecognitionException {
		TableOrColumnRefContext _localctx = new TableOrColumnRefContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_tableOrColumnRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1031);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NewExpressionContext extends ParserRuleContext {
		public ExpressionListContext args;
		public Token LSQUARE;
		public List<Token> arr = new ArrayList<Token>();
		public Token init;
		public ExpressionListContext elem;
		public ExpressionContext expression;
		public List<ExpressionContext> len = new ArrayList<ExpressionContext>();
		public TerminalNode KW_NEW() { return getToken(CommandParser.KW_NEW, 0); }
		public ClassNameWithPackageContext classNameWithPackage() {
			return getRuleContext(ClassNameWithPackageContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public TerminalNode RCURLY() { return getToken(CommandParser.RCURLY, 0); }
		public TerminalNode LCURLY() { return getToken(CommandParser.LCURLY, 0); }
		public List<TerminalNode> RSQUARE() { return getTokens(CommandParser.RSQUARE); }
		public TerminalNode RSQUARE(int i) {
			return getToken(CommandParser.RSQUARE, i);
		}
		public ExpressionListContext expressionList() {
			return getRuleContext(ExpressionListContext.class,0);
		}
		public List<TerminalNode> LSQUARE() { return getTokens(CommandParser.LSQUARE); }
		public TerminalNode LSQUARE(int i) {
			return getToken(CommandParser.LSQUARE, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_newExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterNewExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitNewExpression(this);
		}
	}

	public final NewExpressionContext newExpression() throws RecognitionException {
		NewExpressionContext _localctx = new NewExpressionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_newExpression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1033);
			match(KW_NEW);
			setState(1034);
			classNameWithPackage();
			setState(1066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1035);
				match(LPAREN);
				setState(1037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_NOT - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_IF - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_CAST - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_CASE - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (COLON - 402)) | (1L << (LPAREN - 402)) | (1L << (PLUS - 402)) | (1L << (MINUS - 402)) | (1L << (TILDE - 402)) | (1L << (StringLiteral - 402)) | (1L << (DoubleQuoteStringLiteral - 402)) | (1L << (BigintLiteral - 402)) | (1L << (SmallintLiteral - 402)) | (1L << (TinyintLiteral - 402)) | (1L << (DecimalLiteral - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Number - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)) | (1L << (CharSetStringLiteral - 402)))) != 0)) {
					{
					setState(1036);
					((NewExpressionContext)_localctx).args = expressionList();
					}
				}

				setState(1039);
				match(RPAREN);
				}
				break;
			case 2:
				{
				setState(1042); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1040);
					((NewExpressionContext)_localctx).LSQUARE = match(LSQUARE);
					((NewExpressionContext)_localctx).arr.add(((NewExpressionContext)_localctx).LSQUARE);
					setState(1041);
					match(RSQUARE);
					}
					}
					setState(1044); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==LSQUARE );
				setState(1046);
				((NewExpressionContext)_localctx).init = match(LCURLY);
				setState(1048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_NOT - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_IF - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_CAST - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_CASE - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (COLON - 402)) | (1L << (LPAREN - 402)) | (1L << (PLUS - 402)) | (1L << (MINUS - 402)) | (1L << (TILDE - 402)) | (1L << (StringLiteral - 402)) | (1L << (DoubleQuoteStringLiteral - 402)) | (1L << (BigintLiteral - 402)) | (1L << (SmallintLiteral - 402)) | (1L << (TinyintLiteral - 402)) | (1L << (DecimalLiteral - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Number - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)) | (1L << (CharSetStringLiteral - 402)))) != 0)) {
					{
					setState(1047);
					((NewExpressionContext)_localctx).elem = expressionList();
					}
				}

				setState(1050);
				match(RCURLY);
				}
				break;
			case 3:
				{
				setState(1055); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1051);
						((NewExpressionContext)_localctx).LSQUARE = match(LSQUARE);
						((NewExpressionContext)_localctx).arr.add(((NewExpressionContext)_localctx).LSQUARE);
						setState(1052);
						((NewExpressionContext)_localctx).expression = expression();
						((NewExpressionContext)_localctx).len.add(((NewExpressionContext)_localctx).expression);
						setState(1053);
						match(RSQUARE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1057); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1063);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1059);
						((NewExpressionContext)_localctx).LSQUARE = match(LSQUARE);
						((NewExpressionContext)_localctx).arr.add(((NewExpressionContext)_localctx).LSQUARE);
						setState(1060);
						match(RSQUARE);
						}
						} 
					}
					setState(1065);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistsExpressionContext extends ParserRuleContext {
		public SubQueryExpressionContext query;
		public TerminalNode KW_EXISTS() { return getToken(CommandParser.KW_EXISTS, 0); }
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public ExistsExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterExistsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitExistsExpression(this);
		}
	}

	public final ExistsExpressionContext existsExpression() throws RecognitionException {
		ExistsExpressionContext _localctx = new ExistsExpressionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_existsExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1068);
			match(KW_EXISTS);
			setState(1069);
			((ExistsExpressionContext)_localctx).query = subQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarSubQueryExpressionContext extends ParserRuleContext {
		public SubQueryExpressionContext subQuery;
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public ScalarSubQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarSubQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterScalarSubQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitScalarSubQueryExpression(this);
		}
	}

	public final ScalarSubQueryExpressionContext scalarSubQueryExpression() throws RecognitionException {
		ScalarSubQueryExpressionContext _localctx = new ScalarSubQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_scalarSubQueryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1071);
			((ScalarSubQueryExpressionContext)_localctx).subQuery = subQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassNameWithPackageContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> packages = new ArrayList<IdentifierContext>();
		public IdentifierContext className;
		public ClassNameListContext types;
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(CommandParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CommandParser.DOT, i);
		}
		public TerminalNode LESSTHAN() { return getToken(CommandParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHAN() { return getToken(CommandParser.GREATERTHAN, 0); }
		public ClassNameListContext classNameList() {
			return getRuleContext(ClassNameListContext.class,0);
		}
		public ClassNameWithPackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classNameWithPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterClassNameWithPackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitClassNameWithPackage(this);
		}
	}

	public final ClassNameWithPackageContext classNameWithPackage() throws RecognitionException {
		ClassNameWithPackageContext _localctx = new ClassNameWithPackageContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_classNameWithPackage);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1078);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1073);
					((ClassNameWithPackageContext)_localctx).identifier = identifier();
					((ClassNameWithPackageContext)_localctx).packages.add(((ClassNameWithPackageContext)_localctx).identifier);
					setState(1074);
					match(DOT);
					}
					} 
				}
				setState(1080);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			setState(1081);
			((ClassNameWithPackageContext)_localctx).className = identifier();
			setState(1086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LESSTHAN) {
				{
				setState(1082);
				match(LESSTHAN);
				setState(1083);
				((ClassNameWithPackageContext)_localctx).types = classNameList();
				setState(1084);
				match(GREATERTHAN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassNameOrArrayDeclContext extends ParserRuleContext {
		public Token LSQUARE;
		public List<Token> arr = new ArrayList<Token>();
		public ClassNameWithPackageContext classNameWithPackage() {
			return getRuleContext(ClassNameWithPackageContext.class,0);
		}
		public List<TerminalNode> RSQUARE() { return getTokens(CommandParser.RSQUARE); }
		public TerminalNode RSQUARE(int i) {
			return getToken(CommandParser.RSQUARE, i);
		}
		public List<TerminalNode> LSQUARE() { return getTokens(CommandParser.LSQUARE); }
		public TerminalNode LSQUARE(int i) {
			return getToken(CommandParser.LSQUARE, i);
		}
		public ClassNameOrArrayDeclContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classNameOrArrayDecl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterClassNameOrArrayDecl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitClassNameOrArrayDecl(this);
		}
	}

	public final ClassNameOrArrayDeclContext classNameOrArrayDecl() throws RecognitionException {
		ClassNameOrArrayDeclContext _localctx = new ClassNameOrArrayDeclContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_classNameOrArrayDecl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1088);
			classNameWithPackage();
			setState(1093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LSQUARE) {
				{
				{
				setState(1089);
				((ClassNameOrArrayDeclContext)_localctx).LSQUARE = match(LSQUARE);
				((ClassNameOrArrayDeclContext)_localctx).arr.add(((ClassNameOrArrayDeclContext)_localctx).LSQUARE);
				setState(1090);
				match(RSQUARE);
				}
				}
				setState(1095);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassNameListContext extends ParserRuleContext {
		public ClassNameOrArrayDeclContext classNameOrArrayDecl;
		public List<ClassNameOrArrayDeclContext> cn = new ArrayList<ClassNameOrArrayDeclContext>();
		public List<ClassNameOrArrayDeclContext> classNameOrArrayDecl() {
			return getRuleContexts(ClassNameOrArrayDeclContext.class);
		}
		public ClassNameOrArrayDeclContext classNameOrArrayDecl(int i) {
			return getRuleContext(ClassNameOrArrayDeclContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ClassNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterClassNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitClassNameList(this);
		}
	}

	public final ClassNameListContext classNameList() throws RecognitionException {
		ClassNameListContext _localctx = new ClassNameListContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_classNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1096);
			((ClassNameListContext)_localctx).classNameOrArrayDecl = classNameOrArrayDecl();
			((ClassNameListContext)_localctx).cn.add(((ClassNameListContext)_localctx).classNameOrArrayDecl);
			setState(1101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1097);
				match(COMMA);
				setState(1098);
				((ClassNameListContext)_localctx).classNameOrArrayDecl = classNameOrArrayDecl();
				((ClassNameListContext)_localctx).cn.add(((ClassNameListContext)_localctx).classNameOrArrayDecl);
				}
				}
				setState(1103);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OdpsqlNonReservedContext extends ParserRuleContext {
		public TerminalNode KW_RETURNS() { return getToken(CommandParser.KW_RETURNS, 0); }
		public TerminalNode KW_BEGIN() { return getToken(CommandParser.KW_BEGIN, 0); }
		public TerminalNode KW_LOOP() { return getToken(CommandParser.KW_LOOP, 0); }
		public TerminalNode KW_NEW() { return getToken(CommandParser.KW_NEW, 0); }
		public TerminalNode KW_REMOVE() { return getToken(CommandParser.KW_REMOVE, 0); }
		public TerminalNode KW_GRANTS() { return getToken(CommandParser.KW_GRANTS, 0); }
		public TerminalNode KW_ACL() { return getToken(CommandParser.KW_ACL, 0); }
		public TerminalNode KW_TYPE() { return getToken(CommandParser.KW_TYPE, 0); }
		public TerminalNode KW_LIST() { return getToken(CommandParser.KW_LIST, 0); }
		public TerminalNode KW_USERS() { return getToken(CommandParser.KW_USERS, 0); }
		public TerminalNode KW_WHOAMI() { return getToken(CommandParser.KW_WHOAMI, 0); }
		public TerminalNode KW_TRUSTEDPROJECTS() { return getToken(CommandParser.KW_TRUSTEDPROJECTS, 0); }
		public TerminalNode KW_TRUSTEDPROJECT() { return getToken(CommandParser.KW_TRUSTEDPROJECT, 0); }
		public TerminalNode KW_SECURITYCONFIGURATION() { return getToken(CommandParser.KW_SECURITYCONFIGURATION, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public TerminalNode KW_PACKAGES() { return getToken(CommandParser.KW_PACKAGES, 0); }
		public TerminalNode KW_INSTALL() { return getToken(CommandParser.KW_INSTALL, 0); }
		public TerminalNode KW_UNINSTALL() { return getToken(CommandParser.KW_UNINSTALL, 0); }
		public TerminalNode KW_PRIVILEGES() { return getToken(CommandParser.KW_PRIVILEGES, 0); }
		public TerminalNode KW_PROJECT() { return getToken(CommandParser.KW_PROJECT, 0); }
		public TerminalNode KW_PROJECTS() { return getToken(CommandParser.KW_PROJECTS, 0); }
		public TerminalNode KW_LABEL() { return getToken(CommandParser.KW_LABEL, 0); }
		public TerminalNode KW_ALLOW() { return getToken(CommandParser.KW_ALLOW, 0); }
		public TerminalNode KW_DISALLOW() { return getToken(CommandParser.KW_DISALLOW, 0); }
		public TerminalNode KW_P() { return getToken(CommandParser.KW_P, 0); }
		public TerminalNode KW_JOB() { return getToken(CommandParser.KW_JOB, 0); }
		public TerminalNode KW_JOBS() { return getToken(CommandParser.KW_JOBS, 0); }
		public TerminalNode KW_ACCOUNTPROVIDERS() { return getToken(CommandParser.KW_ACCOUNTPROVIDERS, 0); }
		public TerminalNode KW_RESOURCES() { return getToken(CommandParser.KW_RESOURCES, 0); }
		public TerminalNode KW_FLAGS() { return getToken(CommandParser.KW_FLAGS, 0); }
		public TerminalNode KW_STATISTIC_LIST() { return getToken(CommandParser.KW_STATISTIC_LIST, 0); }
		public TerminalNode KW_STATISTIC() { return getToken(CommandParser.KW_STATISTIC, 0); }
		public TerminalNode KW_COUNT() { return getToken(CommandParser.KW_COUNT, 0); }
		public TerminalNode KW_GET() { return getToken(CommandParser.KW_GET, 0); }
		public TerminalNode KW_PUT() { return getToken(CommandParser.KW_PUT, 0); }
		public TerminalNode KW_POLICY() { return getToken(CommandParser.KW_POLICY, 0); }
		public TerminalNode KW_PROJECTPROTECTION() { return getToken(CommandParser.KW_PROJECTPROTECTION, 0); }
		public TerminalNode KW_EXCEPTION() { return getToken(CommandParser.KW_EXCEPTION, 0); }
		public TerminalNode KW_CLEAR() { return getToken(CommandParser.KW_CLEAR, 0); }
		public TerminalNode KW_EXPIRED() { return getToken(CommandParser.KW_EXPIRED, 0); }
		public TerminalNode KW_EXP() { return getToken(CommandParser.KW_EXP, 0); }
		public TerminalNode KW_ACCOUNTPROVIDER() { return getToken(CommandParser.KW_ACCOUNTPROVIDER, 0); }
		public TerminalNode KW_SUPER() { return getToken(CommandParser.KW_SUPER, 0); }
		public TerminalNode KW_VOLUMEFILE() { return getToken(CommandParser.KW_VOLUMEFILE, 0); }
		public TerminalNode KW_VOLUMEARCHIVE() { return getToken(CommandParser.KW_VOLUMEARCHIVE, 0); }
		public TerminalNode KW_OFFLINEMODEL() { return getToken(CommandParser.KW_OFFLINEMODEL, 0); }
		public TerminalNode KW_PY() { return getToken(CommandParser.KW_PY, 0); }
		public TerminalNode KW_RESOURCE() { return getToken(CommandParser.KW_RESOURCE, 0); }
		public TerminalNode KW_STATUS() { return getToken(CommandParser.KW_STATUS, 0); }
		public TerminalNode KW_KILL() { return getToken(CommandParser.KW_KILL, 0); }
		public TerminalNode KW_HUBLIFECYCLE() { return getToken(CommandParser.KW_HUBLIFECYCLE, 0); }
		public TerminalNode KW_SHARDS() { return getToken(CommandParser.KW_SHARDS, 0); }
		public TerminalNode KW_SETPROJECT() { return getToken(CommandParser.KW_SETPROJECT, 0); }
		public TerminalNode KW_MERGE() { return getToken(CommandParser.KW_MERGE, 0); }
		public TerminalNode KW_SMALLFILES() { return getToken(CommandParser.KW_SMALLFILES, 0); }
		public TerminalNode KW_PARTITIONPROPERTIES() { return getToken(CommandParser.KW_PARTITIONPROPERTIES, 0); }
		public TerminalNode KW_EXSTORE() { return getToken(CommandParser.KW_EXSTORE, 0); }
		public TerminalNode KW_CHANGELOGS() { return getToken(CommandParser.KW_CHANGELOGS, 0); }
		public TerminalNode KW_REDO() { return getToken(CommandParser.KW_REDO, 0); }
		public TerminalNode KW_HUBTABLE() { return getToken(CommandParser.KW_HUBTABLE, 0); }
		public TerminalNode KW_CHANGEOWNER() { return getToken(CommandParser.KW_CHANGEOWNER, 0); }
		public TerminalNode KW_RECYCLEBIN() { return getToken(CommandParser.KW_RECYCLEBIN, 0); }
		public TerminalNode KW_PRIVILEGEPROPERTIES() { return getToken(CommandParser.KW_PRIVILEGEPROPERTIES, 0); }
		public RelaxedKeywordsContext relaxedKeywords() {
			return getRuleContext(RelaxedKeywordsContext.class,0);
		}
		public TerminalNode KW_NULL_VALUE() { return getToken(CommandParser.KW_NULL_VALUE, 0); }
		public TerminalNode KW_DISTINCT_VALUE() { return getToken(CommandParser.KW_DISTINCT_VALUE, 0); }
		public TerminalNode KW_TABLE_COUNT() { return getToken(CommandParser.KW_TABLE_COUNT, 0); }
		public TerminalNode KW_COLUMN_SUM() { return getToken(CommandParser.KW_COLUMN_SUM, 0); }
		public TerminalNode KW_COLUMN_MAX() { return getToken(CommandParser.KW_COLUMN_MAX, 0); }
		public TerminalNode KW_COLUMN_MIN() { return getToken(CommandParser.KW_COLUMN_MIN, 0); }
		public TerminalNode KW_EXPRESSION_CONDITION() { return getToken(CommandParser.KW_EXPRESSION_CONDITION, 0); }
		public TerminalNode KW_GROUPS() { return getToken(CommandParser.KW_GROUPS, 0); }
		public TerminalNode KW_CACHE() { return getToken(CommandParser.KW_CACHE, 0); }
		public TerminalNode ByteLengthLiteral() { return getToken(CommandParser.ByteLengthLiteral, 0); }
		public TerminalNode KW_VARIABLES() { return getToken(CommandParser.KW_VARIABLES, 0); }
		public TerminalNode KW_EXCEPT() { return getToken(CommandParser.KW_EXCEPT, 0); }
		public TerminalNode KW_SELECTIVITY() { return getToken(CommandParser.KW_SELECTIVITY, 0); }
		public TerminalNode KW_LOCALTIMESTAMP() { return getToken(CommandParser.KW_LOCALTIMESTAMP, 0); }
		public TerminalNode KW_EXTRACT() { return getToken(CommandParser.KW_EXTRACT, 0); }
		public TerminalNode KW_SUBSTRING() { return getToken(CommandParser.KW_SUBSTRING, 0); }
		public TerminalNode KW_LAST() { return getToken(CommandParser.KW_LAST, 0); }
		public TerminalNode KW_NULLS() { return getToken(CommandParser.KW_NULLS, 0); }
		public TerminalNode KW_DEFAULT() { return getToken(CommandParser.KW_DEFAULT, 0); }
		public TerminalNode KW_ANY() { return getToken(CommandParser.KW_ANY, 0); }
		public TerminalNode KW_OFFSET() { return getToken(CommandParser.KW_OFFSET, 0); }
		public TerminalNode KW_CLONE() { return getToken(CommandParser.KW_CLONE, 0); }
		public TerminalNode KW_CONSTRAINT() { return getToken(CommandParser.KW_CONSTRAINT, 0); }
		public TerminalNode KW_UNIQUEJOIN() { return getToken(CommandParser.KW_UNIQUEJOIN, 0); }
		public TerminalNode KW_TABLESAMPLE() { return getToken(CommandParser.KW_TABLESAMPLE, 0); }
		public TerminalNode KW_MACRO() { return getToken(CommandParser.KW_MACRO, 0); }
		public TerminalNode KW_FILE() { return getToken(CommandParser.KW_FILE, 0); }
		public TerminalNode KW_DYNAMICFILTER() { return getToken(CommandParser.KW_DYNAMICFILTER, 0); }
		public TerminalNode KW_DATABASE() { return getToken(CommandParser.KW_DATABASE, 0); }
		public TerminalNode KW_UDFPROPERTIES() { return getToken(CommandParser.KW_UDFPROPERTIES, 0); }
		public TerminalNode KW_UNBOUNDED() { return getToken(CommandParser.KW_UNBOUNDED, 0); }
		public TerminalNode KW_PRECEDING() { return getToken(CommandParser.KW_PRECEDING, 0); }
		public TerminalNode KW_FOLLOWING() { return getToken(CommandParser.KW_FOLLOWING, 0); }
		public TerminalNode KW_MORE() { return getToken(CommandParser.KW_MORE, 0); }
		public TerminalNode KW_OVER() { return getToken(CommandParser.KW_OVER, 0); }
		public TerminalNode KW_PARTIALSCAN() { return getToken(CommandParser.KW_PARTIALSCAN, 0); }
		public TerminalNode KW_EXCHANGE() { return getToken(CommandParser.KW_EXCHANGE, 0); }
		public TerminalNode KW_CONF() { return getToken(CommandParser.KW_CONF, 0); }
		public TerminalNode KW_LIFECYCLE() { return getToken(CommandParser.KW_LIFECYCLE, 0); }
		public TerminalNode KW_CACHEPROPERTIES() { return getToken(CommandParser.KW_CACHEPROPERTIES, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public OdpsqlNonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_odpsqlNonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterOdpsqlNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitOdpsqlNonReserved(this);
		}
	}

	public final OdpsqlNonReservedContext odpsqlNonReserved() throws RecognitionException {
		OdpsqlNonReservedContext _localctx = new OdpsqlNonReservedContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_odpsqlNonReserved);
		try {
			setState(1209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1104);
				match(KW_RETURNS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1105);
				match(KW_BEGIN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1106);
				match(KW_LOOP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1107);
				match(KW_NEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1108);
				match(KW_REMOVE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1109);
				match(KW_GRANTS);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1110);
				match(KW_ACL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1111);
				match(KW_TYPE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1112);
				match(KW_LIST);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1113);
				match(KW_USERS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1114);
				match(KW_WHOAMI);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1115);
				match(KW_TRUSTEDPROJECTS);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1116);
				match(KW_TRUSTEDPROJECT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1117);
				match(KW_SECURITYCONFIGURATION);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1118);
				match(KW_PACKAGE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1119);
				match(KW_PACKAGES);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1120);
				match(KW_INSTALL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1121);
				match(KW_UNINSTALL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1122);
				match(KW_PRIVILEGES);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1123);
				match(KW_PROJECT);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1124);
				match(KW_PROJECTS);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1125);
				match(KW_LABEL);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1126);
				match(KW_ALLOW);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1127);
				match(KW_DISALLOW);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1128);
				match(KW_P);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1129);
				match(KW_JOB);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1130);
				match(KW_JOBS);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1131);
				match(KW_ACCOUNTPROVIDERS);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1132);
				match(KW_RESOURCES);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1133);
				match(KW_FLAGS);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1134);
				match(KW_STATISTIC_LIST);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1135);
				match(KW_STATISTIC);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1136);
				match(KW_COUNT);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1137);
				match(KW_GET);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1138);
				match(KW_PUT);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1139);
				match(KW_POLICY);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1140);
				match(KW_PROJECTPROTECTION);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1141);
				match(KW_EXCEPTION);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1142);
				match(KW_CLEAR);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1143);
				match(KW_EXPIRED);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1144);
				match(KW_EXP);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1145);
				match(KW_ACCOUNTPROVIDER);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1146);
				match(KW_SUPER);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1147);
				match(KW_VOLUMEFILE);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1148);
				match(KW_VOLUMEARCHIVE);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1149);
				match(KW_OFFLINEMODEL);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1150);
				match(KW_PY);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1151);
				match(KW_RESOURCE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1152);
				match(KW_STATUS);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1153);
				match(KW_KILL);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1154);
				match(KW_HUBLIFECYCLE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1155);
				match(KW_SHARDS);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1156);
				match(KW_SETPROJECT);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1157);
				match(KW_MERGE);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1158);
				match(KW_SMALLFILES);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1159);
				match(KW_PARTITIONPROPERTIES);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1160);
				match(KW_EXSTORE);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1161);
				match(KW_CHANGELOGS);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1162);
				match(KW_REDO);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1163);
				match(KW_HUBTABLE);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1164);
				match(KW_CHANGEOWNER);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1165);
				match(KW_RECYCLEBIN);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1166);
				match(KW_PRIVILEGEPROPERTIES);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1167);
				relaxedKeywords();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1168);
				match(KW_NULL_VALUE);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1169);
				match(KW_DISTINCT_VALUE);
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1170);
				match(KW_TABLE_COUNT);
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1171);
				match(KW_COLUMN_SUM);
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1172);
				match(KW_COLUMN_MAX);
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1173);
				match(KW_COLUMN_MIN);
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1174);
				match(KW_EXPRESSION_CONDITION);
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1175);
				match(KW_GROUPS);
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1176);
				match(KW_CACHE);
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1177);
				match(ByteLengthLiteral);
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1178);
				match(KW_VARIABLES);
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1179);
				match(KW_EXCEPT);
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1180);
				match(KW_SELECTIVITY);
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1181);
				match(KW_LOCALTIMESTAMP);
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1182);
				match(KW_EXTRACT);
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1183);
				match(KW_SUBSTRING);
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1184);
				match(KW_LAST);
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1185);
				match(KW_NULLS);
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1186);
				match(KW_DEFAULT);
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1187);
				match(KW_ANY);
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1188);
				match(KW_OFFSET);
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1189);
				match(KW_CLONE);
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1190);
				match(KW_CONSTRAINT);
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1191);
				match(KW_UNIQUEJOIN);
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1192);
				match(KW_TABLESAMPLE);
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1193);
				match(KW_MACRO);
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1194);
				match(KW_FILE);
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1195);
				match(KW_DYNAMICFILTER);
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1196);
				match(KW_DATABASE);
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1197);
				match(KW_UDFPROPERTIES);
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1198);
				match(KW_UNBOUNDED);
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1199);
				match(KW_PRECEDING);
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1200);
				match(KW_FOLLOWING);
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1201);
				match(KW_MORE);
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1202);
				match(KW_OVER);
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1203);
				match(KW_PARTIALSCAN);
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1204);
				match(KW_EXCHANGE);
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1205);
				match(KW_CONF);
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1206);
				match(KW_LIFECYCLE);
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1207);
				match(KW_CACHEPROPERTIES);
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1208);
				match(KW_TENANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelaxedKeywordsContext extends ParserRuleContext {
		public TerminalNode KW_INTERVAL() { return getToken(CommandParser.KW_INTERVAL, 0); }
		public TerminalNode KW_CONF() { return getToken(CommandParser.KW_CONF, 0); }
		public TerminalNode KW_EXCHANGE() { return getToken(CommandParser.KW_EXCHANGE, 0); }
		public TerminalNode KW_LESS() { return getToken(CommandParser.KW_LESS, 0); }
		public TerminalNode KW_MORE() { return getToken(CommandParser.KW_MORE, 0); }
		public RelaxedKeywordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relaxedKeywords; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRelaxedKeywords(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRelaxedKeywords(this);
		}
	}

	public final RelaxedKeywordsContext relaxedKeywords() throws RecognitionException {
		RelaxedKeywordsContext _localctx = new RelaxedKeywordsContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_relaxedKeywords);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1211);
			_la = _input.LA(1);
			if ( !(_la==KW_INTERVAL || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (KW_LESS - 270)) | (1L << (KW_MORE - 270)) | (1L << (KW_EXCHANGE - 270)) | (1L << (KW_CONF - 270)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Token id;
		public NonReservedContext nonReservedId;
		public Sql11ReservedKeywordsUsedAsIdentifierContext sq11KeywordAsId;
		public OdpsqlNonReservedContext odpsNonReservedId;
		public TerminalNode Identifier() { return getToken(CommandParser.Identifier, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public Sql11ReservedKeywordsUsedAsIdentifierContext sql11ReservedKeywordsUsedAsIdentifier() {
			return getRuleContext(Sql11ReservedKeywordsUsedAsIdentifierContext.class,0);
		}
		public OdpsqlNonReservedContext odpsqlNonReserved() {
			return getRuleContext(OdpsqlNonReservedContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_identifier);
		try {
			setState(1217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1213);
				((IdentifierContext)_localctx).id = match(Identifier);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1214);
				((IdentifierContext)_localctx).nonReservedId = nonReserved();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1215);
				((IdentifierContext)_localctx).sq11KeywordAsId = sql11ReservedKeywordsUsedAsIdentifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1216);
				((IdentifierContext)_localctx).odpsNonReservedId = odpsqlNonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DoubleQuoteStringLiteralContext doubleQuoteStringLiteral() {
			return getRuleContext(DoubleQuoteStringLiteralContext.class,0);
		}
		public AliasIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAliasIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAliasIdentifier(this);
		}
	}

	public final AliasIdentifierContext aliasIdentifier() throws RecognitionException {
		AliasIdentifierContext _localctx = new AliasIdentifierContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_aliasIdentifier);
		try {
			setState(1221);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(1219);
				identifier();
				}
				break;
			case DoubleQuoteStringLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(1220);
				doubleQuoteStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierWithoutSql11Context extends ParserRuleContext {
		public Token id;
		public NonReservedContext nonReservedId;
		public OdpsqlNonReservedContext odpsNonReservedId;
		public TerminalNode Identifier() { return getToken(CommandParser.Identifier, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public OdpsqlNonReservedContext odpsqlNonReserved() {
			return getRuleContext(OdpsqlNonReservedContext.class,0);
		}
		public IdentifierWithoutSql11Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierWithoutSql11; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterIdentifierWithoutSql11(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitIdentifierWithoutSql11(this);
		}
	}

	public final IdentifierWithoutSql11Context identifierWithoutSql11() throws RecognitionException {
		IdentifierWithoutSql11Context _localctx = new IdentifierWithoutSql11Context(_ctx, getState());
		enterRule(_localctx, 108, RULE_identifierWithoutSql11);
		try {
			setState(1226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1223);
				((IdentifierWithoutSql11Context)_localctx).id = match(Identifier);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1224);
				((IdentifierWithoutSql11Context)_localctx).nonReservedId = nonReserved();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1225);
				((IdentifierWithoutSql11Context)_localctx).odpsNonReservedId = odpsqlNonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnythingButSemiContext extends ParserRuleContext {
		public List<TerminalNode> SEMICOLON() { return getTokens(CommandParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(CommandParser.SEMICOLON, i);
		}
		public AnythingButSemiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anythingButSemi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAnythingButSemi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAnythingButSemi(this);
		}
	}

	public final AnythingButSemiContext anythingButSemi() throws RecognitionException {
		AnythingButSemiContext _localctx = new AnythingButSemiContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_anythingButSemi);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1231);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1228);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(1233);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MemberAccessOperatorContext extends ParserRuleContext {
		public IdentifierContext field;
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public MemberAccessOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memberAccessOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMemberAccessOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMemberAccessOperator(this);
		}
	}

	public final MemberAccessOperatorContext memberAccessOperator() throws RecognitionException {
		MemberAccessOperatorContext _localctx = new MemberAccessOperatorContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_memberAccessOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1234);
			match(DOT);
			setState(1235);
			((MemberAccessOperatorContext)_localctx).field = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodAccessOperatorContext extends ParserRuleContext {
		public ClassNameListContext types;
		public IdentifierContext field;
		public ExpressionListContext arguments;
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LESSTHAN() { return getToken(CommandParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHAN() { return getToken(CommandParser.GREATERTHAN, 0); }
		public ClassNameListContext classNameList() {
			return getRuleContext(ClassNameListContext.class,0);
		}
		public ExpressionListContext expressionList() {
			return getRuleContext(ExpressionListContext.class,0);
		}
		public MethodAccessOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodAccessOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMethodAccessOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMethodAccessOperator(this);
		}
	}

	public final MethodAccessOperatorContext methodAccessOperator() throws RecognitionException {
		MethodAccessOperatorContext _localctx = new MethodAccessOperatorContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_methodAccessOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1237);
			match(DOT);
			setState(1242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LESSTHAN) {
				{
				setState(1238);
				match(LESSTHAN);
				setState(1239);
				((MethodAccessOperatorContext)_localctx).types = classNameList();
				setState(1240);
				match(GREATERTHAN);
				}
			}

			setState(1244);
			((MethodAccessOperatorContext)_localctx).field = identifier();
			setState(1245);
			match(LPAREN);
			setState(1247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_NOT - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_IF - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_CAST - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_CASE - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (COLON - 402)) | (1L << (LPAREN - 402)) | (1L << (PLUS - 402)) | (1L << (MINUS - 402)) | (1L << (TILDE - 402)) | (1L << (StringLiteral - 402)) | (1L << (DoubleQuoteStringLiteral - 402)) | (1L << (BigintLiteral - 402)) | (1L << (SmallintLiteral - 402)) | (1L << (TinyintLiteral - 402)) | (1L << (DecimalLiteral - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Number - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)) | (1L << (CharSetStringLiteral - 402)))) != 0)) {
				{
				setState(1246);
				((MethodAccessOperatorContext)_localctx).arguments = expressionList();
				}
			}

			setState(1249);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsNullOperatorContext extends ParserRuleContext {
		public Token not;
		public TerminalNode KW_IS() { return getToken(CommandParser.KW_IS, 0); }
		public TerminalNode KW_NULL() { return getToken(CommandParser.KW_NULL, 0); }
		public TerminalNode KW_NOT() { return getToken(CommandParser.KW_NOT, 0); }
		public IsNullOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isNullOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterIsNullOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitIsNullOperator(this);
		}
	}

	public final IsNullOperatorContext isNullOperator() throws RecognitionException {
		IsNullOperatorContext _localctx = new IsNullOperatorContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_isNullOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			match(KW_IS);
			setState(1253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NOT) {
				{
				setState(1252);
				((IsNullOperatorContext)_localctx).not = match(KW_NOT);
				}
			}

			setState(1255);
			match(KW_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InOperatorContext extends ParserRuleContext {
		public Token not;
		public ExpressionsInParentheseContext exp;
		public SubQueryExpressionContext subQuery;
		public TerminalNode KW_IN() { return getToken(CommandParser.KW_IN, 0); }
		public ExpressionsInParentheseContext expressionsInParenthese() {
			return getRuleContext(ExpressionsInParentheseContext.class,0);
		}
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public TerminalNode KW_NOT() { return getToken(CommandParser.KW_NOT, 0); }
		public InOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterInOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitInOperator(this);
		}
	}

	public final InOperatorContext inOperator() throws RecognitionException {
		InOperatorContext _localctx = new InOperatorContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_inOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NOT) {
				{
				setState(1257);
				((InOperatorContext)_localctx).not = match(KW_NOT);
				}
			}

			setState(1260);
			match(KW_IN);
			setState(1263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1261);
				((InOperatorContext)_localctx).exp = expressionsInParenthese();
				}
				break;
			case 2:
				{
				setState(1262);
				((InOperatorContext)_localctx).subQuery = subQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BetweenOperatorContext extends ParserRuleContext {
		public Token not;
		public MathExpressionContext min;
		public MathExpressionContext max;
		public TerminalNode KW_BETWEEN() { return getToken(CommandParser.KW_BETWEEN, 0); }
		public TerminalNode KW_AND() { return getToken(CommandParser.KW_AND, 0); }
		public List<MathExpressionContext> mathExpression() {
			return getRuleContexts(MathExpressionContext.class);
		}
		public MathExpressionContext mathExpression(int i) {
			return getRuleContext(MathExpressionContext.class,i);
		}
		public TerminalNode KW_NOT() { return getToken(CommandParser.KW_NOT, 0); }
		public BetweenOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterBetweenOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitBetweenOperator(this);
		}
	}

	public final BetweenOperatorContext betweenOperator() throws RecognitionException {
		BetweenOperatorContext _localctx = new BetweenOperatorContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_betweenOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NOT) {
				{
				setState(1265);
				((BetweenOperatorContext)_localctx).not = match(KW_NOT);
				}
			}

			setState(1268);
			match(KW_BETWEEN);
			{
			setState(1269);
			((BetweenOperatorContext)_localctx).min = mathExpression(0);
			}
			setState(1270);
			match(KW_AND);
			{
			setState(1271);
			((BetweenOperatorContext)_localctx).max = mathExpression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathExpressionContext extends ParserRuleContext {
		public MathExpressionContext lhs;
		public UnarySuffixExpressionContext exp;
		public Token op;
		public MathExpressionContext rhs;
		public UnarySuffixExpressionContext unarySuffixExpression() {
			return getRuleContext(UnarySuffixExpressionContext.class,0);
		}
		public List<MathExpressionContext> mathExpression() {
			return getRuleContexts(MathExpressionContext.class);
		}
		public MathExpressionContext mathExpression(int i) {
			return getRuleContext(MathExpressionContext.class,i);
		}
		public TerminalNode BITWISEXOR() { return getToken(CommandParser.BITWISEXOR, 0); }
		public TerminalNode STAR() { return getToken(CommandParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(CommandParser.DIVIDE, 0); }
		public TerminalNode MOD() { return getToken(CommandParser.MOD, 0); }
		public TerminalNode DIV() { return getToken(CommandParser.DIV, 0); }
		public TerminalNode PLUS() { return getToken(CommandParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(CommandParser.MINUS, 0); }
		public TerminalNode CONCATENATE() { return getToken(CommandParser.CONCATENATE, 0); }
		public TerminalNode AMPERSAND() { return getToken(CommandParser.AMPERSAND, 0); }
		public TerminalNode BITWISEOR() { return getToken(CommandParser.BITWISEOR, 0); }
		public MathExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMathExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMathExpression(this);
		}
	}

	public final MathExpressionContext mathExpression() throws RecognitionException {
		return mathExpression(0);
	}

	private MathExpressionContext mathExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		MathExpressionContext _localctx = new MathExpressionContext(_ctx, _parentState);
		MathExpressionContext _prevctx = _localctx;
		int _startState = 122;
		enterRecursionRule(_localctx, 122, RULE_mathExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1274);
			((MathExpressionContext)_localctx).exp = unarySuffixExpression(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(1304);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1302);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
					case 1:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						setState(1276);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(1277);
						((MathExpressionContext)_localctx).op = match(BITWISEXOR);
						setState(1278);
						((MathExpressionContext)_localctx).rhs = mathExpression(8);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						setState(1279);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(1284);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STAR:
							{
							setState(1280);
							((MathExpressionContext)_localctx).op = match(STAR);
							}
							break;
						case DIVIDE:
							{
							setState(1281);
							((MathExpressionContext)_localctx).op = match(DIVIDE);
							}
							break;
						case MOD:
							{
							setState(1282);
							((MathExpressionContext)_localctx).op = match(MOD);
							}
							break;
						case DIV:
							{
							setState(1283);
							((MathExpressionContext)_localctx).op = match(DIV);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1286);
						((MathExpressionContext)_localctx).rhs = mathExpression(7);
						}
						break;
					case 3:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						setState(1287);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1290);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PLUS:
							{
							setState(1288);
							((MathExpressionContext)_localctx).op = match(PLUS);
							}
							break;
						case MINUS:
							{
							setState(1289);
							((MathExpressionContext)_localctx).op = match(MINUS);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1292);
						((MathExpressionContext)_localctx).rhs = mathExpression(6);
						}
						break;
					case 4:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						setState(1293);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1294);
						((MathExpressionContext)_localctx).op = match(CONCATENATE);
						setState(1295);
						((MathExpressionContext)_localctx).rhs = mathExpression(5);
						}
						break;
					case 5:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						setState(1296);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1297);
						((MathExpressionContext)_localctx).op = match(AMPERSAND);
						setState(1298);
						((MathExpressionContext)_localctx).rhs = mathExpression(4);
						}
						break;
					case 6:
						{
						_localctx = new MathExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_mathExpression);
						setState(1299);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1300);
						((MathExpressionContext)_localctx).op = match(BITWISEOR);
						setState(1301);
						((MathExpressionContext)_localctx).rhs = mathExpression(3);
						}
						break;
					}
					} 
				}
				setState(1306);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnarySuffixExpressionContext extends ParserRuleContext {
		public UnarySuffixExpressionContext operand;
		public UnaryPrefixExpressionContext exp;
		public IsNullOperatorContext op;
		public UnaryPrefixExpressionContext unaryPrefixExpression() {
			return getRuleContext(UnaryPrefixExpressionContext.class,0);
		}
		public UnarySuffixExpressionContext unarySuffixExpression() {
			return getRuleContext(UnarySuffixExpressionContext.class,0);
		}
		public IsNullOperatorContext isNullOperator() {
			return getRuleContext(IsNullOperatorContext.class,0);
		}
		public UnarySuffixExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unarySuffixExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUnarySuffixExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUnarySuffixExpression(this);
		}
	}

	public final UnarySuffixExpressionContext unarySuffixExpression() throws RecognitionException {
		return unarySuffixExpression(0);
	}

	private UnarySuffixExpressionContext unarySuffixExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		UnarySuffixExpressionContext _localctx = new UnarySuffixExpressionContext(_ctx, _parentState);
		UnarySuffixExpressionContext _prevctx = _localctx;
		int _startState = 124;
		enterRecursionRule(_localctx, 124, RULE_unarySuffixExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1308);
			((UnarySuffixExpressionContext)_localctx).exp = unaryPrefixExpression();
			}
			_ctx.stop = _input.LT(-1);
			setState(1314);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnarySuffixExpressionContext(_parentctx, _parentState);
					_localctx.operand = _prevctx;
					_localctx.operand = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_unarySuffixExpression);
					setState(1310);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1311);
					((UnarySuffixExpressionContext)_localctx).op = isNullOperator();
					}
					} 
				}
				setState(1316);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryPrefixExpressionContext extends ParserRuleContext {
		public Token op;
		public UnaryPrefixExpressionContext operand;
		public FieldExpressionContext exp;
		public UnaryPrefixExpressionContext unaryPrefixExpression() {
			return getRuleContext(UnaryPrefixExpressionContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(CommandParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(CommandParser.MINUS, 0); }
		public TerminalNode TILDE() { return getToken(CommandParser.TILDE, 0); }
		public FieldExpressionContext fieldExpression() {
			return getRuleContext(FieldExpressionContext.class,0);
		}
		public UnaryPrefixExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryPrefixExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUnaryPrefixExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUnaryPrefixExpression(this);
		}
	}

	public final UnaryPrefixExpressionContext unaryPrefixExpression() throws RecognitionException {
		UnaryPrefixExpressionContext _localctx = new UnaryPrefixExpressionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_unaryPrefixExpression);
		try {
			setState(1324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS:
			case MINUS:
			case TILDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1320);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PLUS:
					{
					setState(1317);
					((UnaryPrefixExpressionContext)_localctx).op = match(PLUS);
					}
					break;
				case MINUS:
					{
					setState(1318);
					((UnaryPrefixExpressionContext)_localctx).op = match(MINUS);
					}
					break;
				case TILDE:
					{
					setState(1319);
					((UnaryPrefixExpressionContext)_localctx).op = match(TILDE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1322);
				((UnaryPrefixExpressionContext)_localctx).operand = unaryPrefixExpression();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_IF:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_CAST:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_CASE:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case COLON:
			case LPAREN:
			case StringLiteral:
			case DoubleQuoteStringLiteral:
			case BigintLiteral:
			case SmallintLiteral:
			case TinyintLiteral:
			case DecimalLiteral:
			case ByteLengthLiteral:
			case Number:
			case Variable:
			case Identifier:
			case CharSetStringLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(1323);
				((UnaryPrefixExpressionContext)_localctx).exp = fieldExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldExpressionContext extends ParserRuleContext {
		public FieldExpressionContext operand;
		public AtomExpressionContext exp;
		public MemberAccessOperatorContext member;
		public Token ls;
		public ExpressionContext index;
		public MethodAccessOperatorContext method;
		public AtomExpressionContext atomExpression() {
			return getRuleContext(AtomExpressionContext.class,0);
		}
		public FieldExpressionContext fieldExpression() {
			return getRuleContext(FieldExpressionContext.class,0);
		}
		public TerminalNode RSQUARE() { return getToken(CommandParser.RSQUARE, 0); }
		public MemberAccessOperatorContext memberAccessOperator() {
			return getRuleContext(MemberAccessOperatorContext.class,0);
		}
		public TerminalNode LSQUARE() { return getToken(CommandParser.LSQUARE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public MethodAccessOperatorContext methodAccessOperator() {
			return getRuleContext(MethodAccessOperatorContext.class,0);
		}
		public FieldExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFieldExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFieldExpression(this);
		}
	}

	public final FieldExpressionContext fieldExpression() throws RecognitionException {
		return fieldExpression(0);
	}

	private FieldExpressionContext fieldExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FieldExpressionContext _localctx = new FieldExpressionContext(_ctx, _parentState);
		FieldExpressionContext _prevctx = _localctx;
		int _startState = 128;
		enterRecursionRule(_localctx, 128, RULE_fieldExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1327);
			((FieldExpressionContext)_localctx).exp = atomExpression();
			}
			_ctx.stop = _input.LT(-1);
			setState(1340);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,97,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FieldExpressionContext(_parentctx, _parentState);
					_localctx.operand = _prevctx;
					_localctx.operand = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_fieldExpression);
					setState(1329);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1336);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
					case 1:
						{
						setState(1330);
						((FieldExpressionContext)_localctx).member = memberAccessOperator();
						}
						break;
					case 2:
						{
						setState(1331);
						((FieldExpressionContext)_localctx).ls = match(LSQUARE);
						setState(1332);
						((FieldExpressionContext)_localctx).index = expression();
						setState(1333);
						match(RSQUARE);
						}
						break;
					case 3:
						{
						setState(1335);
						((FieldExpressionContext)_localctx).method = methodAccessOperator();
						}
						break;
					}
					}
					} 
				}
				setState(1342);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,97,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LogicalExpressionContext extends ParserRuleContext {
		public LogicalExpressionContext lhs;
		public NotExpressionContext exp;
		public Token op;
		public LogicalExpressionContext rhs;
		public NotExpressionContext notExpression() {
			return getRuleContext(NotExpressionContext.class,0);
		}
		public List<LogicalExpressionContext> logicalExpression() {
			return getRuleContexts(LogicalExpressionContext.class);
		}
		public LogicalExpressionContext logicalExpression(int i) {
			return getRuleContext(LogicalExpressionContext.class,i);
		}
		public TerminalNode KW_AND() { return getToken(CommandParser.KW_AND, 0); }
		public TerminalNode KW_OR() { return getToken(CommandParser.KW_OR, 0); }
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitLogicalExpression(this);
		}
	}

	public final LogicalExpressionContext logicalExpression() throws RecognitionException {
		return logicalExpression(0);
	}

	private LogicalExpressionContext logicalExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		LogicalExpressionContext _localctx = new LogicalExpressionContext(_ctx, _parentState);
		LogicalExpressionContext _prevctx = _localctx;
		int _startState = 130;
		enterRecursionRule(_localctx, 130, RULE_logicalExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1344);
			((LogicalExpressionContext)_localctx).exp = notExpression();
			}
			_ctx.stop = _input.LT(-1);
			setState(1354);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1352);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
					case 1:
						{
						_localctx = new LogicalExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_logicalExpression);
						setState(1346);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1347);
						((LogicalExpressionContext)_localctx).op = match(KW_AND);
						setState(1348);
						((LogicalExpressionContext)_localctx).rhs = logicalExpression(4);
						}
						break;
					case 2:
						{
						_localctx = new LogicalExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_logicalExpression);
						setState(1349);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1350);
						((LogicalExpressionContext)_localctx).op = match(KW_OR);
						setState(1351);
						((LogicalExpressionContext)_localctx).rhs = logicalExpression(3);
						}
						break;
					}
					} 
				}
				setState(1356);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class NotExpressionContext extends ParserRuleContext {
		public Token op;
		public NotExpressionContext operand;
		public EqualExpressionContext exp;
		public TerminalNode KW_NOT() { return getToken(CommandParser.KW_NOT, 0); }
		public NotExpressionContext notExpression() {
			return getRuleContext(NotExpressionContext.class,0);
		}
		public EqualExpressionContext equalExpression() {
			return getRuleContext(EqualExpressionContext.class,0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitNotExpression(this);
		}
	}

	public final NotExpressionContext notExpression() throws RecognitionException {
		NotExpressionContext _localctx = new NotExpressionContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_notExpression);
		try {
			setState(1360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1357);
				((NotExpressionContext)_localctx).op = match(KW_NOT);
				setState(1358);
				((NotExpressionContext)_localctx).operand = notExpression();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_IF:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_CAST:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_CASE:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case COLON:
			case LPAREN:
			case PLUS:
			case MINUS:
			case TILDE:
			case StringLiteral:
			case DoubleQuoteStringLiteral:
			case BigintLiteral:
			case SmallintLiteral:
			case TinyintLiteral:
			case DecimalLiteral:
			case ByteLengthLiteral:
			case Number:
			case Variable:
			case Identifier:
			case CharSetStringLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(1359);
				((NotExpressionContext)_localctx).exp = equalExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EqualExpressionContext extends ParserRuleContext {
		public EqualExpressionContext lhs;
		public MathExpressionContext exp;
		public MathExpressionListInParenthesesContext expIn;
		public Token not;
		public Token op;
		public EqualExpressionContext rhs;
		public InOperatorContext in;
		public BetweenOperatorContext between;
		public MathExpressionContext mathExpression() {
			return getRuleContext(MathExpressionContext.class,0);
		}
		public MathExpressionListInParenthesesContext mathExpressionListInParentheses() {
			return getRuleContext(MathExpressionListInParenthesesContext.class,0);
		}
		public List<EqualExpressionContext> equalExpression() {
			return getRuleContexts(EqualExpressionContext.class);
		}
		public EqualExpressionContext equalExpression(int i) {
			return getRuleContext(EqualExpressionContext.class,i);
		}
		public TerminalNode KW_IS() { return getToken(CommandParser.KW_IS, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public TerminalNode EQUAL() { return getToken(CommandParser.EQUAL, 0); }
		public TerminalNode EQUAL_NS() { return getToken(CommandParser.EQUAL_NS, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(CommandParser.KW_DISTINCT, 0); }
		public TerminalNode NOTEQUAL() { return getToken(CommandParser.NOTEQUAL, 0); }
		public TerminalNode LESSTHANOREQUALTO() { return getToken(CommandParser.LESSTHANOREQUALTO, 0); }
		public TerminalNode LESSTHAN() { return getToken(CommandParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHANOREQUALTO() { return getToken(CommandParser.GREATERTHANOREQUALTO, 0); }
		public TerminalNode GREATERTHAN() { return getToken(CommandParser.GREATERTHAN, 0); }
		public TerminalNode KW_LIKE() { return getToken(CommandParser.KW_LIKE, 0); }
		public TerminalNode KW_RLIKE() { return getToken(CommandParser.KW_RLIKE, 0); }
		public TerminalNode KW_REGEXP() { return getToken(CommandParser.KW_REGEXP, 0); }
		public TerminalNode KW_NOT() { return getToken(CommandParser.KW_NOT, 0); }
		public InOperatorContext inOperator() {
			return getRuleContext(InOperatorContext.class,0);
		}
		public BetweenOperatorContext betweenOperator() {
			return getRuleContext(BetweenOperatorContext.class,0);
		}
		public EqualExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equalExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterEqualExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitEqualExpression(this);
		}
	}

	public final EqualExpressionContext equalExpression() throws RecognitionException {
		return equalExpression(0);
	}

	private EqualExpressionContext equalExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		EqualExpressionContext _localctx = new EqualExpressionContext(_ctx, _parentState);
		EqualExpressionContext _prevctx = _localctx;
		int _startState = 134;
		enterRecursionRule(_localctx, 134, RULE_equalExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1363);
				((EqualExpressionContext)_localctx).exp = mathExpression(0);
				}
				break;
			case 2:
				{
				setState(1364);
				((EqualExpressionContext)_localctx).expIn = mathExpressionListInParentheses();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1399);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1397);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
					case 1:
						{
						_localctx = new EqualExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_equalExpression);
						setState(1367);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1389);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case KW_NOT:
						case KW_LIKE:
						case KW_RLIKE:
						case KW_REGEXP:
							{
							setState(1369);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==KW_NOT) {
								{
								setState(1368);
								((EqualExpressionContext)_localctx).not = match(KW_NOT);
								}
							}

							setState(1374);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case KW_LIKE:
								{
								setState(1371);
								((EqualExpressionContext)_localctx).op = match(KW_LIKE);
								}
								break;
							case KW_RLIKE:
								{
								setState(1372);
								((EqualExpressionContext)_localctx).op = match(KW_RLIKE);
								}
								break;
							case KW_REGEXP:
								{
								setState(1373);
								((EqualExpressionContext)_localctx).op = match(KW_REGEXP);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case EQUAL:
							{
							setState(1376);
							((EqualExpressionContext)_localctx).op = match(EQUAL);
							}
							break;
						case EQUAL_NS:
							{
							setState(1377);
							((EqualExpressionContext)_localctx).op = match(EQUAL_NS);
							}
							break;
						case KW_IS:
							{
							setState(1378);
							match(KW_IS);
							setState(1380);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==KW_NOT) {
								{
								setState(1379);
								((EqualExpressionContext)_localctx).not = match(KW_NOT);
								}
							}

							setState(1382);
							((EqualExpressionContext)_localctx).op = match(KW_DISTINCT);
							setState(1383);
							match(KW_FROM);
							}
							break;
						case NOTEQUAL:
							{
							setState(1384);
							((EqualExpressionContext)_localctx).op = match(NOTEQUAL);
							}
							break;
						case LESSTHANOREQUALTO:
							{
							setState(1385);
							((EqualExpressionContext)_localctx).op = match(LESSTHANOREQUALTO);
							}
							break;
						case LESSTHAN:
							{
							setState(1386);
							((EqualExpressionContext)_localctx).op = match(LESSTHAN);
							}
							break;
						case GREATERTHANOREQUALTO:
							{
							setState(1387);
							((EqualExpressionContext)_localctx).op = match(GREATERTHANOREQUALTO);
							}
							break;
						case GREATERTHAN:
							{
							setState(1388);
							((EqualExpressionContext)_localctx).op = match(GREATERTHAN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1391);
						((EqualExpressionContext)_localctx).rhs = equalExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new EqualExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						_localctx.lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_equalExpression);
						setState(1392);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1395);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
						case 1:
							{
							setState(1393);
							((EqualExpressionContext)_localctx).in = inOperator();
							}
							break;
						case 2:
							{
							setState(1394);
							((EqualExpressionContext)_localctx).between = betweenOperator();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(1401);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class MathExpressionListInParenthesesContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public MathExpressionListContext mathExpressionList() {
			return getRuleContext(MathExpressionListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public MathExpressionListInParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathExpressionListInParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMathExpressionListInParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMathExpressionListInParentheses(this);
		}
	}

	public final MathExpressionListInParenthesesContext mathExpressionListInParentheses() throws RecognitionException {
		MathExpressionListInParenthesesContext _localctx = new MathExpressionListInParenthesesContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_mathExpressionListInParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			match(LPAREN);
			setState(1403);
			mathExpressionList();
			setState(1404);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathExpressionListContext extends ParserRuleContext {
		public List<MathExpressionContext> mathExpression() {
			return getRuleContexts(MathExpressionContext.class);
		}
		public MathExpressionContext mathExpression(int i) {
			return getRuleContext(MathExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public MathExpressionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathExpressionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMathExpressionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMathExpressionList(this);
		}
	}

	public final MathExpressionListContext mathExpressionList() throws RecognitionException {
		MathExpressionListContext _localctx = new MathExpressionListContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_mathExpressionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1406);
			mathExpression(0);
			setState(1411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1407);
				match(COMMA);
				setState(1408);
				mathExpression(0);
				}
				}
				setState(1413);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public LogicalExpressionContext logicalExpression() {
			return getRuleContext(LogicalExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1414);
			logicalExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstanceIdContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(CommandParser.Identifier, 0); }
		public InstanceIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_instanceId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterInstanceId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitInstanceId(this);
		}
	}

	public final InstanceIdContext instanceId() throws RecognitionException {
		InstanceIdContext _localctx = new InstanceIdContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_instanceId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1416);
			match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorizationStatementContext extends ParserRuleContext {
		public AddUserStatementContext addUserStatement() {
			return getRuleContext(AddUserStatementContext.class,0);
		}
		public RemoveUserStatementContext removeUserStatement() {
			return getRuleContext(RemoveUserStatementContext.class,0);
		}
		public AddGroupStatementContext addGroupStatement() {
			return getRuleContext(AddGroupStatementContext.class,0);
		}
		public RemoveGroupStatementContext removeGroupStatement() {
			return getRuleContext(RemoveGroupStatementContext.class,0);
		}
		public AddAccountProviderContext addAccountProvider() {
			return getRuleContext(AddAccountProviderContext.class,0);
		}
		public RemoveAccountProviderContext removeAccountProvider() {
			return getRuleContext(RemoveAccountProviderContext.class,0);
		}
		public ListUsersContext listUsers() {
			return getRuleContext(ListUsersContext.class,0);
		}
		public ListGroupsContext listGroups() {
			return getRuleContext(ListGroupsContext.class,0);
		}
		public ShowAclContext showAcl() {
			return getRuleContext(ShowAclContext.class,0);
		}
		public DescribeRoleContext describeRole() {
			return getRuleContext(DescribeRoleContext.class,0);
		}
		public ListRolesContext listRoles() {
			return getRuleContext(ListRolesContext.class,0);
		}
		public ListTrustedProjectsContext listTrustedProjects() {
			return getRuleContext(ListTrustedProjectsContext.class,0);
		}
		public AddTrustedProjectContext addTrustedProject() {
			return getRuleContext(AddTrustedProjectContext.class,0);
		}
		public RemoveTrustedProjectContext removeTrustedProject() {
			return getRuleContext(RemoveTrustedProjectContext.class,0);
		}
		public ShowSecurityConfigurationContext showSecurityConfiguration() {
			return getRuleContext(ShowSecurityConfigurationContext.class,0);
		}
		public ShowPackagesContext showPackages() {
			return getRuleContext(ShowPackagesContext.class,0);
		}
		public ShowItemsContext showItems() {
			return getRuleContext(ShowItemsContext.class,0);
		}
		public DescribePackageContext describePackage() {
			return getRuleContext(DescribePackageContext.class,0);
		}
		public InstallPackageContext installPackage() {
			return getRuleContext(InstallPackageContext.class,0);
		}
		public UninstallPackageContext uninstallPackage() {
			return getRuleContext(UninstallPackageContext.class,0);
		}
		public CreatePackageContext createPackage() {
			return getRuleContext(CreatePackageContext.class,0);
		}
		public DeletePackageContext deletePackage() {
			return getRuleContext(DeletePackageContext.class,0);
		}
		public AddToPackageContext addToPackage() {
			return getRuleContext(AddToPackageContext.class,0);
		}
		public RemoveFromPackageContext removeFromPackage() {
			return getRuleContext(RemoveFromPackageContext.class,0);
		}
		public AllowPackageContext allowPackage() {
			return getRuleContext(AllowPackageContext.class,0);
		}
		public DisallowPackageContext disallowPackage() {
			return getRuleContext(DisallowPackageContext.class,0);
		}
		public PutPolicyContext putPolicy() {
			return getRuleContext(PutPolicyContext.class,0);
		}
		public GetPolicyContext getPolicy() {
			return getRuleContext(GetPolicyContext.class,0);
		}
		public ClearExpiredGrantsContext clearExpiredGrants() {
			return getRuleContext(ClearExpiredGrantsContext.class,0);
		}
		public GrantLabelContext grantLabel() {
			return getRuleContext(GrantLabelContext.class,0);
		}
		public RevokeLabelContext revokeLabel() {
			return getRuleContext(RevokeLabelContext.class,0);
		}
		public ShowLabelContext showLabel() {
			return getRuleContext(ShowLabelContext.class,0);
		}
		public GrantSuperPrivilegeContext grantSuperPrivilege() {
			return getRuleContext(GrantSuperPrivilegeContext.class,0);
		}
		public RevokeSuperPrivilegeContext revokeSuperPrivilege() {
			return getRuleContext(RevokeSuperPrivilegeContext.class,0);
		}
		public PurgePrivilegesContext purgePrivileges() {
			return getRuleContext(PurgePrivilegesContext.class,0);
		}
		public CreateRoleStatementContext createRoleStatement() {
			return getRuleContext(CreateRoleStatementContext.class,0);
		}
		public DropRoleStatementContext dropRoleStatement() {
			return getRuleContext(DropRoleStatementContext.class,0);
		}
		public AddRoleToProjectContext addRoleToProject() {
			return getRuleContext(AddRoleToProjectContext.class,0);
		}
		public RemoveRoleFromProjectContext removeRoleFromProject() {
			return getRuleContext(RemoveRoleFromProjectContext.class,0);
		}
		public GrantRoleContext grantRole() {
			return getRuleContext(GrantRoleContext.class,0);
		}
		public RevokeRoleContext revokeRole() {
			return getRuleContext(RevokeRoleContext.class,0);
		}
		public GrantPrivilegesContext grantPrivileges() {
			return getRuleContext(GrantPrivilegesContext.class,0);
		}
		public RevokePrivilegesContext revokePrivileges() {
			return getRuleContext(RevokePrivilegesContext.class,0);
		}
		public ShowGrantsContext showGrants() {
			return getRuleContext(ShowGrantsContext.class,0);
		}
		public ShowRoleGrantsContext showRoleGrants() {
			return getRuleContext(ShowRoleGrantsContext.class,0);
		}
		public ShowRolesContext showRoles() {
			return getRuleContext(ShowRolesContext.class,0);
		}
		public ShowRolePrincipalsContext showRolePrincipals() {
			return getRuleContext(ShowRolePrincipalsContext.class,0);
		}
		public AuthorizationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorizationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAuthorizationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAuthorizationStatement(this);
		}
	}

	public final AuthorizationStatementContext authorizationStatement() throws RecognitionException {
		AuthorizationStatementContext _localctx = new AuthorizationStatementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_authorizationStatement);
		try {
			setState(1465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1418);
				addUserStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1419);
				removeUserStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1420);
				addGroupStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1421);
				removeGroupStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1422);
				addAccountProvider();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1423);
				removeAccountProvider();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1424);
				listUsers();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1425);
				listGroups();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1426);
				showAcl();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1427);
				describeRole();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1428);
				listRoles();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1429);
				listTrustedProjects();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1430);
				addTrustedProject();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1431);
				removeTrustedProject();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1432);
				showSecurityConfiguration();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1433);
				showPackages();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1434);
				showItems();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1435);
				describePackage();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1436);
				installPackage();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1437);
				uninstallPackage();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1438);
				createPackage();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1439);
				deletePackage();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1440);
				addToPackage();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1441);
				removeFromPackage();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1442);
				allowPackage();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1443);
				disallowPackage();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1444);
				putPolicy();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1445);
				getPolicy();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1446);
				clearExpiredGrants();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1447);
				grantLabel();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1448);
				revokeLabel();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1449);
				showLabel();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1450);
				grantSuperPrivilege();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1451);
				revokeSuperPrivilege();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1452);
				purgePrivileges();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1453);
				createRoleStatement();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1454);
				dropRoleStatement();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1455);
				addRoleToProject();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1456);
				removeRoleFromProject();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1457);
				grantRole();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1458);
				revokeRole();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1459);
				grantPrivileges();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1460);
				revokePrivileges();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1461);
				showGrants();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1462);
				showRoleGrants();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1463);
				showRoles();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1464);
				showRolePrincipals();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListUsersContext extends ParserRuleContext {
		public TerminalNode KW_LIST() { return getToken(CommandParser.KW_LIST, 0); }
		public TerminalNode KW_USERS() { return getToken(CommandParser.KW_USERS, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public ListUsersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listUsers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterListUsers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitListUsers(this);
		}
	}

	public final ListUsersContext listUsers() throws RecognitionException {
		ListUsersContext _localctx = new ListUsersContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_listUsers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1467);
			match(KW_LIST);
			setState(1469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1468);
				match(KW_TENANT);
				}
			}

			setState(1471);
			match(KW_USERS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListGroupsContext extends ParserRuleContext {
		public TerminalNode KW_LIST() { return getToken(CommandParser.KW_LIST, 0); }
		public TerminalNode KW_GROUPS() { return getToken(CommandParser.KW_GROUPS, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public TerminalNode KW_USER() { return getToken(CommandParser.KW_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ListGroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listGroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterListGroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitListGroups(this);
		}
	}

	public final ListGroupsContext listGroups() throws RecognitionException {
		ListGroupsContext _localctx = new ListGroupsContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_listGroups);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			match(KW_LIST);
			setState(1475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1474);
				match(KW_TENANT);
				}
			}

			setState(1477);
			match(KW_GROUPS);
			setState(1481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FOR) {
				{
				setState(1478);
				match(KW_FOR);
				setState(1479);
				match(KW_USER);
				setState(1480);
				user();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddUserStatementContext extends ParserRuleContext {
		public UserContext name;
		public UserRoleCommentsContext comment;
		public TerminalNode KW_ADD() { return getToken(CommandParser.KW_ADD, 0); }
		public TerminalNode KW_USER() { return getToken(CommandParser.KW_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public UserRoleCommentsContext userRoleComments() {
			return getRuleContext(UserRoleCommentsContext.class,0);
		}
		public AddUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addUserStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAddUserStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAddUserStatement(this);
		}
	}

	public final AddUserStatementContext addUserStatement() throws RecognitionException {
		AddUserStatementContext _localctx = new AddUserStatementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_addUserStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1483);
			match(KW_ADD);
			setState(1485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1484);
				match(KW_TENANT);
				}
			}

			setState(1487);
			match(KW_USER);
			setState(1488);
			((AddUserStatementContext)_localctx).name = user();
			setState(1490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT || _la==MINUS) {
				{
				setState(1489);
				((AddUserStatementContext)_localctx).comment = userRoleComments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddGroupStatementContext extends ParserRuleContext {
		public PrincipalIdentifierContext name;
		public UserRoleCommentsContext comment;
		public TerminalNode KW_ADD() { return getToken(CommandParser.KW_ADD, 0); }
		public TerminalNode KW_GROUP() { return getToken(CommandParser.KW_GROUP, 0); }
		public PrincipalIdentifierContext principalIdentifier() {
			return getRuleContext(PrincipalIdentifierContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public UserRoleCommentsContext userRoleComments() {
			return getRuleContext(UserRoleCommentsContext.class,0);
		}
		public AddGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addGroupStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAddGroupStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAddGroupStatement(this);
		}
	}

	public final AddGroupStatementContext addGroupStatement() throws RecognitionException {
		AddGroupStatementContext _localctx = new AddGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_addGroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1492);
			match(KW_ADD);
			setState(1494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1493);
				match(KW_TENANT);
				}
			}

			setState(1496);
			match(KW_GROUP);
			setState(1497);
			((AddGroupStatementContext)_localctx).name = principalIdentifier();
			setState(1499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT || _la==MINUS) {
				{
				setState(1498);
				((AddGroupStatementContext)_localctx).comment = userRoleComments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveUserStatementContext extends ParserRuleContext {
		public TerminalNode KW_REMOVE() { return getToken(CommandParser.KW_REMOVE, 0); }
		public TerminalNode KW_USER() { return getToken(CommandParser.KW_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public RemoveUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeUserStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRemoveUserStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRemoveUserStatement(this);
		}
	}

	public final RemoveUserStatementContext removeUserStatement() throws RecognitionException {
		RemoveUserStatementContext _localctx = new RemoveUserStatementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_removeUserStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1501);
			match(KW_REMOVE);
			setState(1503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1502);
				match(KW_TENANT);
				}
			}

			setState(1505);
			match(KW_USER);
			setState(1506);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveGroupStatementContext extends ParserRuleContext {
		public TerminalNode KW_REMOVE() { return getToken(CommandParser.KW_REMOVE, 0); }
		public TerminalNode KW_GROUP() { return getToken(CommandParser.KW_GROUP, 0); }
		public PrincipalIdentifierContext principalIdentifier() {
			return getRuleContext(PrincipalIdentifierContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public RemoveGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeGroupStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRemoveGroupStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRemoveGroupStatement(this);
		}
	}

	public final RemoveGroupStatementContext removeGroupStatement() throws RecognitionException {
		RemoveGroupStatementContext _localctx = new RemoveGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_removeGroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1508);
			match(KW_REMOVE);
			setState(1510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1509);
				match(KW_TENANT);
				}
			}

			setState(1512);
			match(KW_GROUP);
			setState(1513);
			principalIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddAccountProviderContext extends ParserRuleContext {
		public TerminalNode KW_ADD() { return getToken(CommandParser.KW_ADD, 0); }
		public TerminalNode KW_ACCOUNTPROVIDER() { return getToken(CommandParser.KW_ACCOUNTPROVIDER, 0); }
		public AccountProviderContext accountProvider() {
			return getRuleContext(AccountProviderContext.class,0);
		}
		public AddAccountProviderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addAccountProvider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAddAccountProvider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAddAccountProvider(this);
		}
	}

	public final AddAccountProviderContext addAccountProvider() throws RecognitionException {
		AddAccountProviderContext _localctx = new AddAccountProviderContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_addAccountProvider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1515);
			match(KW_ADD);
			setState(1516);
			match(KW_ACCOUNTPROVIDER);
			setState(1517);
			accountProvider();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveAccountProviderContext extends ParserRuleContext {
		public TerminalNode KW_REMOVE() { return getToken(CommandParser.KW_REMOVE, 0); }
		public TerminalNode KW_ACCOUNTPROVIDER() { return getToken(CommandParser.KW_ACCOUNTPROVIDER, 0); }
		public AccountProviderContext accountProvider() {
			return getRuleContext(AccountProviderContext.class,0);
		}
		public RemoveAccountProviderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeAccountProvider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRemoveAccountProvider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRemoveAccountProvider(this);
		}
	}

	public final RemoveAccountProviderContext removeAccountProvider() throws RecognitionException {
		RemoveAccountProviderContext _localctx = new RemoveAccountProviderContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_removeAccountProvider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1519);
			match(KW_REMOVE);
			setState(1520);
			match(KW_ACCOUNTPROVIDER);
			setState(1521);
			accountProvider();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowAclContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_ACL() { return getToken(CommandParser.KW_ACL, 0); }
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public PrivilegeObjectNameContext privilegeObjectName() {
			return getRuleContext(PrivilegeObjectNameContext.class,0);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_TYPE() { return getToken(CommandParser.KW_TYPE, 0); }
		public PrivilegeObjectTypeContext privilegeObjectType() {
			return getRuleContext(PrivilegeObjectTypeContext.class,0);
		}
		public ShowAclContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showAcl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowAcl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowAcl(this);
		}
	}

	public final ShowAclContext showAcl() throws RecognitionException {
		ShowAclContext _localctx = new ShowAclContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_showAcl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1523);
			match(KW_SHOW);
			setState(1524);
			match(KW_ACL);
			setState(1525);
			match(KW_FOR);
			setState(1526);
			privilegeObjectName();
			setState(1530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(1527);
				match(KW_ON);
				setState(1528);
				match(KW_TYPE);
				setState(1529);
				privilegeObjectType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeRoleContext extends ParserRuleContext {
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public DescribeRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescribeRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescribeRole(this);
		}
	}

	public final DescribeRoleContext describeRole() throws RecognitionException {
		DescribeRoleContext _localctx = new DescribeRoleContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_describeRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1532);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1533);
				match(KW_TENANT);
				}
			}

			setState(1536);
			match(KW_ROLE);
			setState(1537);
			roleName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListRolesContext extends ParserRuleContext {
		public TerminalNode KW_LIST() { return getToken(CommandParser.KW_LIST, 0); }
		public TerminalNode KW_ROLES() { return getToken(CommandParser.KW_ROLES, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public ListRolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listRoles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterListRoles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitListRoles(this);
		}
	}

	public final ListRolesContext listRoles() throws RecognitionException {
		ListRolesContext _localctx = new ListRolesContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_listRoles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1539);
			match(KW_LIST);
			setState(1541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1540);
				match(KW_TENANT);
				}
			}

			setState(1543);
			match(KW_ROLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListTrustedProjectsContext extends ParserRuleContext {
		public TerminalNode KW_LIST() { return getToken(CommandParser.KW_LIST, 0); }
		public TerminalNode KW_TRUSTEDPROJECTS() { return getToken(CommandParser.KW_TRUSTEDPROJECTS, 0); }
		public ListTrustedProjectsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listTrustedProjects; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterListTrustedProjects(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitListTrustedProjects(this);
		}
	}

	public final ListTrustedProjectsContext listTrustedProjects() throws RecognitionException {
		ListTrustedProjectsContext _localctx = new ListTrustedProjectsContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_listTrustedProjects);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1545);
			match(KW_LIST);
			setState(1546);
			match(KW_TRUSTEDPROJECTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddTrustedProjectContext extends ParserRuleContext {
		public TerminalNode KW_ADD() { return getToken(CommandParser.KW_ADD, 0); }
		public TerminalNode KW_TRUSTEDPROJECT() { return getToken(CommandParser.KW_TRUSTEDPROJECT, 0); }
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public AddTrustedProjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addTrustedProject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAddTrustedProject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAddTrustedProject(this);
		}
	}

	public final AddTrustedProjectContext addTrustedProject() throws RecognitionException {
		AddTrustedProjectContext _localctx = new AddTrustedProjectContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_addTrustedProject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1548);
			match(KW_ADD);
			setState(1549);
			match(KW_TRUSTEDPROJECT);
			setState(1550);
			projectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveTrustedProjectContext extends ParserRuleContext {
		public TerminalNode KW_REMOVE() { return getToken(CommandParser.KW_REMOVE, 0); }
		public TerminalNode KW_TRUSTEDPROJECT() { return getToken(CommandParser.KW_TRUSTEDPROJECT, 0); }
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public RemoveTrustedProjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeTrustedProject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRemoveTrustedProject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRemoveTrustedProject(this);
		}
	}

	public final RemoveTrustedProjectContext removeTrustedProject() throws RecognitionException {
		RemoveTrustedProjectContext _localctx = new RemoveTrustedProjectContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_removeTrustedProject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1552);
			match(KW_REMOVE);
			setState(1553);
			match(KW_TRUSTEDPROJECT);
			setState(1554);
			projectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSecurityConfigurationContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_SECURITYCONFIGURATION() { return getToken(CommandParser.KW_SECURITYCONFIGURATION, 0); }
		public ShowSecurityConfigurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSecurityConfiguration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowSecurityConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowSecurityConfiguration(this);
		}
	}

	public final ShowSecurityConfigurationContext showSecurityConfiguration() throws RecognitionException {
		ShowSecurityConfigurationContext _localctx = new ShowSecurityConfigurationContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_showSecurityConfiguration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1556);
			match(KW_SHOW);
			setState(1557);
			match(KW_SECURITYCONFIGURATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowPackagesContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_PACKAGES() { return getToken(CommandParser.KW_PACKAGES, 0); }
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public ShowPackagesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPackages; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowPackages(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowPackages(this);
		}
	}

	public final ShowPackagesContext showPackages() throws RecognitionException {
		ShowPackagesContext _localctx = new ShowPackagesContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_showPackages);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1559);
			match(KW_SHOW);
			setState(1560);
			match(KW_PACKAGES);
			setState(1563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1561);
				match(KW_WITH);
				setState(1562);
				privilegeObject();
				}
			}

			setState(1566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1565);
				privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowItemsContext extends ParserRuleContext {
		public PackageNameContext pkg;
		public ProjectNameContext prj;
		public PrivilegeObjectTypeContext tp;
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public TerminalNode KW_ITEMS() { return getToken(CommandParser.KW_ITEMS, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_TYPE() { return getToken(CommandParser.KW_TYPE, 0); }
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public PrivilegeObjectTypeContext privilegeObjectType() {
			return getRuleContext(PrivilegeObjectTypeContext.class,0);
		}
		public ShowItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowItems(this);
		}
	}

	public final ShowItemsContext showItems() throws RecognitionException {
		ShowItemsContext _localctx = new ShowItemsContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_showItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1568);
			match(KW_SHOW);
			setState(1569);
			match(KW_PACKAGE);
			setState(1581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(1570);
				((ShowItemsContext)_localctx).pkg = packageName();
				}
				break;
			case 2:
				{
				setState(1571);
				match(KW_ITEMS);
				setState(1574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM) {
					{
					setState(1572);
					match(KW_FROM);
					setState(1573);
					((ShowItemsContext)_localctx).prj = projectName();
					}
				}

				setState(1579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ON) {
					{
					setState(1576);
					match(KW_ON);
					setState(1577);
					match(KW_TYPE);
					setState(1578);
					((ShowItemsContext)_localctx).tp = privilegeObjectType();
					}
				}

				}
				break;
			}
			setState(1584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1583);
				privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPackageContext extends ParserRuleContext {
		public PackageNameWithProjectContext pkg;
		public TerminalNode KW_INSTALL() { return getToken(CommandParser.KW_INSTALL, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameWithProjectContext packageNameWithProject() {
			return getRuleContext(PackageNameWithProjectContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public InstallPackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterInstallPackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitInstallPackage(this);
		}
	}

	public final InstallPackageContext installPackage() throws RecognitionException {
		InstallPackageContext _localctx = new InstallPackageContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_installPackage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			match(KW_INSTALL);
			setState(1587);
			match(KW_PACKAGE);
			setState(1588);
			((InstallPackageContext)_localctx).pkg = packageNameWithProject();
			setState(1590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1589);
				privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPackageContext extends ParserRuleContext {
		public PackageNameWithProjectContext pkg;
		public TerminalNode KW_UNINSTALL() { return getToken(CommandParser.KW_UNINSTALL, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameWithProjectContext packageNameWithProject() {
			return getRuleContext(PackageNameWithProjectContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public UninstallPackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUninstallPackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUninstallPackage(this);
		}
	}

	public final UninstallPackageContext uninstallPackage() throws RecognitionException {
		UninstallPackageContext _localctx = new UninstallPackageContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_uninstallPackage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1592);
			match(KW_UNINSTALL);
			setState(1593);
			match(KW_PACKAGE);
			setState(1594);
			((UninstallPackageContext)_localctx).pkg = packageNameWithProject();
			setState(1596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1595);
				privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePackageContext extends ParserRuleContext {
		public TerminalNode KW_CREATE() { return getToken(CommandParser.KW_CREATE, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public CreatePackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCreatePackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCreatePackage(this);
		}
	}

	public final CreatePackageContext createPackage() throws RecognitionException {
		CreatePackageContext _localctx = new CreatePackageContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_createPackage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1598);
			match(KW_CREATE);
			setState(1599);
			match(KW_PACKAGE);
			setState(1600);
			packageName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeletePackageContext extends ParserRuleContext {
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public TerminalNode KW_DELETE() { return getToken(CommandParser.KW_DELETE, 0); }
		public TerminalNode KW_DROP() { return getToken(CommandParser.KW_DROP, 0); }
		public DeletePackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deletePackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDeletePackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDeletePackage(this);
		}
	}

	public final DeletePackageContext deletePackage() throws RecognitionException {
		DeletePackageContext _localctx = new DeletePackageContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_deletePackage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			_la = _input.LA(1);
			if ( !(_la==KW_DROP || _la==KW_DELETE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1603);
			match(KW_PACKAGE);
			setState(1604);
			packageName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddToPackageContext extends ParserRuleContext {
		public PrivilegePropertiesContext props;
		public TerminalNode KW_ADD() { return getToken(CommandParser.KW_ADD, 0); }
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public TerminalNode KW_PRIVILEGES() { return getToken(CommandParser.KW_PRIVILEGES, 0); }
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public AddToPackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addToPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAddToPackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAddToPackage(this);
		}
	}

	public final AddToPackageContext addToPackage() throws RecognitionException {
		AddToPackageContext _localctx = new AddToPackageContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_addToPackage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1606);
			match(KW_ADD);
			setState(1607);
			privilegeObject();
			setState(1608);
			match(KW_TO);
			setState(1609);
			match(KW_PACKAGE);
			setState(1610);
			packageName();
			setState(1621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1611);
				match(KW_WITH);
				setState(1612);
				match(KW_PRIVILEGES);
				setState(1613);
				privilege();
				setState(1618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1614);
					match(COMMA);
					setState(1615);
					privilege();
					}
					}
					setState(1620);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1623);
				((AddToPackageContext)_localctx).props = privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveFromPackageContext extends ParserRuleContext {
		public TerminalNode KW_REMOVE() { return getToken(CommandParser.KW_REMOVE, 0); }
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public RemoveFromPackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeFromPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRemoveFromPackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRemoveFromPackage(this);
		}
	}

	public final RemoveFromPackageContext removeFromPackage() throws RecognitionException {
		RemoveFromPackageContext _localctx = new RemoveFromPackageContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_removeFromPackage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1626);
			match(KW_REMOVE);
			setState(1627);
			privilegeObject();
			setState(1628);
			match(KW_FROM);
			setState(1629);
			match(KW_PACKAGE);
			setState(1630);
			packageName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllowPackageContext extends ParserRuleContext {
		public ProjectNameContext pj;
		public Token st;
		public TerminalNode KW_ALLOW() { return getToken(CommandParser.KW_ALLOW, 0); }
		public TerminalNode KW_PROJECT() { return getToken(CommandParser.KW_PROJECT, 0); }
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public TerminalNode KW_INSTALL() { return getToken(CommandParser.KW_INSTALL, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(CommandParser.STAR, 0); }
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public TerminalNode KW_USING() { return getToken(CommandParser.KW_USING, 0); }
		public TerminalNode KW_LABEL() { return getToken(CommandParser.KW_LABEL, 0); }
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public TerminalNode KW_EXP() { return getToken(CommandParser.KW_EXP, 0); }
		public TerminalNode Number() { return getToken(CommandParser.Number, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public AllowPackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allowPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAllowPackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAllowPackage(this);
		}
	}

	public final AllowPackageContext allowPackage() throws RecognitionException {
		AllowPackageContext _localctx = new AllowPackageContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_allowPackage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1632);
			match(KW_ALLOW);
			setState(1633);
			match(KW_PROJECT);
			setState(1636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				{
				setState(1634);
				((AllowPackageContext)_localctx).pj = projectName();
				}
				break;
			case STAR:
				{
				setState(1635);
				((AllowPackageContext)_localctx).st = match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1638);
			match(KW_TO);
			setState(1639);
			match(KW_INSTALL);
			setState(1640);
			match(KW_PACKAGE);
			setState(1641);
			packageName();
			setState(1651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1642);
				match(KW_WITH);
				setState(1643);
				privilege();
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1644);
					match(COMMA);
					setState(1645);
					privilege();
					}
					}
					setState(1650);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_USING) {
				{
				setState(1653);
				match(KW_USING);
				setState(1654);
				match(KW_LABEL);
				setState(1655);
				label();
				}
			}

			setState(1660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_EXP) {
				{
				setState(1658);
				match(KW_EXP);
				setState(1659);
				match(Number);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DisallowPackageContext extends ParserRuleContext {
		public ProjectNameContext pj;
		public Token st;
		public TerminalNode KW_DISALLOW() { return getToken(CommandParser.KW_DISALLOW, 0); }
		public TerminalNode KW_PROJECT() { return getToken(CommandParser.KW_PROJECT, 0); }
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public TerminalNode KW_INSTALL() { return getToken(CommandParser.KW_INSTALL, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(CommandParser.STAR, 0); }
		public DisallowPackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disallowPackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDisallowPackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDisallowPackage(this);
		}
	}

	public final DisallowPackageContext disallowPackage() throws RecognitionException {
		DisallowPackageContext _localctx = new DisallowPackageContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_disallowPackage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1662);
			match(KW_DISALLOW);
			setState(1663);
			match(KW_PROJECT);
			setState(1666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				{
				setState(1664);
				((DisallowPackageContext)_localctx).pj = projectName();
				}
				break;
			case STAR:
				{
				setState(1665);
				((DisallowPackageContext)_localctx).st = match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1668);
			match(KW_TO);
			setState(1669);
			match(KW_INSTALL);
			setState(1670);
			match(KW_PACKAGE);
			setState(1671);
			packageName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PutPolicyContext extends ParserRuleContext {
		public TerminalNode KW_PUT() { return getToken(CommandParser.KW_PUT, 0); }
		public TerminalNode KW_POLICY() { return getToken(CommandParser.KW_POLICY, 0); }
		public FilePathContext filePath() {
			return getRuleContext(FilePathContext.class,0);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public PutPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_putPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPutPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPutPolicy(this);
		}
	}

	public final PutPolicyContext putPolicy() throws RecognitionException {
		PutPolicyContext _localctx = new PutPolicyContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_putPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1673);
			match(KW_PUT);
			setState(1674);
			match(KW_POLICY);
			setState(1675);
			filePath();
			setState(1682);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(1676);
				match(KW_ON);
				setState(1678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TENANT) {
					{
					setState(1677);
					match(KW_TENANT);
					}
				}

				setState(1680);
				match(KW_ROLE);
				setState(1681);
				roleName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetPolicyContext extends ParserRuleContext {
		public TerminalNode KW_GET() { return getToken(CommandParser.KW_GET, 0); }
		public TerminalNode KW_POLICY() { return getToken(CommandParser.KW_POLICY, 0); }
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public GetPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGetPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGetPolicy(this);
		}
	}

	public final GetPolicyContext getPolicy() throws RecognitionException {
		GetPolicyContext _localctx = new GetPolicyContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_getPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1684);
			match(KW_GET);
			setState(1685);
			match(KW_POLICY);
			setState(1692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(1686);
				match(KW_ON);
				setState(1688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TENANT) {
					{
					setState(1687);
					match(KW_TENANT);
					}
				}

				setState(1690);
				match(KW_ROLE);
				setState(1691);
				roleName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClearExpiredGrantsContext extends ParserRuleContext {
		public TerminalNode KW_CLEAR() { return getToken(CommandParser.KW_CLEAR, 0); }
		public TerminalNode KW_EXPIRED() { return getToken(CommandParser.KW_EXPIRED, 0); }
		public TerminalNode KW_GRANTS() { return getToken(CommandParser.KW_GRANTS, 0); }
		public ClearExpiredGrantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clearExpiredGrants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterClearExpiredGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitClearExpiredGrants(this);
		}
	}

	public final ClearExpiredGrantsContext clearExpiredGrants() throws RecognitionException {
		ClearExpiredGrantsContext _localctx = new ClearExpiredGrantsContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_clearExpiredGrants);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1694);
			match(KW_CLEAR);
			setState(1695);
			match(KW_EXPIRED);
			setState(1696);
			match(KW_GRANTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantLabelContext extends ParserRuleContext {
		public PrivilegeObjectNameContext tabName;
		public PrincipalNameContext p;
		public PrivilegePropertiesContext props;
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public TerminalNode KW_LABEL() { return getToken(CommandParser.KW_LABEL, 0); }
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public PrivilegeObjectNameContext privilegeObjectName() {
			return getRuleContext(PrivilegeObjectNameContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public TerminalNode KW_EXP() { return getToken(CommandParser.KW_EXP, 0); }
		public TerminalNode Number() { return getToken(CommandParser.Number, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public GrantLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGrantLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGrantLabel(this);
		}
	}

	public final GrantLabelContext grantLabel() throws RecognitionException {
		GrantLabelContext _localctx = new GrantLabelContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_grantLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			match(KW_GRANT);
			setState(1699);
			match(KW_LABEL);
			setState(1700);
			label();
			setState(1701);
			match(KW_ON);
			setState(1702);
			match(KW_TABLE);
			setState(1703);
			((GrantLabelContext)_localctx).tabName = privilegeObjectName();
			setState(1708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1704);
				match(LPAREN);
				setState(1705);
				columnNameList();
				setState(1706);
				match(RPAREN);
				}
			}

			setState(1710);
			match(KW_TO);
			setState(1717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(1711);
				((GrantLabelContext)_localctx).p = principalName();
				setState(1712);
				match(KW_WITH);
				setState(1713);
				match(KW_EXP);
				setState(1714);
				match(Number);
				}
				break;
			case 2:
				{
				setState(1716);
				((GrantLabelContext)_localctx).p = principalName();
				}
				break;
			}
			setState(1720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1719);
				((GrantLabelContext)_localctx).props = privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeLabelContext extends ParserRuleContext {
		public PrivilegeObjectNameContext tabName;
		public PrincipalNameContext p;
		public PrivilegePropertiesContext props;
		public TerminalNode KW_REVOKE() { return getToken(CommandParser.KW_REVOKE, 0); }
		public TerminalNode KW_LABEL() { return getToken(CommandParser.KW_LABEL, 0); }
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public PrivilegeObjectNameContext privilegeObjectName() {
			return getRuleContext(PrivilegeObjectNameContext.class,0);
		}
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public RevokeLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRevokeLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRevokeLabel(this);
		}
	}

	public final RevokeLabelContext revokeLabel() throws RecognitionException {
		RevokeLabelContext _localctx = new RevokeLabelContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_revokeLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1722);
			match(KW_REVOKE);
			setState(1723);
			match(KW_LABEL);
			setState(1724);
			match(KW_ON);
			setState(1725);
			match(KW_TABLE);
			setState(1726);
			((RevokeLabelContext)_localctx).tabName = privilegeObjectName();
			setState(1731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1727);
				match(LPAREN);
				setState(1728);
				columnNameList();
				setState(1729);
				match(RPAREN);
				}
			}

			setState(1733);
			match(KW_FROM);
			setState(1734);
			((RevokeLabelContext)_localctx).p = principalName();
			setState(1736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1735);
				((RevokeLabelContext)_localctx).props = privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowLabelContext extends ParserRuleContext {
		public PrivilegeObjectNameContext tabName;
		public PrincipalNameContext p;
		public Token forTable;
		public PrivilegePropertiesContext props;
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_LABEL() { return getToken(CommandParser.KW_LABEL, 0); }
		public TerminalNode KW_GRANTS() { return getToken(CommandParser.KW_GRANTS, 0); }
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public PrivilegeObjectNameContext privilegeObjectName() {
			return getRuleContext(PrivilegeObjectNameContext.class,0);
		}
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public ShowLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowLabel(this);
		}
	}

	public final ShowLabelContext showLabel() throws RecognitionException {
		ShowLabelContext _localctx = new ShowLabelContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_showLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			match(KW_SHOW);
			setState(1739);
			match(KW_LABEL);
			setState(1741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Number) {
				{
				setState(1740);
				label();
				}
			}

			setState(1743);
			match(KW_GRANTS);
			setState(1756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1744);
				match(KW_ON);
				setState(1745);
				match(KW_TABLE);
				setState(1746);
				((ShowLabelContext)_localctx).tabName = privilegeObjectName();
				setState(1749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FOR) {
					{
					setState(1747);
					match(KW_FOR);
					setState(1748);
					((ShowLabelContext)_localctx).p = principalName();
					}
				}

				}
				break;
			case 2:
				{
				setState(1751);
				match(KW_FOR);
				setState(1752);
				((ShowLabelContext)_localctx).p = principalName();
				}
				break;
			case 3:
				{
				setState(1753);
				((ShowLabelContext)_localctx).forTable = match(KW_FOR);
				setState(1754);
				match(KW_TABLE);
				setState(1755);
				((ShowLabelContext)_localctx).tabName = privilegeObjectName();
				}
				break;
			}
			setState(1759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1758);
				((ShowLabelContext)_localctx).props = privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantSuperPrivilegeContext extends ParserRuleContext {
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public TerminalNode KW_SUPER() { return getToken(CommandParser.KW_SUPER, 0); }
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public GrantSuperPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantSuperPrivilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGrantSuperPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGrantSuperPrivilege(this);
		}
	}

	public final GrantSuperPrivilegeContext grantSuperPrivilege() throws RecognitionException {
		GrantSuperPrivilegeContext _localctx = new GrantSuperPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_grantSuperPrivilege);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1761);
			match(KW_GRANT);
			setState(1762);
			match(KW_SUPER);
			setState(1763);
			privilege();
			setState(1768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1764);
				match(COMMA);
				setState(1765);
				privilege();
				}
				}
				setState(1770);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1771);
			match(KW_TO);
			setState(1772);
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeSuperPrivilegeContext extends ParserRuleContext {
		public TerminalNode KW_REVOKE() { return getToken(CommandParser.KW_REVOKE, 0); }
		public TerminalNode KW_SUPER() { return getToken(CommandParser.KW_SUPER, 0); }
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public RevokeSuperPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeSuperPrivilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRevokeSuperPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRevokeSuperPrivilege(this);
		}
	}

	public final RevokeSuperPrivilegeContext revokeSuperPrivilege() throws RecognitionException {
		RevokeSuperPrivilegeContext _localctx = new RevokeSuperPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_revokeSuperPrivilege);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1774);
			match(KW_REVOKE);
			setState(1775);
			match(KW_SUPER);
			setState(1776);
			privilege();
			setState(1781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1777);
				match(COMMA);
				setState(1778);
				privilege();
				}
				}
				setState(1783);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1784);
			match(KW_FROM);
			setState(1785);
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleStatementContext extends ParserRuleContext {
		public RoleNameContext role;
		public UserRoleCommentsContext comment;
		public PrivilegePropertiesContext props;
		public TerminalNode KW_CREATE() { return getToken(CommandParser.KW_CREATE, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public UserRoleCommentsContext userRoleComments() {
			return getRuleContext(UserRoleCommentsContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public CreateRoleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCreateRoleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCreateRoleStatement(this);
		}
	}

	public final CreateRoleStatementContext createRoleStatement() throws RecognitionException {
		CreateRoleStatementContext _localctx = new CreateRoleStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_createRoleStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1787);
			match(KW_CREATE);
			setState(1789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1788);
				match(KW_TENANT);
				}
			}

			setState(1791);
			match(KW_ROLE);
			setState(1792);
			((CreateRoleStatementContext)_localctx).role = roleName();
			setState(1794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT || _la==MINUS) {
				{
				setState(1793);
				((CreateRoleStatementContext)_localctx).comment = userRoleComments();
				}
			}

			setState(1797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1796);
				((CreateRoleStatementContext)_localctx).props = privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleStatementContext extends ParserRuleContext {
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_DELETE() { return getToken(CommandParser.KW_DELETE, 0); }
		public TerminalNode KW_DROP() { return getToken(CommandParser.KW_DROP, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public DropRoleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDropRoleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDropRoleStatement(this);
		}
	}

	public final DropRoleStatementContext dropRoleStatement() throws RecognitionException {
		DropRoleStatementContext _localctx = new DropRoleStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_dropRoleStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1799);
			_la = _input.LA(1);
			if ( !(_la==KW_DROP || _la==KW_DELETE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TENANT) {
				{
				setState(1800);
				match(KW_TENANT);
				}
			}

			setState(1803);
			match(KW_ROLE);
			setState(1804);
			roleName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddRoleToProjectContext extends ParserRuleContext {
		public TerminalNode KW_ADD() { return getToken(CommandParser.KW_ADD, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public TerminalNode KW_PROJECT() { return getToken(CommandParser.KW_PROJECT, 0); }
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public AddRoleToProjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addRoleToProject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAddRoleToProject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAddRoleToProject(this);
		}
	}

	public final AddRoleToProjectContext addRoleToProject() throws RecognitionException {
		AddRoleToProjectContext _localctx = new AddRoleToProjectContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_addRoleToProject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			match(KW_ADD);
			setState(1807);
			match(KW_TENANT);
			setState(1808);
			match(KW_ROLE);
			setState(1809);
			roleName();
			setState(1810);
			match(KW_TO);
			setState(1811);
			match(KW_PROJECT);
			setState(1812);
			projectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveRoleFromProjectContext extends ParserRuleContext {
		public TerminalNode KW_REMOVE() { return getToken(CommandParser.KW_REMOVE, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public TerminalNode KW_PROJECT() { return getToken(CommandParser.KW_PROJECT, 0); }
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public RemoveRoleFromProjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeRoleFromProject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRemoveRoleFromProject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRemoveRoleFromProject(this);
		}
	}

	public final RemoveRoleFromProjectContext removeRoleFromProject() throws RecognitionException {
		RemoveRoleFromProjectContext _localctx = new RemoveRoleFromProjectContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_removeRoleFromProject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1814);
			match(KW_REMOVE);
			setState(1815);
			match(KW_TENANT);
			setState(1816);
			match(KW_ROLE);
			setState(1817);
			roleName();
			setState(1818);
			match(KW_FROM);
			setState(1819);
			match(KW_PROJECT);
			setState(1820);
			projectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantRoleContext extends ParserRuleContext {
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public WithAdminOptionContext withAdminOption() {
			return getRuleContext(WithAdminOptionContext.class,0);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public GrantRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGrantRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGrantRole(this);
		}
	}

	public final GrantRoleContext grantRole() throws RecognitionException {
		GrantRoleContext _localctx = new GrantRoleContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_grantRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1822);
			match(KW_GRANT);
			setState(1827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(1824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TENANT) {
					{
					setState(1823);
					match(KW_TENANT);
					}
				}

				setState(1826);
				match(KW_ROLE);
				}
				break;
			}
			setState(1829);
			roleName();
			setState(1834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1830);
				match(COMMA);
				setState(1831);
				roleName();
				}
				}
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1837);
			match(KW_TO);
			setState(1838);
			principalSpecification();
			setState(1840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1839);
				withAdminOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeRoleContext extends ParserRuleContext {
		public TerminalNode KW_REVOKE() { return getToken(CommandParser.KW_REVOKE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public AdminOptionForContext adminOptionFor() {
			return getRuleContext(AdminOptionForContext.class,0);
		}
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public RevokeRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRevokeRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRevokeRole(this);
		}
	}

	public final RevokeRoleContext revokeRole() throws RecognitionException {
		RevokeRoleContext _localctx = new RevokeRoleContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_revokeRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1842);
			match(KW_REVOKE);
			setState(1844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(1843);
				adminOptionFor();
				}
				break;
			}
			setState(1850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(1847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TENANT) {
					{
					setState(1846);
					match(KW_TENANT);
					}
				}

				setState(1849);
				match(KW_ROLE);
				}
				break;
			}
			setState(1852);
			roleName();
			setState(1857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1853);
				match(COMMA);
				setState(1854);
				roleName();
				}
				}
				setState(1859);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1860);
			match(KW_FROM);
			setState(1861);
			principalSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantPrivilegesContext extends ParserRuleContext {
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public GrantPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGrantPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGrantPrivileges(this);
		}
	}

	public final GrantPrivilegesContext grantPrivileges() throws RecognitionException {
		GrantPrivilegesContext _localctx = new GrantPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_grantPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1863);
			match(KW_GRANT);
			setState(1864);
			privilege();
			setState(1869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1865);
				match(COMMA);
				setState(1866);
				privilege();
				}
				}
				setState(1871);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1872);
			match(KW_ON);
			setState(1873);
			privilegeObject();
			setState(1874);
			match(KW_TO);
			setState(1875);
			principalSpecification();
			setState(1877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1876);
				withGrantOption();
				}
			}

			setState(1880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1879);
				privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegePropertiesContext extends ParserRuleContext {
		public TerminalNode KW_PRIVILEGEPROPERTIES() { return getToken(CommandParser.KW_PRIVILEGEPROPERTIES, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public List<KeyValuePropertyContext> keyValueProperty() {
			return getRuleContexts(KeyValuePropertyContext.class);
		}
		public KeyValuePropertyContext keyValueProperty(int i) {
			return getRuleContext(KeyValuePropertyContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public PrivilegePropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrivilegeProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrivilegeProperties(this);
		}
	}

	public final PrivilegePropertiesContext privilegeProperties() throws RecognitionException {
		PrivilegePropertiesContext _localctx = new PrivilegePropertiesContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_privilegeProperties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1882);
			match(KW_PRIVILEGEPROPERTIES);
			setState(1883);
			match(LPAREN);
			setState(1884);
			keyValueProperty();
			setState(1889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1885);
				match(COMMA);
				setState(1886);
				keyValueProperty();
				}
				}
				setState(1891);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1892);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokePrivilegesContext extends ParserRuleContext {
		public TerminalNode KW_REVOKE() { return getToken(CommandParser.KW_REVOKE, 0); }
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public GrantOptionForContext grantOptionFor() {
			return getRuleContext(GrantOptionForContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public RevokePrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokePrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRevokePrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRevokePrivileges(this);
		}
	}

	public final RevokePrivilegesContext revokePrivileges() throws RecognitionException {
		RevokePrivilegesContext _localctx = new RevokePrivilegesContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_revokePrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1894);
			match(KW_REVOKE);
			setState(1896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(1895);
				grantOptionFor();
				}
				break;
			}
			setState(1898);
			privilege();
			setState(1903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1899);
				match(COMMA);
				setState(1900);
				privilege();
				}
				}
				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1906);
			match(KW_ON);
			setState(1907);
			privilegeObject();
			setState(1908);
			match(KW_FROM);
			setState(1909);
			principalSpecification();
			setState(1911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1910);
				privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgePrivilegesContext extends ParserRuleContext {
		public TerminalNode KW_PURGE() { return getToken(CommandParser.KW_PURGE, 0); }
		public TerminalNode KW_PRIVILEGES() { return getToken(CommandParser.KW_PRIVILEGES, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public PurgePrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgePrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPurgePrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPurgePrivileges(this);
		}
	}

	public final PurgePrivilegesContext purgePrivileges() throws RecognitionException {
		PurgePrivilegesContext _localctx = new PurgePrivilegesContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_purgePrivileges);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1913);
			match(KW_PURGE);
			setState(1914);
			match(KW_PRIVILEGES);
			setState(1915);
			match(KW_FROM);
			setState(1916);
			principalSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGrantsContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public TerminalNode KW_GRANTS() { return getToken(CommandParser.KW_GRANTS, 0); }
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_TYPE() { return getToken(CommandParser.KW_TYPE, 0); }
		public PrivilegeObjectTypeContext privilegeObjectType() {
			return getRuleContext(PrivilegeObjectTypeContext.class,0);
		}
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public ShowGrantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGrants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowGrants(this);
		}
	}

	public final ShowGrantsContext showGrants() throws RecognitionException {
		ShowGrantsContext _localctx = new ShowGrantsContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_showGrants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1918);
			match(KW_SHOW);
			setState(1919);
			_la = _input.LA(1);
			if ( !(_la==KW_GRANT || _la==KW_GRANTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				setState(1920);
				match(KW_FOR);
				}
				break;
			}
			setState(1924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(1923);
				principalName();
				}
				break;
			}
			setState(1931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(1926);
				match(KW_ON);
				setState(1927);
				match(KW_TYPE);
				setState(1928);
				privilegeObjectType();
				}
				break;
			case 2:
				{
				setState(1929);
				match(KW_ON);
				setState(1930);
				privilegeObject();
				}
				break;
			}
			setState(1934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRIVILEGEPROPERTIES) {
				{
				setState(1933);
				privilegeProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowRoleGrantsContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public ShowRoleGrantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRoleGrants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowRoleGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowRoleGrants(this);
		}
	}

	public final ShowRoleGrantsContext showRoleGrants() throws RecognitionException {
		ShowRoleGrantsContext _localctx = new ShowRoleGrantsContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_showRoleGrants);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1936);
			match(KW_SHOW);
			setState(1937);
			match(KW_ROLE);
			setState(1938);
			match(KW_GRANT);
			setState(1939);
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowRolesContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_ROLES() { return getToken(CommandParser.KW_ROLES, 0); }
		public ShowRolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRoles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowRoles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowRoles(this);
		}
	}

	public final ShowRolesContext showRoles() throws RecognitionException {
		ShowRolesContext _localctx = new ShowRolesContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_showRoles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1941);
			match(KW_SHOW);
			setState(1942);
			match(KW_ROLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowRolePrincipalsContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_PRINCIPALS() { return getToken(CommandParser.KW_PRINCIPALS, 0); }
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public ShowRolePrincipalsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRolePrincipals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowRolePrincipals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowRolePrincipals(this);
		}
	}

	public final ShowRolePrincipalsContext showRolePrincipals() throws RecognitionException {
		ShowRolePrincipalsContext _localctx = new ShowRolePrincipalsContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_showRolePrincipals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1944);
			match(KW_SHOW);
			setState(1945);
			match(KW_PRINCIPALS);
			setState(1947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(1946);
				match(KW_FOR);
				}
				break;
			}
			setState(1950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(1949);
				match(KW_TENANT);
				}
				break;
			}
			setState(1953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(1952);
				match(KW_ROLE);
				}
				break;
			}
			setState(1955);
			roleName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public List<AllIdentifiersContext> allIdentifiers() {
			return getRuleContexts(AllIdentifiersContext.class);
		}
		public AllIdentifiersContext allIdentifiers(int i) {
			return getRuleContext(AllIdentifiersContext.class,i);
		}
		public List<TerminalNode> Number() { return getTokens(CommandParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(CommandParser.Number, i);
		}
		public TerminalNode DOLLAR() { return getToken(CommandParser.DOLLAR, 0); }
		public TerminalNode COLON() { return getToken(CommandParser.COLON, 0); }
		public List<TerminalNode> DOT() { return getTokens(CommandParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CommandParser.DOT, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(CommandParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CommandParser.MINUS, i);
		}
		public List<TerminalNode> UNDERLINE() { return getTokens(CommandParser.UNDERLINE); }
		public TerminalNode UNDERLINE(int i) {
			return getToken(CommandParser.UNDERLINE, i);
		}
		public TerminalNode Variable() { return getToken(CommandParser.Variable, 0); }
		public List<TerminalNode> AT() { return getTokens(CommandParser.AT); }
		public TerminalNode AT(int i) {
			return getToken(CommandParser.AT, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUser(this);
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_user);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(1957);
				allIdentifiers();
				setState(1958);
				match(DOLLAR);
				}
				break;
			}
			setState(1964);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_AND:
			case KW_OR:
			case KW_NOT:
			case KW_LIKE:
			case KW_IF:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_HAVING:
			case KW_WHERE:
			case KW_FROM:
			case KW_AS:
			case KW_SELECT:
			case KW_DISTINCT:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_PRESERVE:
			case KW_JOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_ON:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_COLUMN:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_CHAR:
			case KW_VARCHAR:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_CAST:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_EXTENDED:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_CASE:
			case KW_WHEN:
			case KW_THEN:
			case KW_ELSE:
			case KW_END:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CROSS:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_CURRENT:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				{
				setState(1962);
				allIdentifiers();
				}
				break;
			case Number:
				{
				setState(1963);
				match(Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1973);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1966);
					_la = _input.LA(1);
					if ( !(((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (DOT - 407)) | (1L << (MINUS - 407)) | (1L << (UNDERLINE - 407)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1969);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case KW_TRUE:
					case KW_FALSE:
					case KW_ALL:
					case KW_NONE:
					case KW_AND:
					case KW_OR:
					case KW_NOT:
					case KW_LIKE:
					case KW_IF:
					case KW_EXISTS:
					case KW_ASC:
					case KW_DESC:
					case KW_ORDER:
					case KW_ZORDER:
					case KW_GROUP:
					case KW_GROUPS:
					case KW_BY:
					case KW_HAVING:
					case KW_WHERE:
					case KW_FROM:
					case KW_AS:
					case KW_SELECT:
					case KW_DISTINCT:
					case KW_INSERT:
					case KW_OVERWRITE:
					case KW_OUTER:
					case KW_UNIQUEJOIN:
					case KW_PRESERVE:
					case KW_JOIN:
					case KW_LEFT:
					case KW_RIGHT:
					case KW_FULL:
					case KW_ON:
					case KW_PARTITION:
					case KW_PARTITIONS:
					case KW_TABLE:
					case KW_TABLES:
					case KW_COLUMNS:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_REBUILD:
					case KW_FUNCTIONS:
					case KW_SHOW:
					case KW_MSCK:
					case KW_REPAIR:
					case KW_DIRECTORY:
					case KW_LOCAL:
					case KW_TRANSFORM:
					case KW_USING:
					case KW_CLUSTER:
					case KW_DISTRIBUTE:
					case KW_SORT:
					case KW_UNION:
					case KW_LOAD:
					case KW_UNLOAD:
					case KW_EXPORT:
					case KW_IMPORT:
					case KW_REPLICATION:
					case KW_METADATA:
					case KW_DATA:
					case KW_INPATH:
					case KW_IS:
					case KW_NULL:
					case KW_CREATE:
					case KW_EXTERNAL:
					case KW_ALTER:
					case KW_CHANGE:
					case KW_COLUMN:
					case KW_FIRST:
					case KW_LAST:
					case KW_NULLS:
					case KW_AFTER:
					case KW_DESCRIBE:
					case KW_DROP:
					case KW_RENAME:
					case KW_IGNORE:
					case KW_PROTECTION:
					case KW_TO:
					case KW_COMMENT:
					case KW_BOOLEAN:
					case KW_TINYINT:
					case KW_SMALLINT:
					case KW_INT:
					case KW_BIGINT:
					case KW_FLOAT:
					case KW_DOUBLE:
					case KW_DATE:
					case KW_DATETIME:
					case KW_TIMESTAMP:
					case KW_INTERVAL:
					case KW_DECIMAL:
					case KW_STRING:
					case KW_CHAR:
					case KW_VARCHAR:
					case KW_ARRAY:
					case KW_STRUCT:
					case KW_MAP:
					case KW_UNIONTYPE:
					case KW_REDUCE:
					case KW_PARTITIONED:
					case KW_CLUSTERED:
					case KW_SORTED:
					case KW_INTO:
					case KW_BUCKETS:
					case KW_ROW:
					case KW_ROWS:
					case KW_FORMAT:
					case KW_DELIMITED:
					case KW_FIELDS:
					case KW_TERMINATED:
					case KW_ESCAPED:
					case KW_COLLECTION:
					case KW_ITEMS:
					case KW_KEYS:
					case KW_KEY_TYPE:
					case KW_LINES:
					case KW_STORED:
					case KW_FILEFORMAT:
					case KW_INPUTFORMAT:
					case KW_OUTPUTFORMAT:
					case KW_INPUTDRIVER:
					case KW_OUTPUTDRIVER:
					case KW_OFFLINE:
					case KW_ENABLE:
					case KW_DISABLE:
					case KW_READONLY:
					case KW_NO_DROP:
					case KW_LOCATION:
					case KW_TABLESAMPLE:
					case KW_BUCKET:
					case KW_OUT:
					case KW_OF:
					case KW_PERCENT:
					case KW_CAST:
					case KW_ADD:
					case KW_REPLACE:
					case KW_RLIKE:
					case KW_REGEXP:
					case KW_TEMPORARY:
					case KW_MACRO:
					case KW_FILE:
					case KW_JAR:
					case KW_EXPLAIN:
					case KW_EXTENDED:
					case KW_FORMATTED:
					case KW_PRETTY:
					case KW_DEPENDENCY:
					case KW_LOGICAL:
					case KW_SERDE:
					case KW_WITH:
					case KW_DEFERRED:
					case KW_SERDEPROPERTIES:
					case KW_DBPROPERTIES:
					case KW_LIMIT:
					case KW_OFFSET:
					case KW_SET:
					case KW_UNSET:
					case KW_TBLPROPERTIES:
					case KW_IDXPROPERTIES:
					case KW_VALUE_TYPE:
					case KW_ELEM_TYPE:
					case KW_DEFINED:
					case KW_CASE:
					case KW_WHEN:
					case KW_THEN:
					case KW_ELSE:
					case KW_END:
					case KW_MAPJOIN:
					case KW_SKEWJOIN:
					case KW_DYNAMICFILTER:
					case KW_STREAMTABLE:
					case KW_HOLD_DDLTIME:
					case KW_CLUSTERSTATUS:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_LONG:
					case KW_DELETE:
					case KW_PLUS:
					case KW_MINUS:
					case KW_FETCH:
					case KW_INTERSECT:
					case KW_VIEW:
					case KW_IN:
					case KW_DATABASE:
					case KW_DATABASES:
					case KW_MATERIALIZED:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_GRANT:
					case KW_REVOKE:
					case KW_SSL:
					case KW_UNDO:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_UNLOCK:
					case KW_SHARED:
					case KW_EXCLUSIVE:
					case KW_PROCEDURE:
					case KW_UNSIGNED:
					case KW_WHILE:
					case KW_READ:
					case KW_READS:
					case KW_PURGE:
					case KW_RANGE:
					case KW_ANALYZE:
					case KW_BEFORE:
					case KW_BETWEEN:
					case KW_BOTH:
					case KW_BINARY:
					case KW_CROSS:
					case KW_CONTINUE:
					case KW_CURSOR:
					case KW_TRIGGER:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_SEMI:
					case KW_ANTI:
					case KW_LATERAL:
					case KW_TOUCH:
					case KW_ARCHIVE:
					case KW_UNARCHIVE:
					case KW_COMPUTE:
					case KW_STATISTICS:
					case KW_NULL_VALUE:
					case KW_DISTINCT_VALUE:
					case KW_TABLE_COUNT:
					case KW_COLUMN_SUM:
					case KW_COLUMN_MAX:
					case KW_COLUMN_MIN:
					case KW_EXPRESSION_CONDITION:
					case KW_USE:
					case KW_OPTION:
					case KW_CONCATENATE:
					case KW_SHOW_DATABASE:
					case KW_UPDATE:
					case KW_MATCHED:
					case KW_RESTRICT:
					case KW_CASCADE:
					case KW_SKEWED:
					case KW_ROLLUP:
					case KW_CUBE:
					case KW_DIRECTORIES:
					case KW_FOR:
					case KW_WINDOW:
					case KW_UNBOUNDED:
					case KW_PRECEDING:
					case KW_FOLLOWING:
					case KW_CURRENT:
					case KW_LOCALTIMESTAMP:
					case KW_CURRENT_DATE:
					case KW_CURRENT_TIMESTAMP:
					case KW_LESS:
					case KW_MORE:
					case KW_OVER:
					case KW_GROUPING:
					case KW_SETS:
					case KW_TRUNCATE:
					case KW_NOSCAN:
					case KW_PARTIALSCAN:
					case KW_USER:
					case KW_ROLE:
					case KW_ROLES:
					case KW_INNER:
					case KW_EXCHANGE:
					case KW_URI:
					case KW_SERVER:
					case KW_ADMIN:
					case KW_OWNER:
					case KW_PRINCIPALS:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_TRANSACTIONS:
					case KW_REWRITE:
					case KW_AUTHORIZATION:
					case KW_CONF:
					case KW_VALUES:
					case KW_RELOAD:
					case KW_YEAR:
					case KW_MONTH:
					case KW_DAY:
					case KW_HOUR:
					case KW_MINUTE:
					case KW_SECOND:
					case KW_YEARS:
					case KW_MONTHS:
					case KW_DAYS:
					case KW_HOURS:
					case KW_MINUTES:
					case KW_SECONDS:
					case KW_UDFPROPERTIES:
					case KW_EXCLUDE:
					case KW_TIES:
					case KW_NO:
					case KW_OTHERS:
					case KW_BEGIN:
					case KW_RETURNS:
					case KW_SQL:
					case KW_LOOP:
					case KW_NEW:
					case KW_LIFECYCLE:
					case KW_REMOVE:
					case KW_GRANTS:
					case KW_ACL:
					case KW_TYPE:
					case KW_LIST:
					case KW_USERS:
					case KW_WHOAMI:
					case KW_TRUSTEDPROJECTS:
					case KW_TRUSTEDPROJECT:
					case KW_SECURITYCONFIGURATION:
					case KW_PRIVILEGES:
					case KW_PROJECT:
					case KW_PROJECTS:
					case KW_LABEL:
					case KW_ALLOW:
					case KW_DISALLOW:
					case KW_PACKAGE:
					case KW_PACKAGES:
					case KW_INSTALL:
					case KW_UNINSTALL:
					case KW_P:
					case KW_JOB:
					case KW_JOBS:
					case KW_ACCOUNTPROVIDERS:
					case KW_RESOURCES:
					case KW_FLAGS:
					case KW_COUNT:
					case KW_STATISTIC:
					case KW_STATISTIC_LIST:
					case KW_GET:
					case KW_PUT:
					case KW_POLICY:
					case KW_PROJECTPROTECTION:
					case KW_EXCEPTION:
					case KW_CLEAR:
					case KW_EXPIRED:
					case KW_EXP:
					case KW_ACCOUNTPROVIDER:
					case KW_SUPER:
					case KW_VOLUMEFILE:
					case KW_VOLUMEARCHIVE:
					case KW_OFFLINEMODEL:
					case KW_PY:
					case KW_RESOURCE:
					case KW_KILL:
					case KW_STATUS:
					case KW_SETPROJECT:
					case KW_MERGE:
					case KW_SMALLFILES:
					case KW_PARTITIONPROPERTIES:
					case KW_EXSTORE:
					case KW_CHANGELOGS:
					case KW_REDO:
					case KW_CHANGEOWNER:
					case KW_RECYCLEBIN:
					case KW_PRIVILEGEPROPERTIES:
					case KW_CACHE:
					case KW_CACHEPROPERTIES:
					case KW_VARIABLES:
					case KW_EXCEPT:
					case KW_SELECTIVITY:
					case KW_EXTRACT:
					case KW_SUBSTRING:
					case KW_DEFAULT:
					case KW_ANY:
					case KW_NATURAL:
					case KW_CONSTRAINT:
					case KW_PRIMARY:
					case KW_KEY:
					case KW_VALIDATE:
					case KW_NOVALIDATE:
					case KW_RELY:
					case KW_NORELY:
					case KW_CLONE:
					case KW_HISTORY:
					case KW_RESTORE:
					case KW_LSN:
					case KW_WITHIN:
					case KW_FILTER:
					case KW_TENANT:
					case KW_SHARDS:
					case KW_HUBLIFECYCLE:
					case KW_HUBTABLE:
					case KW_OUTPUT:
					case KW_CODE_BEGIN:
					case KW_CODE_END:
					case KW_MODEL:
					case KW_PROPERTIES:
					case ByteLengthLiteral:
					case Identifier:
						{
						setState(1967);
						allIdentifiers();
						}
						break;
					case Number:
						{
						setState(1968);
						match(Number);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(1975);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			}
			setState(1994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Variable || _la==AT) {
				{
				setState(1982);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Variable:
					{
					setState(1976);
					match(Variable);
					}
					break;
				case AT:
					{
					setState(1977);
					match(AT);
					setState(1980);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case KW_TRUE:
					case KW_FALSE:
					case KW_ALL:
					case KW_NONE:
					case KW_AND:
					case KW_OR:
					case KW_NOT:
					case KW_LIKE:
					case KW_IF:
					case KW_EXISTS:
					case KW_ASC:
					case KW_DESC:
					case KW_ORDER:
					case KW_ZORDER:
					case KW_GROUP:
					case KW_GROUPS:
					case KW_BY:
					case KW_HAVING:
					case KW_WHERE:
					case KW_FROM:
					case KW_AS:
					case KW_SELECT:
					case KW_DISTINCT:
					case KW_INSERT:
					case KW_OVERWRITE:
					case KW_OUTER:
					case KW_UNIQUEJOIN:
					case KW_PRESERVE:
					case KW_JOIN:
					case KW_LEFT:
					case KW_RIGHT:
					case KW_FULL:
					case KW_ON:
					case KW_PARTITION:
					case KW_PARTITIONS:
					case KW_TABLE:
					case KW_TABLES:
					case KW_COLUMNS:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_REBUILD:
					case KW_FUNCTIONS:
					case KW_SHOW:
					case KW_MSCK:
					case KW_REPAIR:
					case KW_DIRECTORY:
					case KW_LOCAL:
					case KW_TRANSFORM:
					case KW_USING:
					case KW_CLUSTER:
					case KW_DISTRIBUTE:
					case KW_SORT:
					case KW_UNION:
					case KW_LOAD:
					case KW_UNLOAD:
					case KW_EXPORT:
					case KW_IMPORT:
					case KW_REPLICATION:
					case KW_METADATA:
					case KW_DATA:
					case KW_INPATH:
					case KW_IS:
					case KW_NULL:
					case KW_CREATE:
					case KW_EXTERNAL:
					case KW_ALTER:
					case KW_CHANGE:
					case KW_COLUMN:
					case KW_FIRST:
					case KW_LAST:
					case KW_NULLS:
					case KW_AFTER:
					case KW_DESCRIBE:
					case KW_DROP:
					case KW_RENAME:
					case KW_IGNORE:
					case KW_PROTECTION:
					case KW_TO:
					case KW_COMMENT:
					case KW_BOOLEAN:
					case KW_TINYINT:
					case KW_SMALLINT:
					case KW_INT:
					case KW_BIGINT:
					case KW_FLOAT:
					case KW_DOUBLE:
					case KW_DATE:
					case KW_DATETIME:
					case KW_TIMESTAMP:
					case KW_INTERVAL:
					case KW_DECIMAL:
					case KW_STRING:
					case KW_CHAR:
					case KW_VARCHAR:
					case KW_ARRAY:
					case KW_STRUCT:
					case KW_MAP:
					case KW_UNIONTYPE:
					case KW_REDUCE:
					case KW_PARTITIONED:
					case KW_CLUSTERED:
					case KW_SORTED:
					case KW_INTO:
					case KW_BUCKETS:
					case KW_ROW:
					case KW_ROWS:
					case KW_FORMAT:
					case KW_DELIMITED:
					case KW_FIELDS:
					case KW_TERMINATED:
					case KW_ESCAPED:
					case KW_COLLECTION:
					case KW_ITEMS:
					case KW_KEYS:
					case KW_KEY_TYPE:
					case KW_LINES:
					case KW_STORED:
					case KW_FILEFORMAT:
					case KW_INPUTFORMAT:
					case KW_OUTPUTFORMAT:
					case KW_INPUTDRIVER:
					case KW_OUTPUTDRIVER:
					case KW_OFFLINE:
					case KW_ENABLE:
					case KW_DISABLE:
					case KW_READONLY:
					case KW_NO_DROP:
					case KW_LOCATION:
					case KW_TABLESAMPLE:
					case KW_BUCKET:
					case KW_OUT:
					case KW_OF:
					case KW_PERCENT:
					case KW_CAST:
					case KW_ADD:
					case KW_REPLACE:
					case KW_RLIKE:
					case KW_REGEXP:
					case KW_TEMPORARY:
					case KW_MACRO:
					case KW_FILE:
					case KW_JAR:
					case KW_EXPLAIN:
					case KW_EXTENDED:
					case KW_FORMATTED:
					case KW_PRETTY:
					case KW_DEPENDENCY:
					case KW_LOGICAL:
					case KW_SERDE:
					case KW_WITH:
					case KW_DEFERRED:
					case KW_SERDEPROPERTIES:
					case KW_DBPROPERTIES:
					case KW_LIMIT:
					case KW_OFFSET:
					case KW_SET:
					case KW_UNSET:
					case KW_TBLPROPERTIES:
					case KW_IDXPROPERTIES:
					case KW_VALUE_TYPE:
					case KW_ELEM_TYPE:
					case KW_DEFINED:
					case KW_CASE:
					case KW_WHEN:
					case KW_THEN:
					case KW_ELSE:
					case KW_END:
					case KW_MAPJOIN:
					case KW_SKEWJOIN:
					case KW_DYNAMICFILTER:
					case KW_STREAMTABLE:
					case KW_HOLD_DDLTIME:
					case KW_CLUSTERSTATUS:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_LONG:
					case KW_DELETE:
					case KW_PLUS:
					case KW_MINUS:
					case KW_FETCH:
					case KW_INTERSECT:
					case KW_VIEW:
					case KW_IN:
					case KW_DATABASE:
					case KW_DATABASES:
					case KW_MATERIALIZED:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_GRANT:
					case KW_REVOKE:
					case KW_SSL:
					case KW_UNDO:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_UNLOCK:
					case KW_SHARED:
					case KW_EXCLUSIVE:
					case KW_PROCEDURE:
					case KW_UNSIGNED:
					case KW_WHILE:
					case KW_READ:
					case KW_READS:
					case KW_PURGE:
					case KW_RANGE:
					case KW_ANALYZE:
					case KW_BEFORE:
					case KW_BETWEEN:
					case KW_BOTH:
					case KW_BINARY:
					case KW_CROSS:
					case KW_CONTINUE:
					case KW_CURSOR:
					case KW_TRIGGER:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_SEMI:
					case KW_ANTI:
					case KW_LATERAL:
					case KW_TOUCH:
					case KW_ARCHIVE:
					case KW_UNARCHIVE:
					case KW_COMPUTE:
					case KW_STATISTICS:
					case KW_NULL_VALUE:
					case KW_DISTINCT_VALUE:
					case KW_TABLE_COUNT:
					case KW_COLUMN_SUM:
					case KW_COLUMN_MAX:
					case KW_COLUMN_MIN:
					case KW_EXPRESSION_CONDITION:
					case KW_USE:
					case KW_OPTION:
					case KW_CONCATENATE:
					case KW_SHOW_DATABASE:
					case KW_UPDATE:
					case KW_MATCHED:
					case KW_RESTRICT:
					case KW_CASCADE:
					case KW_SKEWED:
					case KW_ROLLUP:
					case KW_CUBE:
					case KW_DIRECTORIES:
					case KW_FOR:
					case KW_WINDOW:
					case KW_UNBOUNDED:
					case KW_PRECEDING:
					case KW_FOLLOWING:
					case KW_CURRENT:
					case KW_LOCALTIMESTAMP:
					case KW_CURRENT_DATE:
					case KW_CURRENT_TIMESTAMP:
					case KW_LESS:
					case KW_MORE:
					case KW_OVER:
					case KW_GROUPING:
					case KW_SETS:
					case KW_TRUNCATE:
					case KW_NOSCAN:
					case KW_PARTIALSCAN:
					case KW_USER:
					case KW_ROLE:
					case KW_ROLES:
					case KW_INNER:
					case KW_EXCHANGE:
					case KW_URI:
					case KW_SERVER:
					case KW_ADMIN:
					case KW_OWNER:
					case KW_PRINCIPALS:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_TRANSACTIONS:
					case KW_REWRITE:
					case KW_AUTHORIZATION:
					case KW_CONF:
					case KW_VALUES:
					case KW_RELOAD:
					case KW_YEAR:
					case KW_MONTH:
					case KW_DAY:
					case KW_HOUR:
					case KW_MINUTE:
					case KW_SECOND:
					case KW_YEARS:
					case KW_MONTHS:
					case KW_DAYS:
					case KW_HOURS:
					case KW_MINUTES:
					case KW_SECONDS:
					case KW_UDFPROPERTIES:
					case KW_EXCLUDE:
					case KW_TIES:
					case KW_NO:
					case KW_OTHERS:
					case KW_BEGIN:
					case KW_RETURNS:
					case KW_SQL:
					case KW_LOOP:
					case KW_NEW:
					case KW_LIFECYCLE:
					case KW_REMOVE:
					case KW_GRANTS:
					case KW_ACL:
					case KW_TYPE:
					case KW_LIST:
					case KW_USERS:
					case KW_WHOAMI:
					case KW_TRUSTEDPROJECTS:
					case KW_TRUSTEDPROJECT:
					case KW_SECURITYCONFIGURATION:
					case KW_PRIVILEGES:
					case KW_PROJECT:
					case KW_PROJECTS:
					case KW_LABEL:
					case KW_ALLOW:
					case KW_DISALLOW:
					case KW_PACKAGE:
					case KW_PACKAGES:
					case KW_INSTALL:
					case KW_UNINSTALL:
					case KW_P:
					case KW_JOB:
					case KW_JOBS:
					case KW_ACCOUNTPROVIDERS:
					case KW_RESOURCES:
					case KW_FLAGS:
					case KW_COUNT:
					case KW_STATISTIC:
					case KW_STATISTIC_LIST:
					case KW_GET:
					case KW_PUT:
					case KW_POLICY:
					case KW_PROJECTPROTECTION:
					case KW_EXCEPTION:
					case KW_CLEAR:
					case KW_EXPIRED:
					case KW_EXP:
					case KW_ACCOUNTPROVIDER:
					case KW_SUPER:
					case KW_VOLUMEFILE:
					case KW_VOLUMEARCHIVE:
					case KW_OFFLINEMODEL:
					case KW_PY:
					case KW_RESOURCE:
					case KW_KILL:
					case KW_STATUS:
					case KW_SETPROJECT:
					case KW_MERGE:
					case KW_SMALLFILES:
					case KW_PARTITIONPROPERTIES:
					case KW_EXSTORE:
					case KW_CHANGELOGS:
					case KW_REDO:
					case KW_CHANGEOWNER:
					case KW_RECYCLEBIN:
					case KW_PRIVILEGEPROPERTIES:
					case KW_CACHE:
					case KW_CACHEPROPERTIES:
					case KW_VARIABLES:
					case KW_EXCEPT:
					case KW_SELECTIVITY:
					case KW_EXTRACT:
					case KW_SUBSTRING:
					case KW_DEFAULT:
					case KW_ANY:
					case KW_NATURAL:
					case KW_CONSTRAINT:
					case KW_PRIMARY:
					case KW_KEY:
					case KW_VALIDATE:
					case KW_NOVALIDATE:
					case KW_RELY:
					case KW_NORELY:
					case KW_CLONE:
					case KW_HISTORY:
					case KW_RESTORE:
					case KW_LSN:
					case KW_WITHIN:
					case KW_FILTER:
					case KW_TENANT:
					case KW_SHARDS:
					case KW_HUBLIFECYCLE:
					case KW_HUBTABLE:
					case KW_OUTPUT:
					case KW_CODE_BEGIN:
					case KW_CODE_END:
					case KW_MODEL:
					case KW_PROPERTIES:
					case ByteLengthLiteral:
					case Identifier:
						{
						setState(1978);
						allIdentifiers();
						}
						break;
					case Number:
						{
						setState(1979);
						match(Number);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1991);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1984);
						_la = _input.LA(1);
						if ( !(((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (DOT - 407)) | (1L << (MINUS - 407)) | (1L << (UNDERLINE - 407)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1987);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case KW_TRUE:
						case KW_FALSE:
						case KW_ALL:
						case KW_NONE:
						case KW_AND:
						case KW_OR:
						case KW_NOT:
						case KW_LIKE:
						case KW_IF:
						case KW_EXISTS:
						case KW_ASC:
						case KW_DESC:
						case KW_ORDER:
						case KW_ZORDER:
						case KW_GROUP:
						case KW_GROUPS:
						case KW_BY:
						case KW_HAVING:
						case KW_WHERE:
						case KW_FROM:
						case KW_AS:
						case KW_SELECT:
						case KW_DISTINCT:
						case KW_INSERT:
						case KW_OVERWRITE:
						case KW_OUTER:
						case KW_UNIQUEJOIN:
						case KW_PRESERVE:
						case KW_JOIN:
						case KW_LEFT:
						case KW_RIGHT:
						case KW_FULL:
						case KW_ON:
						case KW_PARTITION:
						case KW_PARTITIONS:
						case KW_TABLE:
						case KW_TABLES:
						case KW_COLUMNS:
						case KW_INDEX:
						case KW_INDEXES:
						case KW_REBUILD:
						case KW_FUNCTIONS:
						case KW_SHOW:
						case KW_MSCK:
						case KW_REPAIR:
						case KW_DIRECTORY:
						case KW_LOCAL:
						case KW_TRANSFORM:
						case KW_USING:
						case KW_CLUSTER:
						case KW_DISTRIBUTE:
						case KW_SORT:
						case KW_UNION:
						case KW_LOAD:
						case KW_UNLOAD:
						case KW_EXPORT:
						case KW_IMPORT:
						case KW_REPLICATION:
						case KW_METADATA:
						case KW_DATA:
						case KW_INPATH:
						case KW_IS:
						case KW_NULL:
						case KW_CREATE:
						case KW_EXTERNAL:
						case KW_ALTER:
						case KW_CHANGE:
						case KW_COLUMN:
						case KW_FIRST:
						case KW_LAST:
						case KW_NULLS:
						case KW_AFTER:
						case KW_DESCRIBE:
						case KW_DROP:
						case KW_RENAME:
						case KW_IGNORE:
						case KW_PROTECTION:
						case KW_TO:
						case KW_COMMENT:
						case KW_BOOLEAN:
						case KW_TINYINT:
						case KW_SMALLINT:
						case KW_INT:
						case KW_BIGINT:
						case KW_FLOAT:
						case KW_DOUBLE:
						case KW_DATE:
						case KW_DATETIME:
						case KW_TIMESTAMP:
						case KW_INTERVAL:
						case KW_DECIMAL:
						case KW_STRING:
						case KW_CHAR:
						case KW_VARCHAR:
						case KW_ARRAY:
						case KW_STRUCT:
						case KW_MAP:
						case KW_UNIONTYPE:
						case KW_REDUCE:
						case KW_PARTITIONED:
						case KW_CLUSTERED:
						case KW_SORTED:
						case KW_INTO:
						case KW_BUCKETS:
						case KW_ROW:
						case KW_ROWS:
						case KW_FORMAT:
						case KW_DELIMITED:
						case KW_FIELDS:
						case KW_TERMINATED:
						case KW_ESCAPED:
						case KW_COLLECTION:
						case KW_ITEMS:
						case KW_KEYS:
						case KW_KEY_TYPE:
						case KW_LINES:
						case KW_STORED:
						case KW_FILEFORMAT:
						case KW_INPUTFORMAT:
						case KW_OUTPUTFORMAT:
						case KW_INPUTDRIVER:
						case KW_OUTPUTDRIVER:
						case KW_OFFLINE:
						case KW_ENABLE:
						case KW_DISABLE:
						case KW_READONLY:
						case KW_NO_DROP:
						case KW_LOCATION:
						case KW_TABLESAMPLE:
						case KW_BUCKET:
						case KW_OUT:
						case KW_OF:
						case KW_PERCENT:
						case KW_CAST:
						case KW_ADD:
						case KW_REPLACE:
						case KW_RLIKE:
						case KW_REGEXP:
						case KW_TEMPORARY:
						case KW_MACRO:
						case KW_FILE:
						case KW_JAR:
						case KW_EXPLAIN:
						case KW_EXTENDED:
						case KW_FORMATTED:
						case KW_PRETTY:
						case KW_DEPENDENCY:
						case KW_LOGICAL:
						case KW_SERDE:
						case KW_WITH:
						case KW_DEFERRED:
						case KW_SERDEPROPERTIES:
						case KW_DBPROPERTIES:
						case KW_LIMIT:
						case KW_OFFSET:
						case KW_SET:
						case KW_UNSET:
						case KW_TBLPROPERTIES:
						case KW_IDXPROPERTIES:
						case KW_VALUE_TYPE:
						case KW_ELEM_TYPE:
						case KW_DEFINED:
						case KW_CASE:
						case KW_WHEN:
						case KW_THEN:
						case KW_ELSE:
						case KW_END:
						case KW_MAPJOIN:
						case KW_SKEWJOIN:
						case KW_DYNAMICFILTER:
						case KW_STREAMTABLE:
						case KW_HOLD_DDLTIME:
						case KW_CLUSTERSTATUS:
						case KW_UTC:
						case KW_UTCTIMESTAMP:
						case KW_LONG:
						case KW_DELETE:
						case KW_PLUS:
						case KW_MINUS:
						case KW_FETCH:
						case KW_INTERSECT:
						case KW_VIEW:
						case KW_IN:
						case KW_DATABASE:
						case KW_DATABASES:
						case KW_MATERIALIZED:
						case KW_SCHEMA:
						case KW_SCHEMAS:
						case KW_GRANT:
						case KW_REVOKE:
						case KW_SSL:
						case KW_UNDO:
						case KW_LOCK:
						case KW_LOCKS:
						case KW_UNLOCK:
						case KW_SHARED:
						case KW_EXCLUSIVE:
						case KW_PROCEDURE:
						case KW_UNSIGNED:
						case KW_WHILE:
						case KW_READ:
						case KW_READS:
						case KW_PURGE:
						case KW_RANGE:
						case KW_ANALYZE:
						case KW_BEFORE:
						case KW_BETWEEN:
						case KW_BOTH:
						case KW_BINARY:
						case KW_CROSS:
						case KW_CONTINUE:
						case KW_CURSOR:
						case KW_TRIGGER:
						case KW_RECORDREADER:
						case KW_RECORDWRITER:
						case KW_SEMI:
						case KW_ANTI:
						case KW_LATERAL:
						case KW_TOUCH:
						case KW_ARCHIVE:
						case KW_UNARCHIVE:
						case KW_COMPUTE:
						case KW_STATISTICS:
						case KW_NULL_VALUE:
						case KW_DISTINCT_VALUE:
						case KW_TABLE_COUNT:
						case KW_COLUMN_SUM:
						case KW_COLUMN_MAX:
						case KW_COLUMN_MIN:
						case KW_EXPRESSION_CONDITION:
						case KW_USE:
						case KW_OPTION:
						case KW_CONCATENATE:
						case KW_SHOW_DATABASE:
						case KW_UPDATE:
						case KW_MATCHED:
						case KW_RESTRICT:
						case KW_CASCADE:
						case KW_SKEWED:
						case KW_ROLLUP:
						case KW_CUBE:
						case KW_DIRECTORIES:
						case KW_FOR:
						case KW_WINDOW:
						case KW_UNBOUNDED:
						case KW_PRECEDING:
						case KW_FOLLOWING:
						case KW_CURRENT:
						case KW_LOCALTIMESTAMP:
						case KW_CURRENT_DATE:
						case KW_CURRENT_TIMESTAMP:
						case KW_LESS:
						case KW_MORE:
						case KW_OVER:
						case KW_GROUPING:
						case KW_SETS:
						case KW_TRUNCATE:
						case KW_NOSCAN:
						case KW_PARTIALSCAN:
						case KW_USER:
						case KW_ROLE:
						case KW_ROLES:
						case KW_INNER:
						case KW_EXCHANGE:
						case KW_URI:
						case KW_SERVER:
						case KW_ADMIN:
						case KW_OWNER:
						case KW_PRINCIPALS:
						case KW_COMPACT:
						case KW_COMPACTIONS:
						case KW_TRANSACTIONS:
						case KW_REWRITE:
						case KW_AUTHORIZATION:
						case KW_CONF:
						case KW_VALUES:
						case KW_RELOAD:
						case KW_YEAR:
						case KW_MONTH:
						case KW_DAY:
						case KW_HOUR:
						case KW_MINUTE:
						case KW_SECOND:
						case KW_YEARS:
						case KW_MONTHS:
						case KW_DAYS:
						case KW_HOURS:
						case KW_MINUTES:
						case KW_SECONDS:
						case KW_UDFPROPERTIES:
						case KW_EXCLUDE:
						case KW_TIES:
						case KW_NO:
						case KW_OTHERS:
						case KW_BEGIN:
						case KW_RETURNS:
						case KW_SQL:
						case KW_LOOP:
						case KW_NEW:
						case KW_LIFECYCLE:
						case KW_REMOVE:
						case KW_GRANTS:
						case KW_ACL:
						case KW_TYPE:
						case KW_LIST:
						case KW_USERS:
						case KW_WHOAMI:
						case KW_TRUSTEDPROJECTS:
						case KW_TRUSTEDPROJECT:
						case KW_SECURITYCONFIGURATION:
						case KW_PRIVILEGES:
						case KW_PROJECT:
						case KW_PROJECTS:
						case KW_LABEL:
						case KW_ALLOW:
						case KW_DISALLOW:
						case KW_PACKAGE:
						case KW_PACKAGES:
						case KW_INSTALL:
						case KW_UNINSTALL:
						case KW_P:
						case KW_JOB:
						case KW_JOBS:
						case KW_ACCOUNTPROVIDERS:
						case KW_RESOURCES:
						case KW_FLAGS:
						case KW_COUNT:
						case KW_STATISTIC:
						case KW_STATISTIC_LIST:
						case KW_GET:
						case KW_PUT:
						case KW_POLICY:
						case KW_PROJECTPROTECTION:
						case KW_EXCEPTION:
						case KW_CLEAR:
						case KW_EXPIRED:
						case KW_EXP:
						case KW_ACCOUNTPROVIDER:
						case KW_SUPER:
						case KW_VOLUMEFILE:
						case KW_VOLUMEARCHIVE:
						case KW_OFFLINEMODEL:
						case KW_PY:
						case KW_RESOURCE:
						case KW_KILL:
						case KW_STATUS:
						case KW_SETPROJECT:
						case KW_MERGE:
						case KW_SMALLFILES:
						case KW_PARTITIONPROPERTIES:
						case KW_EXSTORE:
						case KW_CHANGELOGS:
						case KW_REDO:
						case KW_CHANGEOWNER:
						case KW_RECYCLEBIN:
						case KW_PRIVILEGEPROPERTIES:
						case KW_CACHE:
						case KW_CACHEPROPERTIES:
						case KW_VARIABLES:
						case KW_EXCEPT:
						case KW_SELECTIVITY:
						case KW_EXTRACT:
						case KW_SUBSTRING:
						case KW_DEFAULT:
						case KW_ANY:
						case KW_NATURAL:
						case KW_CONSTRAINT:
						case KW_PRIMARY:
						case KW_KEY:
						case KW_VALIDATE:
						case KW_NOVALIDATE:
						case KW_RELY:
						case KW_NORELY:
						case KW_CLONE:
						case KW_HISTORY:
						case KW_RESTORE:
						case KW_LSN:
						case KW_WITHIN:
						case KW_FILTER:
						case KW_TENANT:
						case KW_SHARDS:
						case KW_HUBLIFECYCLE:
						case KW_HUBTABLE:
						case KW_OUTPUT:
						case KW_CODE_BEGIN:
						case KW_CODE_END:
						case KW_MODEL:
						case KW_PROPERTIES:
						case ByteLengthLiteral:
						case Identifier:
							{
							setState(1985);
							allIdentifiers();
							}
							break;
						case Number:
							{
							setState(1986);
							match(Number);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(1993);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
				}
				}
			}

			setState(2006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(1996);
				match(COLON);
				setState(2002); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2002);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case KW_TRUE:
						case KW_FALSE:
						case KW_ALL:
						case KW_NONE:
						case KW_LIKE:
						case KW_EXISTS:
						case KW_ASC:
						case KW_DESC:
						case KW_ORDER:
						case KW_ZORDER:
						case KW_GROUP:
						case KW_GROUPS:
						case KW_BY:
						case KW_AS:
						case KW_INSERT:
						case KW_OVERWRITE:
						case KW_OUTER:
						case KW_UNIQUEJOIN:
						case KW_LEFT:
						case KW_RIGHT:
						case KW_FULL:
						case KW_PARTITION:
						case KW_PARTITIONS:
						case KW_TABLE:
						case KW_TABLES:
						case KW_COLUMNS:
						case KW_INDEX:
						case KW_INDEXES:
						case KW_REBUILD:
						case KW_FUNCTIONS:
						case KW_SHOW:
						case KW_MSCK:
						case KW_REPAIR:
						case KW_DIRECTORY:
						case KW_LOCAL:
						case KW_TRANSFORM:
						case KW_USING:
						case KW_CLUSTER:
						case KW_DISTRIBUTE:
						case KW_SORT:
						case KW_UNION:
						case KW_LOAD:
						case KW_UNLOAD:
						case KW_EXPORT:
						case KW_IMPORT:
						case KW_REPLICATION:
						case KW_METADATA:
						case KW_DATA:
						case KW_INPATH:
						case KW_IS:
						case KW_NULL:
						case KW_CREATE:
						case KW_EXTERNAL:
						case KW_ALTER:
						case KW_CHANGE:
						case KW_FIRST:
						case KW_LAST:
						case KW_NULLS:
						case KW_AFTER:
						case KW_DESCRIBE:
						case KW_DROP:
						case KW_RENAME:
						case KW_IGNORE:
						case KW_PROTECTION:
						case KW_TO:
						case KW_COMMENT:
						case KW_BOOLEAN:
						case KW_TINYINT:
						case KW_SMALLINT:
						case KW_INT:
						case KW_BIGINT:
						case KW_FLOAT:
						case KW_DOUBLE:
						case KW_DATE:
						case KW_DATETIME:
						case KW_TIMESTAMP:
						case KW_INTERVAL:
						case KW_DECIMAL:
						case KW_STRING:
						case KW_ARRAY:
						case KW_STRUCT:
						case KW_MAP:
						case KW_UNIONTYPE:
						case KW_REDUCE:
						case KW_PARTITIONED:
						case KW_CLUSTERED:
						case KW_SORTED:
						case KW_INTO:
						case KW_BUCKETS:
						case KW_ROW:
						case KW_ROWS:
						case KW_FORMAT:
						case KW_DELIMITED:
						case KW_FIELDS:
						case KW_TERMINATED:
						case KW_ESCAPED:
						case KW_COLLECTION:
						case KW_ITEMS:
						case KW_KEYS:
						case KW_KEY_TYPE:
						case KW_LINES:
						case KW_STORED:
						case KW_FILEFORMAT:
						case KW_INPUTFORMAT:
						case KW_OUTPUTFORMAT:
						case KW_INPUTDRIVER:
						case KW_OUTPUTDRIVER:
						case KW_OFFLINE:
						case KW_ENABLE:
						case KW_DISABLE:
						case KW_READONLY:
						case KW_NO_DROP:
						case KW_LOCATION:
						case KW_TABLESAMPLE:
						case KW_BUCKET:
						case KW_OUT:
						case KW_OF:
						case KW_PERCENT:
						case KW_ADD:
						case KW_REPLACE:
						case KW_RLIKE:
						case KW_REGEXP:
						case KW_TEMPORARY:
						case KW_MACRO:
						case KW_FILE:
						case KW_JAR:
						case KW_EXPLAIN:
						case KW_FORMATTED:
						case KW_PRETTY:
						case KW_DEPENDENCY:
						case KW_LOGICAL:
						case KW_SERDE:
						case KW_WITH:
						case KW_DEFERRED:
						case KW_SERDEPROPERTIES:
						case KW_DBPROPERTIES:
						case KW_LIMIT:
						case KW_OFFSET:
						case KW_SET:
						case KW_UNSET:
						case KW_TBLPROPERTIES:
						case KW_IDXPROPERTIES:
						case KW_VALUE_TYPE:
						case KW_ELEM_TYPE:
						case KW_DEFINED:
						case KW_MAPJOIN:
						case KW_SKEWJOIN:
						case KW_DYNAMICFILTER:
						case KW_STREAMTABLE:
						case KW_HOLD_DDLTIME:
						case KW_CLUSTERSTATUS:
						case KW_UTC:
						case KW_UTCTIMESTAMP:
						case KW_LONG:
						case KW_DELETE:
						case KW_PLUS:
						case KW_MINUS:
						case KW_FETCH:
						case KW_INTERSECT:
						case KW_VIEW:
						case KW_IN:
						case KW_DATABASE:
						case KW_DATABASES:
						case KW_MATERIALIZED:
						case KW_SCHEMA:
						case KW_SCHEMAS:
						case KW_GRANT:
						case KW_REVOKE:
						case KW_SSL:
						case KW_UNDO:
						case KW_LOCK:
						case KW_LOCKS:
						case KW_UNLOCK:
						case KW_SHARED:
						case KW_EXCLUSIVE:
						case KW_PROCEDURE:
						case KW_UNSIGNED:
						case KW_WHILE:
						case KW_READ:
						case KW_READS:
						case KW_PURGE:
						case KW_RANGE:
						case KW_ANALYZE:
						case KW_BEFORE:
						case KW_BETWEEN:
						case KW_BOTH:
						case KW_BINARY:
						case KW_CONTINUE:
						case KW_CURSOR:
						case KW_TRIGGER:
						case KW_RECORDREADER:
						case KW_RECORDWRITER:
						case KW_SEMI:
						case KW_ANTI:
						case KW_LATERAL:
						case KW_TOUCH:
						case KW_ARCHIVE:
						case KW_UNARCHIVE:
						case KW_COMPUTE:
						case KW_STATISTICS:
						case KW_NULL_VALUE:
						case KW_DISTINCT_VALUE:
						case KW_TABLE_COUNT:
						case KW_COLUMN_SUM:
						case KW_COLUMN_MAX:
						case KW_COLUMN_MIN:
						case KW_EXPRESSION_CONDITION:
						case KW_USE:
						case KW_OPTION:
						case KW_CONCATENATE:
						case KW_SHOW_DATABASE:
						case KW_UPDATE:
						case KW_MATCHED:
						case KW_RESTRICT:
						case KW_CASCADE:
						case KW_SKEWED:
						case KW_ROLLUP:
						case KW_CUBE:
						case KW_DIRECTORIES:
						case KW_FOR:
						case KW_WINDOW:
						case KW_UNBOUNDED:
						case KW_PRECEDING:
						case KW_FOLLOWING:
						case KW_LOCALTIMESTAMP:
						case KW_CURRENT_DATE:
						case KW_CURRENT_TIMESTAMP:
						case KW_LESS:
						case KW_MORE:
						case KW_OVER:
						case KW_GROUPING:
						case KW_SETS:
						case KW_TRUNCATE:
						case KW_NOSCAN:
						case KW_PARTIALSCAN:
						case KW_USER:
						case KW_ROLE:
						case KW_ROLES:
						case KW_INNER:
						case KW_EXCHANGE:
						case KW_URI:
						case KW_SERVER:
						case KW_ADMIN:
						case KW_OWNER:
						case KW_PRINCIPALS:
						case KW_COMPACT:
						case KW_COMPACTIONS:
						case KW_TRANSACTIONS:
						case KW_REWRITE:
						case KW_AUTHORIZATION:
						case KW_CONF:
						case KW_VALUES:
						case KW_RELOAD:
						case KW_YEAR:
						case KW_MONTH:
						case KW_DAY:
						case KW_HOUR:
						case KW_MINUTE:
						case KW_SECOND:
						case KW_YEARS:
						case KW_MONTHS:
						case KW_DAYS:
						case KW_HOURS:
						case KW_MINUTES:
						case KW_SECONDS:
						case KW_UDFPROPERTIES:
						case KW_EXCLUDE:
						case KW_TIES:
						case KW_NO:
						case KW_OTHERS:
						case KW_BEGIN:
						case KW_RETURNS:
						case KW_SQL:
						case KW_LOOP:
						case KW_NEW:
						case KW_LIFECYCLE:
						case KW_REMOVE:
						case KW_GRANTS:
						case KW_ACL:
						case KW_TYPE:
						case KW_LIST:
						case KW_USERS:
						case KW_WHOAMI:
						case KW_TRUSTEDPROJECTS:
						case KW_TRUSTEDPROJECT:
						case KW_SECURITYCONFIGURATION:
						case KW_PRIVILEGES:
						case KW_PROJECT:
						case KW_PROJECTS:
						case KW_LABEL:
						case KW_ALLOW:
						case KW_DISALLOW:
						case KW_PACKAGE:
						case KW_PACKAGES:
						case KW_INSTALL:
						case KW_UNINSTALL:
						case KW_P:
						case KW_JOB:
						case KW_JOBS:
						case KW_ACCOUNTPROVIDERS:
						case KW_RESOURCES:
						case KW_FLAGS:
						case KW_COUNT:
						case KW_STATISTIC:
						case KW_STATISTIC_LIST:
						case KW_GET:
						case KW_PUT:
						case KW_POLICY:
						case KW_PROJECTPROTECTION:
						case KW_EXCEPTION:
						case KW_CLEAR:
						case KW_EXPIRED:
						case KW_EXP:
						case KW_ACCOUNTPROVIDER:
						case KW_SUPER:
						case KW_VOLUMEFILE:
						case KW_VOLUMEARCHIVE:
						case KW_OFFLINEMODEL:
						case KW_PY:
						case KW_RESOURCE:
						case KW_KILL:
						case KW_STATUS:
						case KW_SETPROJECT:
						case KW_MERGE:
						case KW_SMALLFILES:
						case KW_PARTITIONPROPERTIES:
						case KW_EXSTORE:
						case KW_CHANGELOGS:
						case KW_REDO:
						case KW_CHANGEOWNER:
						case KW_RECYCLEBIN:
						case KW_PRIVILEGEPROPERTIES:
						case KW_CACHE:
						case KW_CACHEPROPERTIES:
						case KW_VARIABLES:
						case KW_EXCEPT:
						case KW_SELECTIVITY:
						case KW_EXTRACT:
						case KW_SUBSTRING:
						case KW_DEFAULT:
						case KW_ANY:
						case KW_NATURAL:
						case KW_CONSTRAINT:
						case KW_PRIMARY:
						case KW_KEY:
						case KW_VALIDATE:
						case KW_NOVALIDATE:
						case KW_RELY:
						case KW_NORELY:
						case KW_CLONE:
						case KW_HISTORY:
						case KW_RESTORE:
						case KW_LSN:
						case KW_WITHIN:
						case KW_FILTER:
						case KW_TENANT:
						case KW_SHARDS:
						case KW_HUBLIFECYCLE:
						case KW_HUBTABLE:
						case KW_OUTPUT:
						case KW_CODE_BEGIN:
						case KW_CODE_END:
						case KW_MODEL:
						case KW_PROPERTIES:
						case ByteLengthLiteral:
						case Identifier:
							{
							setState(1997);
							identifier();
							}
							break;
						case Number:
							{
							setState(1998);
							match(Number);
							}
							break;
						case DOT:
							{
							setState(1999);
							match(DOT);
							}
							break;
						case MINUS:
							{
							setState(2000);
							match(MINUS);
							}
							break;
						case AT:
							{
							setState(2001);
							match(AT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2004); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserRoleCommentsContext extends ParserRuleContext {
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(CommandParser.KW_COMMENT, 0); }
		public OptionsContext options() {
			return getRuleContext(OptionsContext.class,0);
		}
		public UserRoleCommentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userRoleComments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUserRoleComments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUserRoleComments(this);
		}
	}

	public final UserRoleCommentsContext userRoleComments() throws RecognitionException {
		UserRoleCommentsContext _localctx = new UserRoleCommentsContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_userRoleComments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2010);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_COMMENT:
				{
				setState(2008);
				match(KW_COMMENT);
				}
				break;
			case MINUS:
				{
				setState(2009);
				options();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2012);
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountProviderContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AccountProviderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountProvider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAccountProvider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAccountProvider(this);
		}
	}

	public final AccountProviderContext accountProvider() throws RecognitionException {
		AccountProviderContext _localctx = new AccountProviderContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_accountProvider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2014);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeObjectNameContext extends ParserRuleContext {
		public List<TerminalNode> STAR() { return getTokens(CommandParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CommandParser.STAR, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> Number() { return getTokens(CommandParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(CommandParser.Number, i);
		}
		public List<TerminalNode> DOT() { return getTokens(CommandParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CommandParser.DOT, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(CommandParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CommandParser.MINUS, i);
		}
		public List<TerminalNode> AT() { return getTokens(CommandParser.AT); }
		public TerminalNode AT(int i) {
			return getToken(CommandParser.AT, i);
		}
		public List<TerminalNode> SHARP() { return getTokens(CommandParser.SHARP); }
		public TerminalNode SHARP(int i) {
			return getToken(CommandParser.SHARP, i);
		}
		public List<TerminalNode> DOLLAR() { return getTokens(CommandParser.DOLLAR); }
		public TerminalNode DOLLAR(int i) {
			return getToken(CommandParser.DOLLAR, i);
		}
		public PrivilegeObjectNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeObjectName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrivilegeObjectName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrivilegeObjectName(this);
		}
	}

	public final PrivilegeObjectNameContext privilegeObjectName() throws RecognitionException {
		PrivilegeObjectNameContext _localctx = new PrivilegeObjectNameContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_privilegeObjectName);
		int _la;
		try {
			int _alt;
			setState(2036);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
				case 1:
					{
					{
					setState(2017);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STAR) {
						{
						setState(2016);
						match(STAR);
						}
					}

					setState(2019);
					identifier();
					}
					}
					break;
				case 2:
					{
					setState(2020);
					match(STAR);
					}
					break;
				}
				setState(2029);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,197,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2023);
						_la = _input.LA(1);
						if ( !(((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (DOT - 407)) | (1L << (MINUS - 407)) | (1L << (STAR - 407)) | (1L << (DOLLAR - 407)) | (1L << (SHARP - 407)) | (1L << (Number - 407)) | (1L << (AT - 407)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2025);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
						case 1:
							{
							setState(2024);
							identifier();
							}
							break;
						}
						}
						} 
					}
					setState(2031);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,197,_ctx);
				}
				setState(2033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(2032);
					match(STAR);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2035);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeObjectTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode KW_FUNCTION() { return getToken(CommandParser.KW_FUNCTION, 0); }
		public TerminalNode KW_DATABASE() { return getToken(CommandParser.KW_DATABASE, 0); }
		public PrivilegeObjectTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeObjectType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrivilegeObjectType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrivilegeObjectType(this);
		}
	}

	public final PrivilegeObjectTypeContext privilegeObjectType() throws RecognitionException {
		PrivilegeObjectTypeContext _localctx = new PrivilegeObjectTypeContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_privilegeObjectType);
		try {
			setState(2041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2038);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2039);
				match(KW_FUNCTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2040);
				match(KW_DATABASE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRoleName(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_roleName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2043);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPackageName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPackageName(this);
		}
	}

	public final PackageNameContext packageName() throws RecognitionException {
		PackageNameContext _localctx = new PackageNameContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_packageName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2045);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackageNameWithProjectContext extends ParserRuleContext {
		public IdentifierContext proj;
		public IdentifierContext name;
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public PackageNameWithProjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packageNameWithProject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPackageNameWithProject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPackageNameWithProject(this);
		}
	}

	public final PackageNameWithProjectContext packageNameWithProject() throws RecognitionException {
		PackageNameWithProjectContext _localctx = new PackageNameWithProjectContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_packageNameWithProject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				setState(2047);
				((PackageNameWithProjectContext)_localctx).proj = identifier();
				setState(2048);
				match(DOT);
				}
				break;
			}
			setState(2052);
			((PackageNameWithProjectContext)_localctx).name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrincipalSpecificationContext extends ParserRuleContext {
		public List<PrincipalNameContext> principalName() {
			return getRuleContexts(PrincipalNameContext.class);
		}
		public PrincipalNameContext principalName(int i) {
			return getRuleContext(PrincipalNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public PrincipalSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principalSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrincipalSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrincipalSpecification(this);
		}
	}

	public final PrincipalSpecificationContext principalSpecification() throws RecognitionException {
		PrincipalSpecificationContext _localctx = new PrincipalSpecificationContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_principalSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2054);
			principalName();
			setState(2059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2055);
				match(COMMA);
				setState(2056);
				principalName();
				}
				}
				setState(2061);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrincipalNameContext extends ParserRuleContext {
		public Token t;
		public PrincipalIdentifierContext principalIdentifier() {
			return getRuleContext(PrincipalIdentifierContext.class,0);
		}
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode KW_USER() { return getToken(CommandParser.KW_USER, 0); }
		public TerminalNode KW_TENANT() { return getToken(CommandParser.KW_TENANT, 0); }
		public TerminalNode KW_GROUP() { return getToken(CommandParser.KW_GROUP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public PrincipalNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principalName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrincipalName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrincipalName(this);
		}
	}

	public final PrincipalNameContext principalName() throws RecognitionException {
		PrincipalNameContext _localctx = new PrincipalNameContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_principalName);
		int _la;
		try {
			setState(2087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(2062);
					((PrincipalNameContext)_localctx).t = match(KW_USER);
					}
					break;
				}
				setState(2067);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
				case 1:
					{
					setState(2065);
					principalIdentifier();
					}
					break;
				case 2:
					{
					setState(2066);
					user();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TENANT) {
					{
					setState(2069);
					match(KW_TENANT);
					}
				}

				setState(2072);
				((PrincipalNameContext)_localctx).t = match(KW_USER);
				setState(2075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(2073);
					principalIdentifier();
					}
					break;
				case 2:
					{
					setState(2074);
					user();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TENANT) {
					{
					setState(2077);
					match(KW_TENANT);
					}
				}

				setState(2080);
				((PrincipalNameContext)_localctx).t = match(KW_GROUP);
				setState(2081);
				principalIdentifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TENANT) {
					{
					setState(2082);
					match(KW_TENANT);
					}
				}

				setState(2085);
				((PrincipalNameContext)_localctx).t = match(KW_ROLE);
				setState(2086);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribePackageContext extends ParserRuleContext {
		public ProjectNameContext proj;
		public PackageNameContext pkgName;
		public PrivilegeObjectContext obj;
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public TerminalNode KW_PACKAGE() { return getToken(CommandParser.KW_PACKAGE, 0); }
		public TerminalNode KW_ITEMS() { return getToken(CommandParser.KW_ITEMS, 0); }
		public PackageNameContext packageName() {
			return getRuleContext(PackageNameContext.class,0);
		}
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public PrivilegePropertiesContext privilegeProperties() {
			return getRuleContext(PrivilegePropertiesContext.class,0);
		}
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public DescribePackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describePackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescribePackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescribePackage(this);
		}
	}

	public final DescribePackageContext describePackage() throws RecognitionException {
		DescribePackageContext _localctx = new DescribePackageContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_describePackage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2089);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				setState(2091);
				match(KW_PACKAGE);
				setState(2095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					setState(2092);
					((DescribePackageContext)_localctx).proj = projectName();
					setState(2093);
					match(DOT);
					}
					break;
				}
				setState(2097);
				((DescribePackageContext)_localctx).pkgName = packageName();
				setState(2099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_PRIVILEGEPROPERTIES) {
					{
					setState(2098);
					privilegeProperties();
					}
				}

				}
				break;
			case 3:
				{
				setState(2101);
				match(KW_PACKAGE);
				setState(2102);
				match(KW_ITEMS);
				setState(2103);
				((DescribePackageContext)_localctx).obj = privilegeObject();
				setState(2106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM) {
					{
					setState(2104);
					match(KW_FROM);
					setState(2105);
					((DescribePackageContext)_localctx).proj = projectName();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrincipalIdentifierContext extends ParserRuleContext {
		public IdentifierContext id;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PrincipalIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principalIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrincipalIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrincipalIdentifier(this);
		}
	}

	public final PrincipalIdentifierContext principalIdentifier() throws RecognitionException {
		PrincipalIdentifierContext _localctx = new PrincipalIdentifierContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_principalIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2110);
			((PrincipalIdentifierContext)_localctx).id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public ColumnNameListContext cols;
		public PrivilegeTypeContext privilegeType() {
			return getRuleContext(PrivilegeTypeContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrivilege(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_privilege);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			privilegeType();
			setState(2117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(2113);
				match(LPAREN);
				setState(2114);
				((PrivilegeContext)_localctx).cols = columnNameList();
				setState(2115);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode KW_SELECT() { return getToken(CommandParser.KW_SELECT, 0); }
		public PrivilegeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrivilegeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrivilegeType(this);
		}
	}

	public final PrivilegeTypeContext privilegeType() throws RecognitionException {
		PrivilegeTypeContext _localctx = new PrivilegeTypeContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_privilegeType);
		try {
			setState(2121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(2119);
				identifier();
				}
				break;
			case KW_SELECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2120);
				match(KW_SELECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeObjectContext extends ParserRuleContext {
		public ColumnNameListContext cols;
		public PartitionSpecContext parts;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public PrivilegeObjectTypeContext privilegeObjectType() {
			return getRuleContext(PrivilegeObjectTypeContext.class,0);
		}
		public PrivilegeObjectNameContext privilegeObjectName() {
			return getRuleContext(PrivilegeObjectNameContext.class,0);
		}
		public PrivilegeObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrivilegeObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrivilegeObject(this);
		}
	}

	public final PrivilegeObjectContext privilegeObject() throws RecognitionException {
		PrivilegeObjectContext _localctx = new PrivilegeObjectContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_privilegeObject);
		int _la;
		try {
			setState(2139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2124);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(2123);
					match(KW_TABLE);
					}
					break;
				}
				setState(2126);
				tableName();
				setState(2131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2127);
					match(LPAREN);
					setState(2128);
					((PrivilegeObjectContext)_localctx).cols = columnNameList();
					setState(2129);
					match(RPAREN);
					}
				}

				setState(2134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_PARTITION) {
					{
					setState(2133);
					((PrivilegeObjectContext)_localctx).parts = partitionSpec();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2136);
				privilegeObjectType();
				setState(2137);
				privilegeObjectName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilePathContext extends ParserRuleContext {
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DIVIDE() { return getTokens(CommandParser.DIVIDE); }
		public TerminalNode DIVIDE(int i) {
			return getToken(CommandParser.DIVIDE, i);
		}
		public List<TerminalNode> COLON() { return getTokens(CommandParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(CommandParser.COLON, i);
		}
		public List<TerminalNode> ESCAPE() { return getTokens(CommandParser.ESCAPE); }
		public TerminalNode ESCAPE(int i) {
			return getToken(CommandParser.ESCAPE, i);
		}
		public List<TerminalNode> DOT() { return getTokens(CommandParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CommandParser.DOT, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(CommandParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CommandParser.MINUS, i);
		}
		public FilePathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filePath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFilePath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFilePath(this);
		}
	}

	public final FilePathContext filePath() throws RecognitionException {
		FilePathContext _localctx = new FilePathContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_filePath);
		int _la;
		try {
			setState(2157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringLiteral:
			case DoubleQuoteStringLiteral:
				enterOuterAlt(_localctx, 1);
				{
				setState(2141);
				stringLiteral();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case DIVIDE:
			case ByteLengthLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(2143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DIVIDE) {
					{
					setState(2142);
					match(DIVIDE);
					}
				}

				setState(2145);
				identifier();
				setState(2154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (DOT - 407)) | (1L << (COLON - 407)) | (1L << (DIVIDE - 407)) | (1L << (MINUS - 407)) | (1L << (ESCAPE - 407)))) != 0)) {
					{
					{
					setState(2147); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2146);
						_la = _input.LA(1);
						if ( !(((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (DOT - 407)) | (1L << (COLON - 407)) | (1L << (DIVIDE - 407)) | (1L << (MINUS - 407)) | (1L << (ESCAPE - 407)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(2149); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (DOT - 407)) | (1L << (COLON - 407)) | (1L << (DIVIDE - 407)) | (1L << (MINUS - 407)) | (1L << (ESCAPE - 407)))) != 0) );
					setState(2151);
					identifier();
					}
					}
					setState(2156);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdminOptionForContext extends ParserRuleContext {
		public TerminalNode KW_ADMIN() { return getToken(CommandParser.KW_ADMIN, 0); }
		public TerminalNode KW_OPTION() { return getToken(CommandParser.KW_OPTION, 0); }
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public AdminOptionForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminOptionFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAdminOptionFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAdminOptionFor(this);
		}
	}

	public final AdminOptionForContext adminOptionFor() throws RecognitionException {
		AdminOptionForContext _localctx = new AdminOptionForContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_adminOptionFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			match(KW_ADMIN);
			setState(2160);
			match(KW_OPTION);
			setState(2161);
			match(KW_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithAdminOptionContext extends ParserRuleContext {
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public TerminalNode KW_ADMIN() { return getToken(CommandParser.KW_ADMIN, 0); }
		public TerminalNode KW_OPTION() { return getToken(CommandParser.KW_OPTION, 0); }
		public WithAdminOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withAdminOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWithAdminOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWithAdminOption(this);
		}
	}

	public final WithAdminOptionContext withAdminOption() throws RecognitionException {
		WithAdminOptionContext _localctx = new WithAdminOptionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_withAdminOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163);
			match(KW_WITH);
			setState(2164);
			match(KW_ADMIN);
			setState(2165);
			match(KW_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithGrantOptionContext extends ParserRuleContext {
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public TerminalNode KW_OPTION() { return getToken(CommandParser.KW_OPTION, 0); }
		public WithGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWithGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWithGrantOption(this);
		}
	}

	public final WithGrantOptionContext withGrantOption() throws RecognitionException {
		WithGrantOptionContext _localctx = new WithGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_withGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2167);
			match(KW_WITH);
			setState(2168);
			match(KW_GRANT);
			setState(2169);
			match(KW_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionForContext extends ParserRuleContext {
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public TerminalNode KW_OPTION() { return getToken(CommandParser.KW_OPTION, 0); }
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public GrantOptionForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptionFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGrantOptionFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGrantOptionFor(this);
		}
	}

	public final GrantOptionForContext grantOptionFor() throws RecognitionException {
		GrantOptionForContext _localctx = new GrantOptionForContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_grantOptionFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2171);
			match(KW_GRANT);
			setState(2172);
			match(KW_OPTION);
			setState(2173);
			match(KW_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public TerminalNode Number() { return getToken(CommandParser.Number, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitLabel(this);
		}
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2175);
			match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameListContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ColumnNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameList(this);
		}
	}

	public final ColumnNameListContext columnNameList() throws RecognitionException {
		ColumnNameListContext _localctx = new ColumnNameListContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_columnNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2177);
			columnName();
			setState(2182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2178);
				match(COMMA);
				setState(2179);
				columnName();
				}
				}
				setState(2184);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnName(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2185);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllIdentifiersContext extends ParserRuleContext {
		public Token id;
		public NonReservedContext nonReservedId;
		public Sql11ReservedKeywordsUsedAsIdentifierContext sq11KeywordAsId;
		public OdpsqlNonReservedContext odpsNonReservedId;
		public ReservedContext reservedId;
		public TerminalNode Identifier() { return getToken(CommandParser.Identifier, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public Sql11ReservedKeywordsUsedAsIdentifierContext sql11ReservedKeywordsUsedAsIdentifier() {
			return getRuleContext(Sql11ReservedKeywordsUsedAsIdentifierContext.class,0);
		}
		public OdpsqlNonReservedContext odpsqlNonReserved() {
			return getRuleContext(OdpsqlNonReservedContext.class,0);
		}
		public ReservedContext reserved() {
			return getRuleContext(ReservedContext.class,0);
		}
		public AllIdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allIdentifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAllIdentifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAllIdentifiers(this);
		}
	}

	public final AllIdentifiersContext allIdentifiers() throws RecognitionException {
		AllIdentifiersContext _localctx = new AllIdentifiersContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_allIdentifiers);
		try {
			setState(2192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2187);
				((AllIdentifiersContext)_localctx).id = match(Identifier);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2188);
				((AllIdentifiersContext)_localctx).nonReservedId = nonReserved();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2189);
				((AllIdentifiersContext)_localctx).sq11KeywordAsId = sql11ReservedKeywordsUsedAsIdentifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2190);
				((AllIdentifiersContext)_localctx).odpsNonReservedId = odpsqlNonReserved();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2191);
				((AllIdentifiersContext)_localctx).reservedId = reserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionsContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(CommandParser.MINUS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitOptions(this);
		}
	}

	public final OptionsContext options() throws RecognitionException {
		OptionsContext _localctx = new OptionsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2194);
			match(MINUS);
			setState(2195);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProjectNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projectName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterProjectName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitProjectName(this);
		}
	}

	public final ProjectNameContext projectName() throws RecognitionException {
		ProjectNameContext _localctx = new ProjectNameContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_projectName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2197);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementContext extends ParserRuleContext {
		public TableNameContext tableNamee;
		public PartitionSpecContext partition;
		public AlterTableStatementSuffixContext tableSuffix;
		public TerminalNode KW_ALTER() { return getToken(CommandParser.KW_ALTER, 0); }
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AlterTableStatementSuffixContext alterTableStatementSuffix() {
			return getRuleContext(AlterTableStatementSuffixContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAlterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAlterStatement(this);
		}
	}

	public final AlterStatementContext alterStatement() throws RecognitionException {
		AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_alterStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2199);
			match(KW_ALTER);
			setState(2200);
			match(KW_TABLE);
			setState(2201);
			((AlterStatementContext)_localctx).tableNamee = tableName();
			setState(2203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(2202);
				((AlterStatementContext)_localctx).partition = partitionSpec();
				}
			}

			setState(2205);
			((AlterStatementContext)_localctx).tableSuffix = alterTableStatementSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementSuffixContext extends ParserRuleContext {
		public AlterStatementSuffixArchiveContext archive;
		public AlterStatementSuffixMergeFilesContext merge;
		public AlterStatementSuffixCompactContext compact;
		public AlterStatementSuffixFreezeContext freeze;
		public AlterStatementSuffixRestoreContext restore;
		public AlterStatementSuffixArchiveContext alterStatementSuffixArchive() {
			return getRuleContext(AlterStatementSuffixArchiveContext.class,0);
		}
		public AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles() {
			return getRuleContext(AlterStatementSuffixMergeFilesContext.class,0);
		}
		public AlterStatementSuffixCompactContext alterStatementSuffixCompact() {
			return getRuleContext(AlterStatementSuffixCompactContext.class,0);
		}
		public AlterStatementSuffixFreezeContext alterStatementSuffixFreeze() {
			return getRuleContext(AlterStatementSuffixFreezeContext.class,0);
		}
		public AlterStatementSuffixRestoreContext alterStatementSuffixRestore() {
			return getRuleContext(AlterStatementSuffixRestoreContext.class,0);
		}
		public AlterTableStatementSuffixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatementSuffix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAlterTableStatementSuffix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAlterTableStatementSuffix(this);
		}
	}

	public final AlterTableStatementSuffixContext alterTableStatementSuffix() throws RecognitionException {
		AlterTableStatementSuffixContext _localctx = new AlterTableStatementSuffixContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_alterTableStatementSuffix);
		try {
			setState(2212);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ARCHIVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2207);
				((AlterTableStatementSuffixContext)_localctx).archive = alterStatementSuffixArchive();
				}
				break;
			case KW_MERGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2208);
				((AlterTableStatementSuffixContext)_localctx).merge = alterStatementSuffixMergeFiles();
				}
				break;
			case KW_COMPACT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2209);
				((AlterTableStatementSuffixContext)_localctx).compact = alterStatementSuffixCompact();
				}
				break;
			case KW_FREEZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2210);
				((AlterTableStatementSuffixContext)_localctx).freeze = alterStatementSuffixFreeze();
				}
				break;
			case KW_RESTORE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2211);
				((AlterTableStatementSuffixContext)_localctx).restore = alterStatementSuffixRestore();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementSuffixArchiveContext extends ParserRuleContext {
		public TerminalNode KW_ARCHIVE() { return getToken(CommandParser.KW_ARCHIVE, 0); }
		public AlterStatementSuffixArchiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixArchive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAlterStatementSuffixArchive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAlterStatementSuffixArchive(this);
		}
	}

	public final AlterStatementSuffixArchiveContext alterStatementSuffixArchive() throws RecognitionException {
		AlterStatementSuffixArchiveContext _localctx = new AlterStatementSuffixArchiveContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alterStatementSuffixArchive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2214);
			match(KW_ARCHIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementSuffixMergeFilesContext extends ParserRuleContext {
		public TerminalNode KW_MERGE() { return getToken(CommandParser.KW_MERGE, 0); }
		public TerminalNode KW_SMALLFILES() { return getToken(CommandParser.KW_SMALLFILES, 0); }
		public AlterStatementSuffixMergeFilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixMergeFiles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAlterStatementSuffixMergeFiles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAlterStatementSuffixMergeFiles(this);
		}
	}

	public final AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles() throws RecognitionException {
		AlterStatementSuffixMergeFilesContext _localctx = new AlterStatementSuffixMergeFilesContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_alterStatementSuffixMergeFiles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			match(KW_MERGE);
			setState(2217);
			match(KW_SMALLFILES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementSuffixCompactContext extends ParserRuleContext {
		public CompactTypeContext compactTypee;
		public TerminalNode KW_COMPACT() { return getToken(CommandParser.KW_COMPACT, 0); }
		public CompactTypeContext compactType() {
			return getRuleContext(CompactTypeContext.class,0);
		}
		public AlterStatementSuffixCompactContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixCompact; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAlterStatementSuffixCompact(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAlterStatementSuffixCompact(this);
		}
	}

	public final AlterStatementSuffixCompactContext alterStatementSuffixCompact() throws RecognitionException {
		AlterStatementSuffixCompactContext _localctx = new AlterStatementSuffixCompactContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alterStatementSuffixCompact);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2219);
			match(KW_COMPACT);
			setState(2220);
			((AlterStatementSuffixCompactContext)_localctx).compactTypee = compactType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompactTypeContext extends ParserRuleContext {
		public TerminalNode KW_MAJOR() { return getToken(CommandParser.KW_MAJOR, 0); }
		public TerminalNode KW_MINOR() { return getToken(CommandParser.KW_MINOR, 0); }
		public CompactTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compactType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCompactType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCompactType(this);
		}
	}

	public final CompactTypeContext compactType() throws RecognitionException {
		CompactTypeContext _localctx = new CompactTypeContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_compactType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2222);
			_la = _input.LA(1);
			if ( !(_la==KW_MAJOR || _la==KW_MINOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementSuffixFreezeContext extends ParserRuleContext {
		public TerminalNode KW_FREEZE() { return getToken(CommandParser.KW_FREEZE, 0); }
		public AlterStatementSuffixFreezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixFreeze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAlterStatementSuffixFreeze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAlterStatementSuffixFreeze(this);
		}
	}

	public final AlterStatementSuffixFreezeContext alterStatementSuffixFreeze() throws RecognitionException {
		AlterStatementSuffixFreezeContext _localctx = new AlterStatementSuffixFreezeContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alterStatementSuffixFreeze);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			match(KW_FREEZE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementSuffixRestoreContext extends ParserRuleContext {
		public TerminalNode KW_RESTORE() { return getToken(CommandParser.KW_RESTORE, 0); }
		public AlterStatementSuffixRestoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixRestore; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAlterStatementSuffixRestore(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAlterStatementSuffixRestore(this);
		}
	}

	public final AlterStatementSuffixRestoreContext alterStatementSuffixRestore() throws RecognitionException {
		AlterStatementSuffixRestoreContext _localctx = new AlterStatementSuffixRestoreContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_alterStatementSuffixRestore);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2226);
			match(KW_RESTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescStatementContext extends ParserRuleContext {
		public DescTableStatementContext descTableStatement() {
			return getRuleContext(DescTableStatementContext.class,0);
		}
		public DescTableExtendedStatementContext descTableExtendedStatement() {
			return getRuleContext(DescTableExtendedStatementContext.class,0);
		}
		public DescProjectStatementContext descProjectStatement() {
			return getRuleContext(DescProjectStatementContext.class,0);
		}
		public DescInstanceStatementContext descInstanceStatement() {
			return getRuleContext(DescInstanceStatementContext.class,0);
		}
		public DescSchemaStatementContext descSchemaStatement() {
			return getRuleContext(DescSchemaStatementContext.class,0);
		}
		public DescStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescStatement(this);
		}
	}

	public final DescStatementContext descStatement() throws RecognitionException {
		DescStatementContext _localctx = new DescStatementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_descStatement);
		try {
			setState(2233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2228);
				descTableStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2229);
				descTableExtendedStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2230);
				descProjectStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2231);
				descInstanceStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2232);
				descSchemaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescSchemaStatementContext extends ParserRuleContext {
		public SchemaNameContext schema_Name;
		public TerminalNode KW_SCHEMA() { return getToken(CommandParser.KW_SCHEMA, 0); }
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public DescSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescSchemaStatement(this);
		}
	}

	public final DescSchemaStatementContext descSchemaStatement() throws RecognitionException {
		DescSchemaStatementContext _localctx = new DescSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_descSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2235);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2236);
			match(KW_SCHEMA);
			setState(2237);
			((DescSchemaStatementContext)_localctx).schema_Name = schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescTableStatementContext extends ParserRuleContext {
		public TableNameContext table_Name;
		public PartitionSpecContext partition_Spec;
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public DescTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescTableStatement(this);
		}
	}

	public final DescTableStatementContext descTableStatement() throws RecognitionException {
		DescTableStatementContext _localctx = new DescTableStatementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_descTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2240);
			((DescTableStatementContext)_localctx).table_Name = tableName();
			setState(2242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(2241);
				((DescTableStatementContext)_localctx).partition_Spec = partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescTableExtendedStatementContext extends ParserRuleContext {
		public TableNameContext table_Name;
		public PartitionSpecContext partition_Spec;
		public TerminalNode KW_EXTENDED() { return getToken(CommandParser.KW_EXTENDED, 0); }
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public DescTableExtendedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descTableExtendedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescTableExtendedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescTableExtendedStatement(this);
		}
	}

	public final DescTableExtendedStatementContext descTableExtendedStatement() throws RecognitionException {
		DescTableExtendedStatementContext _localctx = new DescTableExtendedStatementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_descTableExtendedStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2244);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2245);
			match(KW_EXTENDED);
			setState(2246);
			((DescTableExtendedStatementContext)_localctx).table_Name = tableName();
			setState(2248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(2247);
				((DescTableExtendedStatementContext)_localctx).partition_Spec = partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescProjectStatementContext extends ParserRuleContext {
		public ProjectNameContext project_Name;
		public TerminalNode KW_PROJECT() { return getToken(CommandParser.KW_PROJECT, 0); }
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public ProjectNameContext projectName() {
			return getRuleContext(ProjectNameContext.class,0);
		}
		public TerminalNode KW_EXTENDED() { return getToken(CommandParser.KW_EXTENDED, 0); }
		public DescProjectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descProjectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescProjectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescProjectStatement(this);
		}
	}

	public final DescProjectStatementContext descProjectStatement() throws RecognitionException {
		DescProjectStatementContext _localctx = new DescProjectStatementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_descProjectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2250);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2251);
			match(KW_PROJECT);
			setState(2253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_EXTENDED) {
				{
				setState(2252);
				match(KW_EXTENDED);
				}
			}

			setState(2255);
			((DescProjectStatementContext)_localctx).project_Name = projectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescInstanceStatementContext extends ParserRuleContext {
		public InstanceIdContext instance_Id;
		public TerminalNode KW_INSTANCE() { return getToken(CommandParser.KW_INSTANCE, 0); }
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public InstanceIdContext instanceId() {
			return getRuleContext(InstanceIdContext.class,0);
		}
		public DescInstanceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descInstanceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDescInstanceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDescInstanceStatement(this);
		}
	}

	public final DescInstanceStatementContext descInstanceStatement() throws RecognitionException {
		DescInstanceStatementContext _localctx = new DescInstanceStatementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_descInstanceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2258);
			match(KW_INSTANCE);
			setState(2259);
			((DescInstanceStatementContext)_localctx).instance_Id = instanceId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowTableStatementContext showTableStatement() {
			return getRuleContext(ShowTableStatementContext.class,0);
		}
		public ShowPartitionStatementContext showPartitionStatement() {
			return getRuleContext(ShowPartitionStatementContext.class,0);
		}
		public ShowInstanceStatementContext showInstanceStatement() {
			return getRuleContext(ShowInstanceStatementContext.class,0);
		}
		public ShowSchemasStatamentContext showSchemasStatament() {
			return getRuleContext(ShowSchemasStatamentContext.class,0);
		}
		public ShowCreateTableStatementContext showCreateTableStatement() {
			return getRuleContext(ShowCreateTableStatementContext.class,0);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowStatement(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_showStatement);
		try {
			setState(2266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2261);
				showTableStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2262);
				showPartitionStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2263);
				showInstanceStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2264);
				showSchemasStatament();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2265);
				showCreateTableStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateTableStatementContext extends ParserRuleContext {
		public TableNameContext table_name;
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_CREATE() { return getToken(CommandParser.KW_CREATE, 0); }
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ShowCreateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowCreateTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowCreateTableStatement(this);
		}
	}

	public final ShowCreateTableStatementContext showCreateTableStatement() throws RecognitionException {
		ShowCreateTableStatementContext _localctx = new ShowCreateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_showCreateTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2268);
			match(KW_SHOW);
			setState(2269);
			match(KW_CREATE);
			setState(2270);
			match(KW_TABLE);
			setState(2271);
			((ShowCreateTableStatementContext)_localctx).table_name = tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemasStatamentContext extends ParserRuleContext {
		public IdentifierContext project_Name;
		public ShowStmtIdentifierContext prefix_name;
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_SCHEMAS() { return getToken(CommandParser.KW_SCHEMAS, 0); }
		public TerminalNode KW_LIKE() { return getToken(CommandParser.KW_LIKE, 0); }
		public TerminalNode KW_IN() { return getToken(CommandParser.KW_IN, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ShowStmtIdentifierContext showStmtIdentifier() {
			return getRuleContext(ShowStmtIdentifierContext.class,0);
		}
		public ShowSchemasStatamentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemasStatament; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowSchemasStatament(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowSchemasStatament(this);
		}
	}

	public final ShowSchemasStatamentContext showSchemasStatament() throws RecognitionException {
		ShowSchemasStatamentContext _localctx = new ShowSchemasStatamentContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_showSchemasStatament);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2273);
			match(KW_SHOW);
			setState(2274);
			match(KW_SCHEMAS);
			setState(2277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FROM || _la==KW_IN) {
				{
				setState(2275);
				_la = _input.LA(1);
				if ( !(_la==KW_FROM || _la==KW_IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2276);
				((ShowSchemasStatamentContext)_localctx).project_Name = identifier();
				}
			}

			setState(2281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LIKE) {
				{
				setState(2279);
				match(KW_LIKE);
				setState(2280);
				((ShowSchemasStatamentContext)_localctx).prefix_name = showStmtIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowPartitionStatementContext extends ParserRuleContext {
		public TableNameContext table_Name;
		public PartitionSpecContext partition_Spec;
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_PARTITIONS() { return getToken(CommandParser.KW_PARTITIONS, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ShowPartitionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPartitionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowPartitionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowPartitionStatement(this);
		}
	}

	public final ShowPartitionStatementContext showPartitionStatement() throws RecognitionException {
		ShowPartitionStatementContext _localctx = new ShowPartitionStatementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_showPartitionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2283);
			match(KW_SHOW);
			setState(2284);
			match(KW_PARTITIONS);
			setState(2285);
			((ShowPartitionStatementContext)_localctx).table_Name = tableName();
			setState(2287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(2286);
				((ShowPartitionStatementContext)_localctx).partition_Spec = partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowInstanceStatementContext extends ParserRuleContext {
		public BareDateContext from_date;
		public BareDateContext to_date;
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_INSTANCES() { return getToken(CommandParser.KW_INSTANCES, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public TerminalNode Num() { return getToken(CommandParser.Num, 0); }
		public List<BareDateContext> bareDate() {
			return getRuleContexts(BareDateContext.class);
		}
		public BareDateContext bareDate(int i) {
			return getRuleContext(BareDateContext.class,i);
		}
		public ShowInstanceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showInstanceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowInstanceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowInstanceStatement(this);
		}
	}

	public final ShowInstanceStatementContext showInstanceStatement() throws RecognitionException {
		ShowInstanceStatementContext _localctx = new ShowInstanceStatementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_showInstanceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289);
			match(KW_SHOW);
			setState(2290);
			match(KW_INSTANCES);
			setState(2293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FROM) {
				{
				setState(2291);
				match(KW_FROM);
				setState(2292);
				((ShowInstanceStatementContext)_localctx).from_date = bareDate();
				}
			}

			setState(2297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TO) {
				{
				setState(2295);
				match(KW_TO);
				setState(2296);
				((ShowInstanceStatementContext)_localctx).to_date = bareDate();
				}
			}

			setState(2300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Num) {
				{
				setState(2299);
				match(Num);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowTableStatementContext extends ParserRuleContext {
		public IdentifierContext project_Name;
		public IdentifierContext schema_Name;
		public ShowStmtIdentifierContext prefix_name;
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_TABLES() { return getToken(CommandParser.KW_TABLES, 0); }
		public TerminalNode KW_LIKE() { return getToken(CommandParser.KW_LIKE, 0); }
		public TerminalNode KW_IN() { return getToken(CommandParser.KW_IN, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ShowStmtIdentifierContext showStmtIdentifier() {
			return getRuleContext(ShowStmtIdentifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public ShowTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowTableStatement(this);
		}
	}

	public final ShowTableStatementContext showTableStatement() throws RecognitionException {
		ShowTableStatementContext _localctx = new ShowTableStatementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_showTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2302);
			match(KW_SHOW);
			setState(2303);
			match(KW_TABLES);
			setState(2310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FROM || _la==KW_IN) {
				{
				setState(2304);
				_la = _input.LA(1);
				if ( !(_la==KW_FROM || _la==KW_IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2305);
				((ShowTableStatementContext)_localctx).project_Name = identifier();
				setState(2308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(2306);
					match(DOT);
					setState(2307);
					((ShowTableStatementContext)_localctx).schema_Name = identifier();
					}
				}

				}
			}

			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LIKE) {
				{
				setState(2312);
				match(KW_LIKE);
				setState(2313);
				((ShowTableStatementContext)_localctx).prefix_name = showStmtIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BareDateContext extends ParserRuleContext {
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DateWithoutQuoteContext dateWithoutQuote() {
			return getRuleContext(DateWithoutQuoteContext.class,0);
		}
		public BareDateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bareDate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterBareDate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitBareDate(this);
		}
	}

	public final BareDateContext bareDate() throws RecognitionException {
		BareDateContext _localctx = new BareDateContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_bareDate);
		try {
			setState(2318);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringLiteral:
			case DoubleQuoteStringLiteral:
				enterOuterAlt(_localctx, 1);
				{
				setState(2316);
				stringLiteral();
				}
				break;
			case Num:
				enterOuterAlt(_localctx, 2);
				{
				setState(2317);
				dateWithoutQuote();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStmtIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SimpleStringLiteralContext simpleStringLiteral() {
			return getRuleContext(SimpleStringLiteralContext.class,0);
		}
		public ShowStmtIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStmtIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterShowStmtIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitShowStmtIdentifier(this);
		}
	}

	public final ShowStmtIdentifierContext showStmtIdentifier() throws RecognitionException {
		ShowStmtIdentifierContext _localctx = new ShowStmtIdentifierContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_showStmtIdentifier);
		try {
			setState(2322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(2320);
				identifier();
				}
				break;
			case StringLiteral:
			case DoubleQuoteStringLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(2321);
				simpleStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowFormatContext extends ParserRuleContext {
		public RowFormatSerdeContext rowFormatSerde() {
			return getRuleContext(RowFormatSerdeContext.class,0);
		}
		public RowFormatDelimitedContext rowFormatDelimited() {
			return getRuleContext(RowFormatDelimitedContext.class,0);
		}
		public RowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRowFormat(this);
		}
	}

	public final RowFormatContext rowFormat() throws RecognitionException {
		RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_rowFormat);
		try {
			setState(2327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2324);
				rowFormatSerde();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2325);
				rowFormatDelimited();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RecordReaderContext extends ParserRuleContext {
		public StringLiteralContext reader;
		public TerminalNode KW_RECORDREADER() { return getToken(CommandParser.KW_RECORDREADER, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public RecordReaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordReader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRecordReader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRecordReader(this);
		}
	}

	public final RecordReaderContext recordReader() throws RecognitionException {
		RecordReaderContext _localctx = new RecordReaderContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_recordReader);
		try {
			setState(2332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_RECORDREADER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2329);
				match(KW_RECORDREADER);
				setState(2330);
				((RecordReaderContext)_localctx).reader = stringLiteral();
				}
				break;
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_HAVING:
			case KW_WHERE:
			case KW_FROM:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LIMIT:
			case KW_MINUS:
			case KW_INTERSECT:
			case KW_LATERAL:
			case KW_WINDOW:
			case KW_EXCEPT:
			case COMMA:
			case RPAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RecordWriterContext extends ParserRuleContext {
		public StringLiteralContext writer;
		public TerminalNode KW_RECORDWRITER() { return getToken(CommandParser.KW_RECORDWRITER, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public RecordWriterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordWriter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRecordWriter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRecordWriter(this);
		}
	}

	public final RecordWriterContext recordWriter() throws RecognitionException {
		RecordWriterContext _localctx = new RecordWriterContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_recordWriter);
		try {
			setState(2337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_RECORDWRITER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2334);
				match(KW_RECORDWRITER);
				setState(2335);
				((RecordWriterContext)_localctx).writer = stringLiteral();
				}
				break;
			case KW_USING:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowFormatSerdeContext extends ParserRuleContext {
		public StringLiteralContext name;
		public TablePropertiesContext serdeprops;
		public TerminalNode KW_ROW() { return getToken(CommandParser.KW_ROW, 0); }
		public TerminalNode KW_FORMAT() { return getToken(CommandParser.KW_FORMAT, 0); }
		public TerminalNode KW_SERDE() { return getToken(CommandParser.KW_SERDE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public TerminalNode KW_SERDEPROPERTIES() { return getToken(CommandParser.KW_SERDEPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public RowFormatSerdeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormatSerde; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRowFormatSerde(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRowFormatSerde(this);
		}
	}

	public final RowFormatSerdeContext rowFormatSerde() throws RecognitionException {
		RowFormatSerdeContext _localctx = new RowFormatSerdeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_rowFormatSerde);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2339);
			match(KW_ROW);
			setState(2340);
			match(KW_FORMAT);
			setState(2341);
			match(KW_SERDE);
			setState(2342);
			((RowFormatSerdeContext)_localctx).name = stringLiteral();
			setState(2346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(2343);
				match(KW_WITH);
				setState(2344);
				match(KW_SERDEPROPERTIES);
				setState(2345);
				((RowFormatSerdeContext)_localctx).serdeprops = tableProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowFormatDelimitedContext extends ParserRuleContext {
		public TableRowFormatFieldIdentifierContext fd;
		public TableRowFormatCollItemsIdentifierContext cd;
		public TableRowFormatMapKeysIdentifierContext md;
		public TableRowFormatLinesIdentifierContext ld;
		public TableRowNullFormatContext nul;
		public TerminalNode KW_ROW() { return getToken(CommandParser.KW_ROW, 0); }
		public TerminalNode KW_FORMAT() { return getToken(CommandParser.KW_FORMAT, 0); }
		public TerminalNode KW_DELIMITED() { return getToken(CommandParser.KW_DELIMITED, 0); }
		public TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier() {
			return getRuleContext(TableRowFormatFieldIdentifierContext.class,0);
		}
		public TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier() {
			return getRuleContext(TableRowFormatCollItemsIdentifierContext.class,0);
		}
		public TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier() {
			return getRuleContext(TableRowFormatMapKeysIdentifierContext.class,0);
		}
		public TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier() {
			return getRuleContext(TableRowFormatLinesIdentifierContext.class,0);
		}
		public TableRowNullFormatContext tableRowNullFormat() {
			return getRuleContext(TableRowNullFormatContext.class,0);
		}
		public RowFormatDelimitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormatDelimited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterRowFormatDelimited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitRowFormatDelimited(this);
		}
	}

	public final RowFormatDelimitedContext rowFormatDelimited() throws RecognitionException {
		RowFormatDelimitedContext _localctx = new RowFormatDelimitedContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_rowFormatDelimited);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2348);
			match(KW_ROW);
			setState(2349);
			match(KW_FORMAT);
			setState(2350);
			match(KW_DELIMITED);
			setState(2352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FIELDS) {
				{
				setState(2351);
				((RowFormatDelimitedContext)_localctx).fd = tableRowFormatFieldIdentifier();
				}
			}

			setState(2355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COLLECTION) {
				{
				setState(2354);
				((RowFormatDelimitedContext)_localctx).cd = tableRowFormatCollItemsIdentifier();
				}
			}

			setState(2358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_MAP) {
				{
				setState(2357);
				((RowFormatDelimitedContext)_localctx).md = tableRowFormatMapKeysIdentifier();
				}
			}

			setState(2361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LINES) {
				{
				setState(2360);
				((RowFormatDelimitedContext)_localctx).ld = tableRowFormatLinesIdentifier();
				}
			}

			setState(2364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NULL) {
				{
				setState(2363);
				((RowFormatDelimitedContext)_localctx).nul = tableRowNullFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowFormatContext extends ParserRuleContext {
		public RowFormatDelimitedContext rfd;
		public RowFormatSerdeContext rfs;
		public RowFormatDelimitedContext rowFormatDelimited() {
			return getRuleContext(RowFormatDelimitedContext.class,0);
		}
		public RowFormatSerdeContext rowFormatSerde() {
			return getRuleContext(RowFormatSerdeContext.class,0);
		}
		public TableRowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableRowFormat(this);
		}
	}

	public final TableRowFormatContext tableRowFormat() throws RecognitionException {
		TableRowFormatContext _localctx = new TableRowFormatContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_tableRowFormat);
		try {
			setState(2368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2366);
				((TableRowFormatContext)_localctx).rfd = rowFormatDelimited();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2367);
				((TableRowFormatContext)_localctx).rfs = rowFormatSerde();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePropertiesContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TablePropertiesListContext tablePropertiesList() {
			return getRuleContext(TablePropertiesListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public TablePropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableProperties(this);
		}
	}

	public final TablePropertiesContext tableProperties() throws RecognitionException {
		TablePropertiesContext _localctx = new TablePropertiesContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_tableProperties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			match(LPAREN);
			setState(2371);
			tablePropertiesList();
			setState(2372);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePropertiesListContext extends ParserRuleContext {
		public KeyValuePropertyContext keyValueProperty;
		public List<KeyValuePropertyContext> kv = new ArrayList<KeyValuePropertyContext>();
		public List<KeyValuePropertyContext> keyValueProperty() {
			return getRuleContexts(KeyValuePropertyContext.class);
		}
		public KeyValuePropertyContext keyValueProperty(int i) {
			return getRuleContext(KeyValuePropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TablePropertiesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePropertiesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTablePropertiesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTablePropertiesList(this);
		}
	}

	public final TablePropertiesListContext tablePropertiesList() throws RecognitionException {
		TablePropertiesListContext _localctx = new TablePropertiesListContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_tablePropertiesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2374);
			((TablePropertiesListContext)_localctx).keyValueProperty = keyValueProperty();
			((TablePropertiesListContext)_localctx).kv.add(((TablePropertiesListContext)_localctx).keyValueProperty);
			setState(2379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2375);
				match(COMMA);
				setState(2376);
				((TablePropertiesListContext)_localctx).keyValueProperty = keyValueProperty();
				((TablePropertiesListContext)_localctx).kv.add(((TablePropertiesListContext)_localctx).keyValueProperty);
				}
				}
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyValuePropertyContext extends ParserRuleContext {
		public SimpleStringLiteralContext key;
		public SimpleStringLiteralContext value;
		public TerminalNode EQUAL() { return getToken(CommandParser.EQUAL, 0); }
		public List<SimpleStringLiteralContext> simpleStringLiteral() {
			return getRuleContexts(SimpleStringLiteralContext.class);
		}
		public SimpleStringLiteralContext simpleStringLiteral(int i) {
			return getRuleContext(SimpleStringLiteralContext.class,i);
		}
		public KeyValuePropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyValueProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterKeyValueProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitKeyValueProperty(this);
		}
	}

	public final KeyValuePropertyContext keyValueProperty() throws RecognitionException {
		KeyValuePropertyContext _localctx = new KeyValuePropertyContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_keyValueProperty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2382);
			((KeyValuePropertyContext)_localctx).key = simpleStringLiteral();
			setState(2383);
			match(EQUAL);
			setState(2384);
			((KeyValuePropertyContext)_localctx).value = simpleStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserDefinedJoinPropertiesListContext extends ParserRuleContext {
		public KeyValuePropertyContext keyValueProperty;
		public List<KeyValuePropertyContext> kv = new ArrayList<KeyValuePropertyContext>();
		public List<KeyValuePropertyContext> keyValueProperty() {
			return getRuleContexts(KeyValuePropertyContext.class);
		}
		public KeyValuePropertyContext keyValueProperty(int i) {
			return getRuleContext(KeyValuePropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public UserDefinedJoinPropertiesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userDefinedJoinPropertiesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUserDefinedJoinPropertiesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUserDefinedJoinPropertiesList(this);
		}
	}

	public final UserDefinedJoinPropertiesListContext userDefinedJoinPropertiesList() throws RecognitionException {
		UserDefinedJoinPropertiesListContext _localctx = new UserDefinedJoinPropertiesListContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_userDefinedJoinPropertiesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2386);
			((UserDefinedJoinPropertiesListContext)_localctx).keyValueProperty = keyValueProperty();
			((UserDefinedJoinPropertiesListContext)_localctx).kv.add(((UserDefinedJoinPropertiesListContext)_localctx).keyValueProperty);
			setState(2391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2387);
				match(COMMA);
				setState(2388);
				((UserDefinedJoinPropertiesListContext)_localctx).keyValueProperty = keyValueProperty();
				((UserDefinedJoinPropertiesListContext)_localctx).kv.add(((UserDefinedJoinPropertiesListContext)_localctx).keyValueProperty);
				}
				}
				setState(2393);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowFormatFieldIdentifierContext extends ParserRuleContext {
		public StringLiteralContext fldIdnt;
		public StringLiteralContext fldEscape;
		public TerminalNode KW_FIELDS() { return getToken(CommandParser.KW_FIELDS, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(CommandParser.KW_TERMINATED, 0); }
		public List<TerminalNode> KW_BY() { return getTokens(CommandParser.KW_BY); }
		public TerminalNode KW_BY(int i) {
			return getToken(CommandParser.KW_BY, i);
		}
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public TerminalNode KW_ESCAPED() { return getToken(CommandParser.KW_ESCAPED, 0); }
		public TableRowFormatFieldIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatFieldIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableRowFormatFieldIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableRowFormatFieldIdentifier(this);
		}
	}

	public final TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier() throws RecognitionException {
		TableRowFormatFieldIdentifierContext _localctx = new TableRowFormatFieldIdentifierContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_tableRowFormatFieldIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			match(KW_FIELDS);
			setState(2395);
			match(KW_TERMINATED);
			setState(2396);
			match(KW_BY);
			setState(2397);
			((TableRowFormatFieldIdentifierContext)_localctx).fldIdnt = stringLiteral();
			setState(2401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ESCAPED) {
				{
				setState(2398);
				match(KW_ESCAPED);
				setState(2399);
				match(KW_BY);
				setState(2400);
				((TableRowFormatFieldIdentifierContext)_localctx).fldEscape = stringLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowFormatCollItemsIdentifierContext extends ParserRuleContext {
		public StringLiteralContext collIdnt;
		public TerminalNode KW_COLLECTION() { return getToken(CommandParser.KW_COLLECTION, 0); }
		public TerminalNode KW_ITEMS() { return getToken(CommandParser.KW_ITEMS, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(CommandParser.KW_TERMINATED, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TableRowFormatCollItemsIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatCollItemsIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableRowFormatCollItemsIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableRowFormatCollItemsIdentifier(this);
		}
	}

	public final TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier() throws RecognitionException {
		TableRowFormatCollItemsIdentifierContext _localctx = new TableRowFormatCollItemsIdentifierContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_tableRowFormatCollItemsIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2403);
			match(KW_COLLECTION);
			setState(2404);
			match(KW_ITEMS);
			setState(2405);
			match(KW_TERMINATED);
			setState(2406);
			match(KW_BY);
			setState(2407);
			((TableRowFormatCollItemsIdentifierContext)_localctx).collIdnt = stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowFormatMapKeysIdentifierContext extends ParserRuleContext {
		public StringLiteralContext mapKeysIdnt;
		public TerminalNode KW_MAP() { return getToken(CommandParser.KW_MAP, 0); }
		public TerminalNode KW_KEYS() { return getToken(CommandParser.KW_KEYS, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(CommandParser.KW_TERMINATED, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TableRowFormatMapKeysIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatMapKeysIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableRowFormatMapKeysIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableRowFormatMapKeysIdentifier(this);
		}
	}

	public final TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier() throws RecognitionException {
		TableRowFormatMapKeysIdentifierContext _localctx = new TableRowFormatMapKeysIdentifierContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_tableRowFormatMapKeysIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2409);
			match(KW_MAP);
			setState(2410);
			match(KW_KEYS);
			setState(2411);
			match(KW_TERMINATED);
			setState(2412);
			match(KW_BY);
			setState(2413);
			((TableRowFormatMapKeysIdentifierContext)_localctx).mapKeysIdnt = stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowFormatLinesIdentifierContext extends ParserRuleContext {
		public StringLiteralContext linesIdnt;
		public TerminalNode KW_LINES() { return getToken(CommandParser.KW_LINES, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(CommandParser.KW_TERMINATED, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TableRowFormatLinesIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatLinesIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableRowFormatLinesIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableRowFormatLinesIdentifier(this);
		}
	}

	public final TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier() throws RecognitionException {
		TableRowFormatLinesIdentifierContext _localctx = new TableRowFormatLinesIdentifierContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_tableRowFormatLinesIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2415);
			match(KW_LINES);
			setState(2416);
			match(KW_TERMINATED);
			setState(2417);
			match(KW_BY);
			setState(2418);
			((TableRowFormatLinesIdentifierContext)_localctx).linesIdnt = stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowNullFormatContext extends ParserRuleContext {
		public StringLiteralContext nullIdnt;
		public TerminalNode KW_NULL() { return getToken(CommandParser.KW_NULL, 0); }
		public TerminalNode KW_DEFINED() { return getToken(CommandParser.KW_DEFINED, 0); }
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TableRowNullFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowNullFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableRowNullFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableRowNullFormat(this);
		}
	}

	public final TableRowNullFormatContext tableRowNullFormat() throws RecognitionException {
		TableRowNullFormatContext _localctx = new TableRowNullFormatContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_tableRowNullFormat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(KW_NULL);
			setState(2421);
			match(KW_DEFINED);
			setState(2422);
			match(KW_AS);
			setState(2423);
			((TableRowNullFormatContext)_localctx).nullIdnt = stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameTypeListContext extends ParserRuleContext {
		public List<ColumnNameTypeContext> columnNameType() {
			return getRuleContexts(ColumnNameTypeContext.class);
		}
		public ColumnNameTypeContext columnNameType(int i) {
			return getRuleContext(ColumnNameTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ColumnNameTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameTypeList(this);
		}
	}

	public final ColumnNameTypeListContext columnNameTypeList() throws RecognitionException {
		ColumnNameTypeListContext _localctx = new ColumnNameTypeListContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_columnNameTypeList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2425);
			columnNameType();
			setState(2430);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2426);
					match(COMMA);
					setState(2427);
					columnNameType();
					}
					} 
				}
				setState(2432);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameColonTypeListContext extends ParserRuleContext {
		public ColumnNameColonTypeContext columnNameColonType;
		public List<ColumnNameColonTypeContext> t = new ArrayList<ColumnNameColonTypeContext>();
		public List<ColumnNameColonTypeContext> columnNameColonType() {
			return getRuleContexts(ColumnNameColonTypeContext.class);
		}
		public ColumnNameColonTypeContext columnNameColonType(int i) {
			return getRuleContext(ColumnNameColonTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ColumnNameColonTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameColonTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameColonTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameColonTypeList(this);
		}
	}

	public final ColumnNameColonTypeListContext columnNameColonTypeList() throws RecognitionException {
		ColumnNameColonTypeListContext _localctx = new ColumnNameColonTypeListContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_columnNameColonTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2433);
			((ColumnNameColonTypeListContext)_localctx).columnNameColonType = columnNameColonType();
			((ColumnNameColonTypeListContext)_localctx).t.add(((ColumnNameColonTypeListContext)_localctx).columnNameColonType);
			setState(2438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2434);
				match(COMMA);
				setState(2435);
				((ColumnNameColonTypeListContext)_localctx).columnNameColonType = columnNameColonType();
				((ColumnNameColonTypeListContext)_localctx).t.add(((ColumnNameColonTypeListContext)_localctx).columnNameColonType);
				}
				}
				setState(2440);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameCommentListContext extends ParserRuleContext {
		public List<ColumnNameCommentContext> columnNameComment() {
			return getRuleContexts(ColumnNameCommentContext.class);
		}
		public ColumnNameCommentContext columnNameComment(int i) {
			return getRuleContext(ColumnNameCommentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ColumnNameCommentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameCommentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameCommentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameCommentList(this);
		}
	}

	public final ColumnNameCommentListContext columnNameCommentList() throws RecognitionException {
		ColumnNameCommentListContext _localctx = new ColumnNameCommentListContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_columnNameCommentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2441);
			columnNameComment();
			setState(2446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2442);
				match(COMMA);
				setState(2443);
				columnNameComment();
				}
				}
				setState(2448);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameCommentContext extends ParserRuleContext {
		public IdentifierContext colName;
		public StringLiteralContext comment;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(CommandParser.KW_COMMENT, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ColumnNameCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameComment(this);
		}
	}

	public final ColumnNameCommentContext columnNameComment() throws RecognitionException {
		ColumnNameCommentContext _localctx = new ColumnNameCommentContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_columnNameComment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			((ColumnNameCommentContext)_localctx).colName = identifier();
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(2450);
				match(KW_COMMENT);
				setState(2451);
				((ColumnNameCommentContext)_localctx).comment = stringLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnRefOrderContext extends ParserRuleContext {
		public Token asc;
		public Token desc;
		public Token first;
		public Token last;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_NULLS() { return getToken(CommandParser.KW_NULLS, 0); }
		public TerminalNode KW_ASC() { return getToken(CommandParser.KW_ASC, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public TerminalNode KW_FIRST() { return getToken(CommandParser.KW_FIRST, 0); }
		public TerminalNode KW_LAST() { return getToken(CommandParser.KW_LAST, 0); }
		public ColumnRefOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRefOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnRefOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnRefOrder(this);
		}
	}

	public final ColumnRefOrderContext columnRefOrder() throws RecognitionException {
		ColumnRefOrderContext _localctx = new ColumnRefOrderContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_columnRefOrder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2454);
			expression();
			setState(2457);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ASC:
				{
				setState(2455);
				((ColumnRefOrderContext)_localctx).asc = match(KW_ASC);
				}
				break;
			case KW_DESC:
				{
				setState(2456);
				((ColumnRefOrderContext)_localctx).desc = match(KW_DESC);
				}
				break;
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_HAVING:
			case KW_WHERE:
			case KW_SELECT:
			case KW_JOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_NULLS:
			case KW_MAP:
			case KW_REDUCE:
			case KW_ROWS:
			case KW_LIMIT:
			case KW_MINUS:
			case KW_INTERSECT:
			case KW_RANGE:
			case KW_CROSS:
			case KW_LATERAL:
			case KW_WINDOW:
			case KW_INNER:
			case KW_EXCEPT:
			case KW_NATURAL:
			case COMMA:
			case RPAREN:
			case Identifier:
				break;
			default:
				break;
			}
			setState(2464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NULLS) {
				{
				setState(2459);
				match(KW_NULLS);
				setState(2462);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_FIRST:
					{
					setState(2460);
					((ColumnRefOrderContext)_localctx).first = match(KW_FIRST);
					}
					break;
				case KW_LAST:
					{
					setState(2461);
					((ColumnRefOrderContext)_localctx).last = match(KW_LAST);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameTypeContext extends ParserRuleContext {
		public IdentifierContext colName;
		public ColTypeContext t;
		public StringLiteralContext comment;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(CommandParser.KW_COMMENT, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ColumnNameTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameType(this);
		}
	}

	public final ColumnNameTypeContext columnNameType() throws RecognitionException {
		ColumnNameTypeContext _localctx = new ColumnNameTypeContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_columnNameType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466);
			((ColumnNameTypeContext)_localctx).colName = identifier();
			setState(2467);
			((ColumnNameTypeContext)_localctx).t = colType();
			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(2468);
				match(KW_COMMENT);
				setState(2469);
				((ColumnNameTypeContext)_localctx).comment = stringLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameColonTypeContext extends ParserRuleContext {
		public IdentifierContext n;
		public BuiltinTypeOrUdtContext t;
		public StringLiteralContext c;
		public TerminalNode COLON() { return getToken(CommandParser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BuiltinTypeOrUdtContext builtinTypeOrUdt() {
			return getRuleContext(BuiltinTypeOrUdtContext.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(CommandParser.KW_COMMENT, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ColumnNameColonTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameColonType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameColonType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameColonType(this);
		}
	}

	public final ColumnNameColonTypeContext columnNameColonType() throws RecognitionException {
		ColumnNameColonTypeContext _localctx = new ColumnNameColonTypeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_columnNameColonType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2472);
			((ColumnNameColonTypeContext)_localctx).n = identifier();
			setState(2473);
			match(COLON);
			setState(2474);
			((ColumnNameColonTypeContext)_localctx).t = builtinTypeOrUdt();
			setState(2477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(2475);
				match(KW_COMMENT);
				setState(2476);
				((ColumnNameColonTypeContext)_localctx).c = stringLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColTypeContext extends ParserRuleContext {
		public TypeContext t;
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public ColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColType(this);
		}
	}

	public final ColTypeContext colType() throws RecognitionException {
		ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_colType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2479);
			((ColTypeContext)_localctx).t = type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColTypeListContext extends ParserRuleContext {
		public List<ColTypeContext> colType() {
			return getRuleContexts(ColTypeContext.class);
		}
		public ColTypeContext colType(int i) {
			return getRuleContext(ColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColTypeList(this);
		}
	}

	public final ColTypeListContext colTypeList() throws RecognitionException {
		ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_colTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			colType();
			setState(2486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2482);
				match(COMMA);
				setState(2483);
				colType();
				}
				}
				setState(2488);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyTypeContext extends ParserRuleContext {
		public TypeContext t;
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode KW_ANY() { return getToken(CommandParser.KW_ANY, 0); }
		public AnyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAnyType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAnyType(this);
		}
	}

	public final AnyTypeContext anyType() throws RecognitionException {
		AnyTypeContext _localctx = new AnyTypeContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_anyType);
		try {
			setState(2491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_CHAR:
			case KW_VARCHAR:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2489);
				((AnyTypeContext)_localctx).t = type();
				}
				break;
			case KW_ANY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2490);
				match(KW_ANY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeContext extends ParserRuleContext {
		public PrimitiveTypeContext pt;
		public ListTypeContext lt;
		public StructTypeContext st;
		public MapTypeContext mt;
		public UnionTypeContext ut;
		public PrimitiveTypeContext primitiveType() {
			return getRuleContext(PrimitiveTypeContext.class,0);
		}
		public ListTypeContext listType() {
			return getRuleContext(ListTypeContext.class,0);
		}
		public StructTypeContext structType() {
			return getRuleContext(StructTypeContext.class,0);
		}
		public MapTypeContext mapType() {
			return getRuleContext(MapTypeContext.class,0);
		}
		public UnionTypeContext unionType() {
			return getRuleContext(UnionTypeContext.class,0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitType(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		TypeContext _localctx = new TypeContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_type);
		try {
			setState(2498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_CHAR:
			case KW_VARCHAR:
			case KW_BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2493);
				((TypeContext)_localctx).pt = primitiveType();
				}
				break;
			case KW_ARRAY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2494);
				((TypeContext)_localctx).lt = listType();
				}
				break;
			case KW_STRUCT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2495);
				((TypeContext)_localctx).st = structType();
				}
				break;
			case KW_MAP:
				enterOuterAlt(_localctx, 4);
				{
				setState(2496);
				((TypeContext)_localctx).mt = mapType();
				}
				break;
			case KW_UNIONTYPE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2497);
				((TypeContext)_localctx).ut = unionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimitiveTypeContext extends ParserRuleContext {
		public Token prec;
		public Token scale;
		public Token length;
		public TerminalNode KW_TINYINT() { return getToken(CommandParser.KW_TINYINT, 0); }
		public TerminalNode KW_SMALLINT() { return getToken(CommandParser.KW_SMALLINT, 0); }
		public TerminalNode KW_INT() { return getToken(CommandParser.KW_INT, 0); }
		public TerminalNode KW_BIGINT() { return getToken(CommandParser.KW_BIGINT, 0); }
		public TerminalNode KW_BOOLEAN() { return getToken(CommandParser.KW_BOOLEAN, 0); }
		public TerminalNode KW_FLOAT() { return getToken(CommandParser.KW_FLOAT, 0); }
		public TerminalNode KW_DOUBLE() { return getToken(CommandParser.KW_DOUBLE, 0); }
		public TerminalNode KW_DATE() { return getToken(CommandParser.KW_DATE, 0); }
		public TerminalNode KW_DATETIME() { return getToken(CommandParser.KW_DATETIME, 0); }
		public TerminalNode KW_TIMESTAMP() { return getToken(CommandParser.KW_TIMESTAMP, 0); }
		public TerminalNode KW_STRING() { return getToken(CommandParser.KW_STRING, 0); }
		public TerminalNode KW_BINARY() { return getToken(CommandParser.KW_BINARY, 0); }
		public TerminalNode KW_DECIMAL() { return getToken(CommandParser.KW_DECIMAL, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<TerminalNode> Number() { return getTokens(CommandParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(CommandParser.Number, i);
		}
		public TerminalNode COMMA() { return getToken(CommandParser.COMMA, 0); }
		public TerminalNode KW_VARCHAR() { return getToken(CommandParser.KW_VARCHAR, 0); }
		public TerminalNode KW_CHAR() { return getToken(CommandParser.KW_CHAR, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrimitiveType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrimitiveType(this);
		}
	}

	public final PrimitiveTypeContext primitiveType() throws RecognitionException {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_primitiveType);
		int _la;
		try {
			setState(2530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TINYINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2500);
				match(KW_TINYINT);
				}
				break;
			case KW_SMALLINT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2501);
				match(KW_SMALLINT);
				}
				break;
			case KW_INT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2502);
				match(KW_INT);
				}
				break;
			case KW_BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(2503);
				match(KW_BIGINT);
				}
				break;
			case KW_BOOLEAN:
				enterOuterAlt(_localctx, 5);
				{
				setState(2504);
				match(KW_BOOLEAN);
				}
				break;
			case KW_FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2505);
				match(KW_FLOAT);
				}
				break;
			case KW_DOUBLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2506);
				match(KW_DOUBLE);
				}
				break;
			case KW_DATE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2507);
				match(KW_DATE);
				}
				break;
			case KW_DATETIME:
				enterOuterAlt(_localctx, 9);
				{
				setState(2508);
				match(KW_DATETIME);
				}
				break;
			case KW_TIMESTAMP:
				enterOuterAlt(_localctx, 10);
				{
				setState(2509);
				match(KW_TIMESTAMP);
				}
				break;
			case KW_STRING:
				enterOuterAlt(_localctx, 11);
				{
				setState(2510);
				match(KW_STRING);
				}
				break;
			case KW_BINARY:
				enterOuterAlt(_localctx, 12);
				{
				setState(2511);
				match(KW_BINARY);
				}
				break;
			case KW_DECIMAL:
				enterOuterAlt(_localctx, 13);
				{
				setState(2512);
				match(KW_DECIMAL);
				setState(2520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2513);
					match(LPAREN);
					setState(2514);
					((PrimitiveTypeContext)_localctx).prec = match(Number);
					setState(2517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2515);
						match(COMMA);
						setState(2516);
						((PrimitiveTypeContext)_localctx).scale = match(Number);
						}
					}

					setState(2519);
					match(RPAREN);
					}
				}

				}
				break;
			case KW_VARCHAR:
				enterOuterAlt(_localctx, 14);
				{
				setState(2522);
				match(KW_VARCHAR);
				setState(2523);
				match(LPAREN);
				setState(2524);
				((PrimitiveTypeContext)_localctx).length = match(Number);
				setState(2525);
				match(RPAREN);
				}
				break;
			case KW_CHAR:
				enterOuterAlt(_localctx, 15);
				{
				setState(2526);
				match(KW_CHAR);
				setState(2527);
				match(LPAREN);
				setState(2528);
				((PrimitiveTypeContext)_localctx).length = match(Number);
				setState(2529);
				match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BuiltinTypeOrUdtContext extends ParserRuleContext {
		public TypeContext t;
		public ClassNameOrArrayDeclContext cn;
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public ClassNameOrArrayDeclContext classNameOrArrayDecl() {
			return getRuleContext(ClassNameOrArrayDeclContext.class,0);
		}
		public BuiltinTypeOrUdtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtinTypeOrUdt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterBuiltinTypeOrUdt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitBuiltinTypeOrUdt(this);
		}
	}

	public final BuiltinTypeOrUdtContext builtinTypeOrUdt() throws RecognitionException {
		BuiltinTypeOrUdtContext _localctx = new BuiltinTypeOrUdtContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_builtinTypeOrUdt);
		try {
			setState(2534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2532);
				((BuiltinTypeOrUdtContext)_localctx).t = type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2533);
				((BuiltinTypeOrUdtContext)_localctx).cn = classNameOrArrayDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimitiveTypeOrUdtContext extends ParserRuleContext {
		public PrimitiveTypeContext t;
		public ClassNameOrArrayDeclContext cn;
		public PrimitiveTypeContext primitiveType() {
			return getRuleContext(PrimitiveTypeContext.class,0);
		}
		public ClassNameOrArrayDeclContext classNameOrArrayDecl() {
			return getRuleContext(ClassNameOrArrayDeclContext.class,0);
		}
		public PrimitiveTypeOrUdtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveTypeOrUdt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPrimitiveTypeOrUdt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPrimitiveTypeOrUdt(this);
		}
	}

	public final PrimitiveTypeOrUdtContext primitiveTypeOrUdt() throws RecognitionException {
		PrimitiveTypeOrUdtContext _localctx = new PrimitiveTypeOrUdtContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_primitiveTypeOrUdt);
		try {
			setState(2538);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2536);
				((PrimitiveTypeOrUdtContext)_localctx).t = primitiveType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2537);
				((PrimitiveTypeOrUdtContext)_localctx).cn = classNameOrArrayDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListTypeContext extends ParserRuleContext {
		public BuiltinTypeOrUdtContext elemType;
		public TerminalNode KW_ARRAY() { return getToken(CommandParser.KW_ARRAY, 0); }
		public TerminalNode LESSTHAN() { return getToken(CommandParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHAN() { return getToken(CommandParser.GREATERTHAN, 0); }
		public BuiltinTypeOrUdtContext builtinTypeOrUdt() {
			return getRuleContext(BuiltinTypeOrUdtContext.class,0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterListType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitListType(this);
		}
	}

	public final ListTypeContext listType() throws RecognitionException {
		ListTypeContext _localctx = new ListTypeContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_listType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2540);
			match(KW_ARRAY);
			setState(2541);
			match(LESSTHAN);
			setState(2542);
			((ListTypeContext)_localctx).elemType = builtinTypeOrUdt();
			setState(2543);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StructTypeContext extends ParserRuleContext {
		public ColumnNameColonTypeListContext tl;
		public TerminalNode KW_STRUCT() { return getToken(CommandParser.KW_STRUCT, 0); }
		public TerminalNode LESSTHAN() { return getToken(CommandParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHAN() { return getToken(CommandParser.GREATERTHAN, 0); }
		public ColumnNameColonTypeListContext columnNameColonTypeList() {
			return getRuleContext(ColumnNameColonTypeListContext.class,0);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_structType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterStructType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitStructType(this);
		}
	}

	public final StructTypeContext structType() throws RecognitionException {
		StructTypeContext _localctx = new StructTypeContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_structType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2545);
			match(KW_STRUCT);
			setState(2546);
			match(LESSTHAN);
			setState(2547);
			((StructTypeContext)_localctx).tl = columnNameColonTypeList();
			setState(2548);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MapTypeContext extends ParserRuleContext {
		public PrimitiveTypeOrUdtContext left;
		public BuiltinTypeOrUdtContext right;
		public TerminalNode KW_MAP() { return getToken(CommandParser.KW_MAP, 0); }
		public TerminalNode LESSTHAN() { return getToken(CommandParser.LESSTHAN, 0); }
		public TerminalNode COMMA() { return getToken(CommandParser.COMMA, 0); }
		public TerminalNode GREATERTHAN() { return getToken(CommandParser.GREATERTHAN, 0); }
		public PrimitiveTypeOrUdtContext primitiveTypeOrUdt() {
			return getRuleContext(PrimitiveTypeOrUdtContext.class,0);
		}
		public BuiltinTypeOrUdtContext builtinTypeOrUdt() {
			return getRuleContext(BuiltinTypeOrUdtContext.class,0);
		}
		public MapTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMapType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMapType(this);
		}
	}

	public final MapTypeContext mapType() throws RecognitionException {
		MapTypeContext _localctx = new MapTypeContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_mapType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2550);
			match(KW_MAP);
			setState(2551);
			match(LESSTHAN);
			setState(2552);
			((MapTypeContext)_localctx).left = primitiveTypeOrUdt();
			setState(2553);
			match(COMMA);
			setState(2554);
			((MapTypeContext)_localctx).right = builtinTypeOrUdt();
			setState(2555);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionTypeContext extends ParserRuleContext {
		public TerminalNode KW_UNIONTYPE() { return getToken(CommandParser.KW_UNIONTYPE, 0); }
		public TerminalNode LESSTHAN() { return getToken(CommandParser.LESSTHAN, 0); }
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode GREATERTHAN() { return getToken(CommandParser.GREATERTHAN, 0); }
		public UnionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUnionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUnionType(this);
		}
	}

	public final UnionTypeContext unionType() throws RecognitionException {
		UnionTypeContext _localctx = new UnionTypeContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_unionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2557);
			match(KW_UNIONTYPE);
			setState(2558);
			match(LESSTHAN);
			setState(2559);
			colTypeList();
			setState(2560);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetOperatorContext extends ParserRuleContext {
		public Token union;
		public Token all;
		public Token intersect;
		public Token minus;
		public TerminalNode KW_UNION() { return getToken(CommandParser.KW_UNION, 0); }
		public TerminalNode KW_ALL() { return getToken(CommandParser.KW_ALL, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(CommandParser.KW_DISTINCT, 0); }
		public TerminalNode KW_INTERSECT() { return getToken(CommandParser.KW_INTERSECT, 0); }
		public TerminalNode KW_MINUS() { return getToken(CommandParser.KW_MINUS, 0); }
		public TerminalNode KW_EXCEPT() { return getToken(CommandParser.KW_EXCEPT, 0); }
		public SetOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSetOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSetOperator(this);
		}
	}

	public final SetOperatorContext setOperator() throws RecognitionException {
		SetOperatorContext _localctx = new SetOperatorContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_setOperator);
		int _la;
		try {
			setState(2580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2562);
				((SetOperatorContext)_localctx).union = match(KW_UNION);
				setState(2563);
				((SetOperatorContext)_localctx).all = match(KW_ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2564);
				((SetOperatorContext)_localctx).union = match(KW_UNION);
				setState(2566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_DISTINCT) {
					{
					setState(2565);
					match(KW_DISTINCT);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2568);
				((SetOperatorContext)_localctx).intersect = match(KW_INTERSECT);
				setState(2569);
				((SetOperatorContext)_localctx).all = match(KW_ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2570);
				((SetOperatorContext)_localctx).intersect = match(KW_INTERSECT);
				setState(2572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_DISTINCT) {
					{
					setState(2571);
					match(KW_DISTINCT);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2574);
				((SetOperatorContext)_localctx).minus = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==KW_MINUS || _la==KW_EXCEPT) ) {
					((SetOperatorContext)_localctx).minus = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2575);
				((SetOperatorContext)_localctx).all = match(KW_ALL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2576);
				((SetOperatorContext)_localctx).minus = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==KW_MINUS || _la==KW_EXCEPT) ) {
					((SetOperatorContext)_localctx).minus = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_DISTINCT) {
					{
					setState(2577);
					match(KW_DISTINCT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public CteStatementContext cteStatement;
		public List<CteStatementContext> branches = new ArrayList<CteStatementContext>();
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public List<CteStatementContext> cteStatement() {
			return getRuleContexts(CteStatementContext.class);
		}
		public CteStatementContext cteStatement(int i) {
			return getRuleContext(CteStatementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWithClause(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_withClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2582);
			match(KW_WITH);
			setState(2583);
			((WithClauseContext)_localctx).cteStatement = cteStatement();
			((WithClauseContext)_localctx).branches.add(((WithClauseContext)_localctx).cteStatement);
			setState(2588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2584);
				match(COMMA);
				setState(2585);
				((WithClauseContext)_localctx).cteStatement = cteStatement();
				((WithClauseContext)_localctx).branches.add(((WithClauseContext)_localctx).cteStatement);
				}
				}
				setState(2590);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public Token dist;
		public Token transform;
		public SelectTrfmClauseContext trfm;
		public TrfmClauseContext trfmc;
		public TerminalNode KW_SELECT() { return getToken(CommandParser.KW_SELECT, 0); }
		public HintClauseContext hintClause() {
			return getRuleContext(HintClauseContext.class,0);
		}
		public SelectListContext selectList() {
			return getRuleContext(SelectListContext.class,0);
		}
		public TerminalNode KW_TRANSFORM() { return getToken(CommandParser.KW_TRANSFORM, 0); }
		public SelectTrfmClauseContext selectTrfmClause() {
			return getRuleContext(SelectTrfmClauseContext.class,0);
		}
		public TerminalNode KW_ALL() { return getToken(CommandParser.KW_ALL, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(CommandParser.KW_DISTINCT, 0); }
		public TrfmClauseContext trfmClause() {
			return getRuleContext(TrfmClauseContext.class,0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectClause(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_selectClause);
		int _la;
		try {
			setState(2605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2591);
				match(KW_SELECT);
				setState(2593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HintStart) {
					{
					setState(2592);
					hintClause();
					}
				}

				setState(2602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					{
					setState(2597);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
					case 1:
						{
						setState(2595);
						match(KW_ALL);
						}
						break;
					case 2:
						{
						setState(2596);
						((SelectClauseContext)_localctx).dist = match(KW_DISTINCT);
						}
						break;
					}
					setState(2599);
					selectList();
					}
					}
					break;
				case 2:
					{
					{
					setState(2600);
					((SelectClauseContext)_localctx).transform = match(KW_TRANSFORM);
					setState(2601);
					((SelectClauseContext)_localctx).trfm = selectTrfmClause();
					}
					}
					break;
				}
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2604);
				((SelectClauseContext)_localctx).trfmc = trfmClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectList(this);
		}
	}

	public final SelectListContext selectList() throws RecognitionException {
		SelectListContext _localctx = new SelectListContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_selectList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2607);
			selectItem();
			setState(2612);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,283,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2608);
					match(COMMA);
					setState(2609);
					selectItem();
					}
					} 
				}
				setState(2614);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,283,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectTrfmClauseContext extends ParserRuleContext {
		public SelectExpressionListContext exprs;
		public TableRowFormatContext inSerde;
		public RecordWriterContext inRec;
		public StringLiteralContext using;
		public StringLiteralContext stringLiteral;
		public List<StringLiteralContext> res = new ArrayList<StringLiteralContext>();
		public AliasListContext aliases;
		public ColumnNameTypeListContext cols;
		public TableRowFormatContext outSerde;
		public RecordReaderContext outRec;
		public List<TerminalNode> LPAREN() { return getTokens(CommandParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(CommandParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(CommandParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(CommandParser.RPAREN, i);
		}
		public TerminalNode KW_USING() { return getToken(CommandParser.KW_USING, 0); }
		public SelectExpressionListContext selectExpressionList() {
			return getRuleContext(SelectExpressionListContext.class,0);
		}
		public RecordWriterContext recordWriter() {
			return getRuleContext(RecordWriterContext.class,0);
		}
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public RecordReaderContext recordReader() {
			return getRuleContext(RecordReaderContext.class,0);
		}
		public TerminalNode KW_RESOURCES() { return getToken(CommandParser.KW_RESOURCES, 0); }
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public List<TableRowFormatContext> tableRowFormat() {
			return getRuleContexts(TableRowFormatContext.class);
		}
		public TableRowFormatContext tableRowFormat(int i) {
			return getRuleContext(TableRowFormatContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public AliasListContext aliasList() {
			return getRuleContext(AliasListContext.class,0);
		}
		public ColumnNameTypeListContext columnNameTypeList() {
			return getRuleContext(ColumnNameTypeListContext.class,0);
		}
		public SelectTrfmClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectTrfmClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectTrfmClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectTrfmClause(this);
		}
	}

	public final SelectTrfmClauseContext selectTrfmClause() throws RecognitionException {
		SelectTrfmClauseContext _localctx = new SelectTrfmClauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_selectTrfmClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2615);
			match(LPAREN);
			setState(2616);
			((SelectTrfmClauseContext)_localctx).exprs = selectExpressionList();
			setState(2617);
			match(RPAREN);
			setState(2619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ROW) {
				{
				setState(2618);
				((SelectTrfmClauseContext)_localctx).inSerde = tableRowFormat();
				}
			}

			setState(2621);
			((SelectTrfmClauseContext)_localctx).inRec = recordWriter();
			setState(2622);
			match(KW_USING);
			setState(2623);
			((SelectTrfmClauseContext)_localctx).using = stringLiteral();
			setState(2633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_RESOURCES) {
				{
				setState(2624);
				match(KW_RESOURCES);
				setState(2625);
				((SelectTrfmClauseContext)_localctx).stringLiteral = stringLiteral();
				((SelectTrfmClauseContext)_localctx).res.add(((SelectTrfmClauseContext)_localctx).stringLiteral);
				setState(2630);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,285,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2626);
						match(COMMA);
						setState(2627);
						((SelectTrfmClauseContext)_localctx).stringLiteral = stringLiteral();
						((SelectTrfmClauseContext)_localctx).res.add(((SelectTrfmClauseContext)_localctx).stringLiteral);
						}
						} 
					}
					setState(2632);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,285,_ctx);
				}
				}
			}

			setState(2649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(2635);
				match(KW_AS);
				setState(2647);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LPAREN:
					{
					{
					setState(2636);
					match(LPAREN);
					setState(2639);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
					case 1:
						{
						setState(2637);
						((SelectTrfmClauseContext)_localctx).aliases = aliasList();
						}
						break;
					case 2:
						{
						setState(2638);
						((SelectTrfmClauseContext)_localctx).cols = columnNameTypeList();
						}
						break;
					}
					setState(2641);
					match(RPAREN);
					}
					}
					break;
				case KW_TRUE:
				case KW_FALSE:
				case KW_ALL:
				case KW_NONE:
				case KW_LIKE:
				case KW_EXISTS:
				case KW_ASC:
				case KW_DESC:
				case KW_ORDER:
				case KW_ZORDER:
				case KW_GROUP:
				case KW_GROUPS:
				case KW_BY:
				case KW_AS:
				case KW_INSERT:
				case KW_OVERWRITE:
				case KW_OUTER:
				case KW_UNIQUEJOIN:
				case KW_LEFT:
				case KW_RIGHT:
				case KW_FULL:
				case KW_PARTITION:
				case KW_PARTITIONS:
				case KW_TABLE:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_LOCAL:
				case KW_TRANSFORM:
				case KW_USING:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_UNION:
				case KW_LOAD:
				case KW_UNLOAD:
				case KW_EXPORT:
				case KW_IMPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_IS:
				case KW_NULL:
				case KW_CREATE:
				case KW_EXTERNAL:
				case KW_ALTER:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_LAST:
				case KW_NULLS:
				case KW_AFTER:
				case KW_DESCRIBE:
				case KW_DROP:
				case KW_RENAME:
				case KW_IGNORE:
				case KW_PROTECTION:
				case KW_TO:
				case KW_COMMENT:
				case KW_BOOLEAN:
				case KW_TINYINT:
				case KW_SMALLINT:
				case KW_INT:
				case KW_BIGINT:
				case KW_FLOAT:
				case KW_DOUBLE:
				case KW_DATE:
				case KW_DATETIME:
				case KW_TIMESTAMP:
				case KW_INTERVAL:
				case KW_DECIMAL:
				case KW_STRING:
				case KW_ARRAY:
				case KW_STRUCT:
				case KW_MAP:
				case KW_UNIONTYPE:
				case KW_REDUCE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_INTO:
				case KW_BUCKETS:
				case KW_ROW:
				case KW_ROWS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_OFFLINE:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_READONLY:
				case KW_NO_DROP:
				case KW_LOCATION:
				case KW_TABLESAMPLE:
				case KW_BUCKET:
				case KW_OUT:
				case KW_OF:
				case KW_PERCENT:
				case KW_ADD:
				case KW_REPLACE:
				case KW_RLIKE:
				case KW_REGEXP:
				case KW_TEMPORARY:
				case KW_MACRO:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_PRETTY:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_WITH:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_SET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_SKEWJOIN:
				case KW_DYNAMICFILTER:
				case KW_STREAMTABLE:
				case KW_HOLD_DDLTIME:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_DELETE:
				case KW_PLUS:
				case KW_MINUS:
				case KW_FETCH:
				case KW_INTERSECT:
				case KW_VIEW:
				case KW_IN:
				case KW_DATABASE:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_GRANT:
				case KW_REVOKE:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_PROCEDURE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_READS:
				case KW_PURGE:
				case KW_RANGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BOTH:
				case KW_BINARY:
				case KW_CONTINUE:
				case KW_CURSOR:
				case KW_TRIGGER:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_ANTI:
				case KW_LATERAL:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_NULL_VALUE:
				case KW_DISTINCT_VALUE:
				case KW_TABLE_COUNT:
				case KW_COLUMN_SUM:
				case KW_COLUMN_MAX:
				case KW_COLUMN_MIN:
				case KW_EXPRESSION_CONDITION:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_UPDATE:
				case KW_MATCHED:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_ROLLUP:
				case KW_CUBE:
				case KW_DIRECTORIES:
				case KW_FOR:
				case KW_WINDOW:
				case KW_UNBOUNDED:
				case KW_PRECEDING:
				case KW_FOLLOWING:
				case KW_LOCALTIMESTAMP:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_LESS:
				case KW_MORE:
				case KW_OVER:
				case KW_GROUPING:
				case KW_SETS:
				case KW_TRUNCATE:
				case KW_NOSCAN:
				case KW_PARTIALSCAN:
				case KW_USER:
				case KW_ROLE:
				case KW_ROLES:
				case KW_INNER:
				case KW_EXCHANGE:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_AUTHORIZATION:
				case KW_CONF:
				case KW_VALUES:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_MONTH:
				case KW_DAY:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_YEARS:
				case KW_MONTHS:
				case KW_DAYS:
				case KW_HOURS:
				case KW_MINUTES:
				case KW_SECONDS:
				case KW_UDFPROPERTIES:
				case KW_EXCLUDE:
				case KW_TIES:
				case KW_NO:
				case KW_OTHERS:
				case KW_BEGIN:
				case KW_RETURNS:
				case KW_SQL:
				case KW_LOOP:
				case KW_NEW:
				case KW_LIFECYCLE:
				case KW_REMOVE:
				case KW_GRANTS:
				case KW_ACL:
				case KW_TYPE:
				case KW_LIST:
				case KW_USERS:
				case KW_WHOAMI:
				case KW_TRUSTEDPROJECTS:
				case KW_TRUSTEDPROJECT:
				case KW_SECURITYCONFIGURATION:
				case KW_PRIVILEGES:
				case KW_PROJECT:
				case KW_PROJECTS:
				case KW_LABEL:
				case KW_ALLOW:
				case KW_DISALLOW:
				case KW_PACKAGE:
				case KW_PACKAGES:
				case KW_INSTALL:
				case KW_UNINSTALL:
				case KW_P:
				case KW_JOB:
				case KW_JOBS:
				case KW_ACCOUNTPROVIDERS:
				case KW_RESOURCES:
				case KW_FLAGS:
				case KW_COUNT:
				case KW_STATISTIC:
				case KW_STATISTIC_LIST:
				case KW_GET:
				case KW_PUT:
				case KW_POLICY:
				case KW_PROJECTPROTECTION:
				case KW_EXCEPTION:
				case KW_CLEAR:
				case KW_EXPIRED:
				case KW_EXP:
				case KW_ACCOUNTPROVIDER:
				case KW_SUPER:
				case KW_VOLUMEFILE:
				case KW_VOLUMEARCHIVE:
				case KW_OFFLINEMODEL:
				case KW_PY:
				case KW_RESOURCE:
				case KW_KILL:
				case KW_STATUS:
				case KW_SETPROJECT:
				case KW_MERGE:
				case KW_SMALLFILES:
				case KW_PARTITIONPROPERTIES:
				case KW_EXSTORE:
				case KW_CHANGELOGS:
				case KW_REDO:
				case KW_CHANGEOWNER:
				case KW_RECYCLEBIN:
				case KW_PRIVILEGEPROPERTIES:
				case KW_CACHE:
				case KW_CACHEPROPERTIES:
				case KW_VARIABLES:
				case KW_EXCEPT:
				case KW_SELECTIVITY:
				case KW_EXTRACT:
				case KW_SUBSTRING:
				case KW_DEFAULT:
				case KW_ANY:
				case KW_NATURAL:
				case KW_CONSTRAINT:
				case KW_PRIMARY:
				case KW_KEY:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_CLONE:
				case KW_HISTORY:
				case KW_RESTORE:
				case KW_LSN:
				case KW_WITHIN:
				case KW_FILTER:
				case KW_TENANT:
				case KW_SHARDS:
				case KW_HUBLIFECYCLE:
				case KW_HUBTABLE:
				case KW_OUTPUT:
				case KW_CODE_BEGIN:
				case KW_CODE_END:
				case KW_MODEL:
				case KW_PROPERTIES:
				case DoubleQuoteStringLiteral:
				case ByteLengthLiteral:
				case Identifier:
					{
					setState(2645);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
					case 1:
						{
						setState(2643);
						((SelectTrfmClauseContext)_localctx).aliases = aliasList();
						}
						break;
					case 2:
						{
						setState(2644);
						((SelectTrfmClauseContext)_localctx).cols = columnNameTypeList();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ROW) {
				{
				setState(2651);
				((SelectTrfmClauseContext)_localctx).outSerde = tableRowFormat();
				}
			}

			setState(2654);
			((SelectTrfmClauseContext)_localctx).outRec = recordReader();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintClauseContext extends ParserRuleContext {
		public TerminalNode HintStart() { return getToken(CommandParser.HintStart, 0); }
		public HintListContext hintList() {
			return getRuleContext(HintListContext.class,0);
		}
		public TerminalNode STAR() { return getToken(CommandParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(CommandParser.DIVIDE, 0); }
		public HintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHintClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHintClause(this);
		}
	}

	public final HintClauseContext hintClause() throws RecognitionException {
		HintClauseContext _localctx = new HintClauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_hintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(HintStart);
			setState(2657);
			hintList();
			setState(2658);
			match(STAR);
			setState(2659);
			match(DIVIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintListContext extends ParserRuleContext {
		public List<HintItemContext> hintItem() {
			return getRuleContexts(HintItemContext.class);
		}
		public HintItemContext hintItem(int i) {
			return getRuleContext(HintItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public HintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHintList(this);
		}
	}

	public final HintListContext hintList() throws RecognitionException {
		HintListContext _localctx = new HintListContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_hintList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			hintItem();
			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2662);
				match(COMMA);
				setState(2663);
				hintItem();
				}
				}
				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintItemContext extends ParserRuleContext {
		public MapJoinHintContext mapjoin;
		public SkewJoinHintContext skewjoin;
		public SelectivityHintContext selectivity;
		public DynamicfilterHintContext dynamicfilter;
		public MapJoinHintContext mapJoinHint() {
			return getRuleContext(MapJoinHintContext.class,0);
		}
		public SkewJoinHintContext skewJoinHint() {
			return getRuleContext(SkewJoinHintContext.class,0);
		}
		public SelectivityHintContext selectivityHint() {
			return getRuleContext(SelectivityHintContext.class,0);
		}
		public DynamicfilterHintContext dynamicfilterHint() {
			return getRuleContext(DynamicfilterHintContext.class,0);
		}
		public HintNameContext hintName() {
			return getRuleContext(HintNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public HintArgsContext hintArgs() {
			return getRuleContext(HintArgsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public HintItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHintItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHintItem(this);
		}
	}

	public final HintItemContext hintItem() throws RecognitionException {
		HintItemContext _localctx = new HintItemContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_hintItem);
		int _la;
		try {
			setState(2680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2669);
				((HintItemContext)_localctx).mapjoin = mapJoinHint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2670);
				((HintItemContext)_localctx).skewjoin = skewJoinHint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2671);
				((HintItemContext)_localctx).selectivity = selectivityHint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2672);
				((HintItemContext)_localctx).dynamicfilter = dynamicfilterHint();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2673);
				hintName();
				setState(2678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2674);
					match(LPAREN);
					setState(2675);
					hintArgs();
					setState(2676);
					match(RPAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DynamicfilterHintContext extends ParserRuleContext {
		public TerminalNode KW_DYNAMICFILTER() { return getToken(CommandParser.KW_DYNAMICFILTER, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public HintArgsContext hintArgs() {
			return getRuleContext(HintArgsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public DynamicfilterHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamicfilterHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDynamicfilterHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDynamicfilterHint(this);
		}
	}

	public final DynamicfilterHintContext dynamicfilterHint() throws RecognitionException {
		DynamicfilterHintContext _localctx = new DynamicfilterHintContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_dynamicfilterHint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2682);
			match(KW_DYNAMICFILTER);
			{
			setState(2683);
			match(LPAREN);
			setState(2684);
			hintArgs();
			setState(2685);
			match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MapJoinHintContext extends ParserRuleContext {
		public TerminalNode KW_MAPJOIN() { return getToken(CommandParser.KW_MAPJOIN, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public HintArgsContext hintArgs() {
			return getRuleContext(HintArgsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public MapJoinHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapJoinHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMapJoinHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMapJoinHint(this);
		}
	}

	public final MapJoinHintContext mapJoinHint() throws RecognitionException {
		MapJoinHintContext _localctx = new MapJoinHintContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_mapJoinHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2687);
			match(KW_MAPJOIN);
			setState(2692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(2688);
				match(LPAREN);
				setState(2689);
				hintArgs();
				setState(2690);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkewJoinHintContext extends ParserRuleContext {
		public TerminalNode KW_SKEWJOIN() { return getToken(CommandParser.KW_SKEWJOIN, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public MultipleSkewHintArgsContext multipleSkewHintArgs() {
			return getRuleContext(MultipleSkewHintArgsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public SkewJoinHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewJoinHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSkewJoinHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSkewJoinHint(this);
		}
	}

	public final SkewJoinHintContext skewJoinHint() throws RecognitionException {
		SkewJoinHintContext _localctx = new SkewJoinHintContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_skewJoinHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2694);
			match(KW_SKEWJOIN);
			setState(2699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(2695);
				match(LPAREN);
				setState(2696);
				multipleSkewHintArgs();
				setState(2697);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectivityHintContext extends ParserRuleContext {
		public Token name;
		public Token num;
		public TerminalNode KW_SELECTIVITY() { return getToken(CommandParser.KW_SELECTIVITY, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public TerminalNode Number() { return getToken(CommandParser.Number, 0); }
		public SelectivityHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectivityHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectivityHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectivityHint(this);
		}
	}

	public final SelectivityHintContext selectivityHint() throws RecognitionException {
		SelectivityHintContext _localctx = new SelectivityHintContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_selectivityHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2701);
			((SelectivityHintContext)_localctx).name = match(KW_SELECTIVITY);
			setState(2705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(2702);
				match(LPAREN);
				setState(2703);
				((SelectivityHintContext)_localctx).num = match(Number);
				setState(2704);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleSkewHintArgsContext extends ParserRuleContext {
		public SkewJoinHintArgsContext skewJoinHintArgs;
		public List<SkewJoinHintArgsContext> multipleSkewHints = new ArrayList<SkewJoinHintArgsContext>();
		public List<SkewJoinHintArgsContext> skewJoinHintArgs() {
			return getRuleContexts(SkewJoinHintArgsContext.class);
		}
		public SkewJoinHintArgsContext skewJoinHintArgs(int i) {
			return getRuleContext(SkewJoinHintArgsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public MultipleSkewHintArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleSkewHintArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterMultipleSkewHintArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitMultipleSkewHintArgs(this);
		}
	}

	public final MultipleSkewHintArgsContext multipleSkewHintArgs() throws RecognitionException {
		MultipleSkewHintArgsContext _localctx = new MultipleSkewHintArgsContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_multipleSkewHintArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2707);
			((MultipleSkewHintArgsContext)_localctx).skewJoinHintArgs = skewJoinHintArgs();
			((MultipleSkewHintArgsContext)_localctx).multipleSkewHints.add(((MultipleSkewHintArgsContext)_localctx).skewJoinHintArgs);
			setState(2712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2708);
				match(COMMA);
				setState(2709);
				((MultipleSkewHintArgsContext)_localctx).skewJoinHintArgs = skewJoinHintArgs();
				((MultipleSkewHintArgsContext)_localctx).multipleSkewHints.add(((MultipleSkewHintArgsContext)_localctx).skewJoinHintArgs);
				}
				}
				setState(2714);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkewJoinHintArgsContext extends ParserRuleContext {
		public IdentifierContext table;
		public SkewColumnsContext columns;
		public SkewJoinHintKeyValuesContext skewJoinHintKeyValues;
		public List<SkewJoinHintKeyValuesContext> keyValues = new ArrayList<SkewJoinHintKeyValuesContext>();
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SkewColumnsContext skewColumns() {
			return getRuleContext(SkewColumnsContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(CommandParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(CommandParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(CommandParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(CommandParser.RPAREN, i);
		}
		public List<SkewJoinHintKeyValuesContext> skewJoinHintKeyValues() {
			return getRuleContexts(SkewJoinHintKeyValuesContext.class);
		}
		public SkewJoinHintKeyValuesContext skewJoinHintKeyValues(int i) {
			return getRuleContext(SkewJoinHintKeyValuesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public SkewJoinHintArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewJoinHintArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSkewJoinHintArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSkewJoinHintArgs(this);
		}
	}

	public final SkewJoinHintArgsContext skewJoinHintArgs() throws RecognitionException {
		SkewJoinHintArgsContext _localctx = new SkewJoinHintArgsContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_skewJoinHintArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2715);
			((SkewJoinHintArgsContext)_localctx).table = identifier();
			setState(2733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(2716);
				((SkewJoinHintArgsContext)_localctx).columns = skewColumns();
				setState(2730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LPAREN) {
					{
					{
					setState(2717);
					match(LPAREN);
					setState(2718);
					((SkewJoinHintArgsContext)_localctx).skewJoinHintKeyValues = skewJoinHintKeyValues();
					((SkewJoinHintArgsContext)_localctx).keyValues.add(((SkewJoinHintArgsContext)_localctx).skewJoinHintKeyValues);
					setState(2723);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2719);
						match(COMMA);
						setState(2720);
						((SkewJoinHintArgsContext)_localctx).skewJoinHintKeyValues = skewJoinHintKeyValues();
						((SkewJoinHintArgsContext)_localctx).keyValues.add(((SkewJoinHintArgsContext)_localctx).skewJoinHintKeyValues);
						}
						}
						setState(2725);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2726);
					match(RPAREN);
					}
					}
					setState(2732);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkewColumnsContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> skewKeys = new ArrayList<IdentifierContext>();
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public SkewColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSkewColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSkewColumns(this);
		}
	}

	public final SkewColumnsContext skewColumns() throws RecognitionException {
		SkewColumnsContext _localctx = new SkewColumnsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_skewColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2735);
			match(LPAREN);
			setState(2736);
			((SkewColumnsContext)_localctx).identifier = identifier();
			((SkewColumnsContext)_localctx).skewKeys.add(((SkewColumnsContext)_localctx).identifier);
			setState(2741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2737);
				match(COMMA);
				setState(2738);
				((SkewColumnsContext)_localctx).identifier = identifier();
				((SkewColumnsContext)_localctx).skewKeys.add(((SkewColumnsContext)_localctx).identifier);
				}
				}
				setState(2743);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2744);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkewJoinHintKeyValuesContext extends ParserRuleContext {
		public ConstantContext constant;
		public List<ConstantContext> keyValue = new ArrayList<ConstantContext>();
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public SkewJoinHintKeyValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewJoinHintKeyValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSkewJoinHintKeyValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSkewJoinHintKeyValues(this);
		}
	}

	public final SkewJoinHintKeyValuesContext skewJoinHintKeyValues() throws RecognitionException {
		SkewJoinHintKeyValuesContext _localctx = new SkewJoinHintKeyValuesContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_skewJoinHintKeyValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			match(LPAREN);
			setState(2747);
			((SkewJoinHintKeyValuesContext)_localctx).constant = constant();
			((SkewJoinHintKeyValuesContext)_localctx).keyValue.add(((SkewJoinHintKeyValuesContext)_localctx).constant);
			setState(2752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2748);
				match(COMMA);
				setState(2749);
				((SkewJoinHintKeyValuesContext)_localctx).constant = constant();
				((SkewJoinHintKeyValuesContext)_localctx).keyValue.add(((SkewJoinHintKeyValuesContext)_localctx).constant);
				}
				}
				setState(2754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2755);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintNameContext extends ParserRuleContext {
		public IdentifierContext id;
		public TerminalNode KW_STREAMTABLE() { return getToken(CommandParser.KW_STREAMTABLE, 0); }
		public TerminalNode KW_HOLD_DDLTIME() { return getToken(CommandParser.KW_HOLD_DDLTIME, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHintName(this);
		}
	}

	public final HintNameContext hintName() throws RecognitionException {
		HintNameContext _localctx = new HintNameContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_hintName);
		try {
			setState(2760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2757);
				match(KW_STREAMTABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2758);
				match(KW_HOLD_DDLTIME);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2759);
				((HintNameContext)_localctx).id = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintArgsContext extends ParserRuleContext {
		public List<HintArgNameContext> hintArgName() {
			return getRuleContexts(HintArgNameContext.class);
		}
		public HintArgNameContext hintArgName(int i) {
			return getRuleContext(HintArgNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public HintArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHintArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHintArgs(this);
		}
	}

	public final HintArgsContext hintArgs() throws RecognitionException {
		HintArgsContext _localctx = new HintArgsContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_hintArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2762);
			hintArgName();
			setState(2767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2763);
				match(COMMA);
				setState(2764);
				hintArgName();
				}
				}
				setState(2769);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintArgNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HintArgNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintArgName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHintArgName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHintArgName(this);
		}
	}

	public final HintArgNameContext hintArgName() throws RecognitionException {
		HintArgNameContext _localctx = new HintArgNameContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_hintArgName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2770);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public AliasIdentifierContext aliasIdentifier;
		public List<AliasIdentifierContext> alias = new ArrayList<AliasIdentifierContext>();
		public TableAllColumnsContext tableAllColumns() {
			return getRuleContext(TableAllColumnsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<AliasIdentifierContext> aliasIdentifier() {
			return getRuleContexts(AliasIdentifierContext.class);
		}
		public AliasIdentifierContext aliasIdentifier(int i) {
			return getRuleContext(AliasIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectItem(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_selectItem);
		int _la;
		try {
			setState(2792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2772);
				tableAllColumns();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2773);
				expression();
				setState(2790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					{
					setState(2775);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
					case 1:
						{
						setState(2774);
						match(KW_AS);
						}
						break;
					}
					setState(2777);
					((SelectItemContext)_localctx).aliasIdentifier = aliasIdentifier();
					((SelectItemContext)_localctx).alias.add(((SelectItemContext)_localctx).aliasIdentifier);
					}
					}
					break;
				case 2:
					{
					{
					setState(2778);
					match(KW_AS);
					setState(2779);
					match(LPAREN);
					setState(2780);
					((SelectItemContext)_localctx).aliasIdentifier = aliasIdentifier();
					((SelectItemContext)_localctx).alias.add(((SelectItemContext)_localctx).aliasIdentifier);
					setState(2785);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2781);
						match(COMMA);
						setState(2782);
						((SelectItemContext)_localctx).aliasIdentifier = aliasIdentifier();
						((SelectItemContext)_localctx).alias.add(((SelectItemContext)_localctx).aliasIdentifier);
						}
						}
						setState(2787);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2788);
					match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrfmClauseContext extends ParserRuleContext {
		public SelectExpressionListContext exprs;
		public RowFormatContext inSerde;
		public RecordWriterContext inRec;
		public StringLiteralContext using;
		public StringLiteralContext stringLiteral;
		public List<StringLiteralContext> res = new ArrayList<StringLiteralContext>();
		public AliasListContext aliases;
		public ColumnNameTypeListContext cols;
		public RowFormatContext outSerde;
		public RecordReaderContext outRec;
		public TerminalNode KW_USING() { return getToken(CommandParser.KW_USING, 0); }
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public RecordWriterContext recordWriter() {
			return getRuleContext(RecordWriterContext.class,0);
		}
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public RecordReaderContext recordReader() {
			return getRuleContext(RecordReaderContext.class,0);
		}
		public TerminalNode KW_MAP() { return getToken(CommandParser.KW_MAP, 0); }
		public TerminalNode KW_REDUCE() { return getToken(CommandParser.KW_REDUCE, 0); }
		public SelectExpressionListContext selectExpressionList() {
			return getRuleContext(SelectExpressionListContext.class,0);
		}
		public TerminalNode KW_RESOURCES() { return getToken(CommandParser.KW_RESOURCES, 0); }
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public AliasListContext aliasList() {
			return getRuleContext(AliasListContext.class,0);
		}
		public ColumnNameTypeListContext columnNameTypeList() {
			return getRuleContext(ColumnNameTypeListContext.class,0);
		}
		public TrfmClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trfmClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTrfmClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTrfmClause(this);
		}
	}

	public final TrfmClauseContext trfmClause() throws RecognitionException {
		TrfmClauseContext _localctx = new TrfmClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_trfmClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_MAP:
				{
				setState(2794);
				match(KW_MAP);
				setState(2795);
				((TrfmClauseContext)_localctx).exprs = selectExpressionList();
				}
				break;
			case KW_REDUCE:
				{
				setState(2796);
				match(KW_REDUCE);
				setState(2797);
				((TrfmClauseContext)_localctx).exprs = selectExpressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2800);
			((TrfmClauseContext)_localctx).inSerde = rowFormat();
			setState(2801);
			((TrfmClauseContext)_localctx).inRec = recordWriter();
			setState(2802);
			match(KW_USING);
			setState(2803);
			((TrfmClauseContext)_localctx).using = stringLiteral();
			setState(2813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_RESOURCES) {
				{
				setState(2804);
				match(KW_RESOURCES);
				setState(2805);
				((TrfmClauseContext)_localctx).stringLiteral = stringLiteral();
				((TrfmClauseContext)_localctx).res.add(((TrfmClauseContext)_localctx).stringLiteral);
				setState(2810);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2806);
						match(COMMA);
						setState(2807);
						((TrfmClauseContext)_localctx).stringLiteral = stringLiteral();
						((TrfmClauseContext)_localctx).res.add(((TrfmClauseContext)_localctx).stringLiteral);
						}
						} 
					}
					setState(2812);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
				}
				}
			}

			setState(2829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(2815);
				match(KW_AS);
				setState(2827);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LPAREN:
					{
					{
					setState(2816);
					match(LPAREN);
					setState(2819);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
					case 1:
						{
						setState(2817);
						((TrfmClauseContext)_localctx).aliases = aliasList();
						}
						break;
					case 2:
						{
						setState(2818);
						((TrfmClauseContext)_localctx).cols = columnNameTypeList();
						}
						break;
					}
					setState(2821);
					match(RPAREN);
					}
					}
					break;
				case KW_TRUE:
				case KW_FALSE:
				case KW_ALL:
				case KW_NONE:
				case KW_LIKE:
				case KW_EXISTS:
				case KW_ASC:
				case KW_DESC:
				case KW_ORDER:
				case KW_ZORDER:
				case KW_GROUP:
				case KW_GROUPS:
				case KW_BY:
				case KW_AS:
				case KW_INSERT:
				case KW_OVERWRITE:
				case KW_OUTER:
				case KW_UNIQUEJOIN:
				case KW_LEFT:
				case KW_RIGHT:
				case KW_FULL:
				case KW_PARTITION:
				case KW_PARTITIONS:
				case KW_TABLE:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_LOCAL:
				case KW_TRANSFORM:
				case KW_USING:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_UNION:
				case KW_LOAD:
				case KW_UNLOAD:
				case KW_EXPORT:
				case KW_IMPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_IS:
				case KW_NULL:
				case KW_CREATE:
				case KW_EXTERNAL:
				case KW_ALTER:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_LAST:
				case KW_NULLS:
				case KW_AFTER:
				case KW_DESCRIBE:
				case KW_DROP:
				case KW_RENAME:
				case KW_IGNORE:
				case KW_PROTECTION:
				case KW_TO:
				case KW_COMMENT:
				case KW_BOOLEAN:
				case KW_TINYINT:
				case KW_SMALLINT:
				case KW_INT:
				case KW_BIGINT:
				case KW_FLOAT:
				case KW_DOUBLE:
				case KW_DATE:
				case KW_DATETIME:
				case KW_TIMESTAMP:
				case KW_INTERVAL:
				case KW_DECIMAL:
				case KW_STRING:
				case KW_ARRAY:
				case KW_STRUCT:
				case KW_MAP:
				case KW_UNIONTYPE:
				case KW_REDUCE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_INTO:
				case KW_BUCKETS:
				case KW_ROW:
				case KW_ROWS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_OFFLINE:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_READONLY:
				case KW_NO_DROP:
				case KW_LOCATION:
				case KW_TABLESAMPLE:
				case KW_BUCKET:
				case KW_OUT:
				case KW_OF:
				case KW_PERCENT:
				case KW_ADD:
				case KW_REPLACE:
				case KW_RLIKE:
				case KW_REGEXP:
				case KW_TEMPORARY:
				case KW_MACRO:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_PRETTY:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_WITH:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_SET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_SKEWJOIN:
				case KW_DYNAMICFILTER:
				case KW_STREAMTABLE:
				case KW_HOLD_DDLTIME:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_DELETE:
				case KW_PLUS:
				case KW_MINUS:
				case KW_FETCH:
				case KW_INTERSECT:
				case KW_VIEW:
				case KW_IN:
				case KW_DATABASE:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_GRANT:
				case KW_REVOKE:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_PROCEDURE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_READS:
				case KW_PURGE:
				case KW_RANGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BOTH:
				case KW_BINARY:
				case KW_CONTINUE:
				case KW_CURSOR:
				case KW_TRIGGER:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_ANTI:
				case KW_LATERAL:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_NULL_VALUE:
				case KW_DISTINCT_VALUE:
				case KW_TABLE_COUNT:
				case KW_COLUMN_SUM:
				case KW_COLUMN_MAX:
				case KW_COLUMN_MIN:
				case KW_EXPRESSION_CONDITION:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_UPDATE:
				case KW_MATCHED:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_ROLLUP:
				case KW_CUBE:
				case KW_DIRECTORIES:
				case KW_FOR:
				case KW_WINDOW:
				case KW_UNBOUNDED:
				case KW_PRECEDING:
				case KW_FOLLOWING:
				case KW_LOCALTIMESTAMP:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_LESS:
				case KW_MORE:
				case KW_OVER:
				case KW_GROUPING:
				case KW_SETS:
				case KW_TRUNCATE:
				case KW_NOSCAN:
				case KW_PARTIALSCAN:
				case KW_USER:
				case KW_ROLE:
				case KW_ROLES:
				case KW_INNER:
				case KW_EXCHANGE:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_AUTHORIZATION:
				case KW_CONF:
				case KW_VALUES:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_MONTH:
				case KW_DAY:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_YEARS:
				case KW_MONTHS:
				case KW_DAYS:
				case KW_HOURS:
				case KW_MINUTES:
				case KW_SECONDS:
				case KW_UDFPROPERTIES:
				case KW_EXCLUDE:
				case KW_TIES:
				case KW_NO:
				case KW_OTHERS:
				case KW_BEGIN:
				case KW_RETURNS:
				case KW_SQL:
				case KW_LOOP:
				case KW_NEW:
				case KW_LIFECYCLE:
				case KW_REMOVE:
				case KW_GRANTS:
				case KW_ACL:
				case KW_TYPE:
				case KW_LIST:
				case KW_USERS:
				case KW_WHOAMI:
				case KW_TRUSTEDPROJECTS:
				case KW_TRUSTEDPROJECT:
				case KW_SECURITYCONFIGURATION:
				case KW_PRIVILEGES:
				case KW_PROJECT:
				case KW_PROJECTS:
				case KW_LABEL:
				case KW_ALLOW:
				case KW_DISALLOW:
				case KW_PACKAGE:
				case KW_PACKAGES:
				case KW_INSTALL:
				case KW_UNINSTALL:
				case KW_P:
				case KW_JOB:
				case KW_JOBS:
				case KW_ACCOUNTPROVIDERS:
				case KW_RESOURCES:
				case KW_FLAGS:
				case KW_COUNT:
				case KW_STATISTIC:
				case KW_STATISTIC_LIST:
				case KW_GET:
				case KW_PUT:
				case KW_POLICY:
				case KW_PROJECTPROTECTION:
				case KW_EXCEPTION:
				case KW_CLEAR:
				case KW_EXPIRED:
				case KW_EXP:
				case KW_ACCOUNTPROVIDER:
				case KW_SUPER:
				case KW_VOLUMEFILE:
				case KW_VOLUMEARCHIVE:
				case KW_OFFLINEMODEL:
				case KW_PY:
				case KW_RESOURCE:
				case KW_KILL:
				case KW_STATUS:
				case KW_SETPROJECT:
				case KW_MERGE:
				case KW_SMALLFILES:
				case KW_PARTITIONPROPERTIES:
				case KW_EXSTORE:
				case KW_CHANGELOGS:
				case KW_REDO:
				case KW_CHANGEOWNER:
				case KW_RECYCLEBIN:
				case KW_PRIVILEGEPROPERTIES:
				case KW_CACHE:
				case KW_CACHEPROPERTIES:
				case KW_VARIABLES:
				case KW_EXCEPT:
				case KW_SELECTIVITY:
				case KW_EXTRACT:
				case KW_SUBSTRING:
				case KW_DEFAULT:
				case KW_ANY:
				case KW_NATURAL:
				case KW_CONSTRAINT:
				case KW_PRIMARY:
				case KW_KEY:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_CLONE:
				case KW_HISTORY:
				case KW_RESTORE:
				case KW_LSN:
				case KW_WITHIN:
				case KW_FILTER:
				case KW_TENANT:
				case KW_SHARDS:
				case KW_HUBLIFECYCLE:
				case KW_HUBTABLE:
				case KW_OUTPUT:
				case KW_CODE_BEGIN:
				case KW_CODE_END:
				case KW_MODEL:
				case KW_PROPERTIES:
				case DoubleQuoteStringLiteral:
				case ByteLengthLiteral:
				case Identifier:
					{
					setState(2825);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						setState(2823);
						((TrfmClauseContext)_localctx).aliases = aliasList();
						}
						break;
					case 2:
						{
						setState(2824);
						((TrfmClauseContext)_localctx).cols = columnNameTypeList();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2831);
			((TrfmClauseContext)_localctx).outSerde = rowFormat();
			setState(2832);
			((TrfmClauseContext)_localctx).outRec = recordReader();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectExpressionContext extends ParserRuleContext {
		public TableAllColumnsContext wildcardCol;
		public ExpressionContext exp;
		public TableAllColumnsContext tableAllColumns() {
			return getRuleContext(TableAllColumnsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectExpression(this);
		}
	}

	public final SelectExpressionContext selectExpression() throws RecognitionException {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_selectExpression);
		try {
			setState(2836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2834);
				((SelectExpressionContext)_localctx).wildcardCol = tableAllColumns();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2835);
				((SelectExpressionContext)_localctx).exp = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectExpressionListContext extends ParserRuleContext {
		public List<SelectExpressionContext> selectExpression() {
			return getRuleContexts(SelectExpressionContext.class);
		}
		public SelectExpressionContext selectExpression(int i) {
			return getRuleContext(SelectExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public SelectExpressionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpressionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSelectExpressionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSelectExpressionList(this);
		}
	}

	public final SelectExpressionListContext selectExpressionList() throws RecognitionException {
		SelectExpressionListContext _localctx = new SelectExpressionListContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_selectExpressionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2838);
			selectExpression();
			setState(2843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2839);
				match(COMMA);
				setState(2840);
				selectExpression();
				}
				}
				setState(2845);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public Window_defnContext window_defn;
		public List<Window_defnContext> winDef = new ArrayList<Window_defnContext>();
		public TerminalNode KW_WINDOW() { return getToken(CommandParser.KW_WINDOW, 0); }
		public List<Window_defnContext> window_defn() {
			return getRuleContexts(Window_defnContext.class);
		}
		public Window_defnContext window_defn(int i) {
			return getRuleContext(Window_defnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWindow_clause(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_window_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2846);
			match(KW_WINDOW);
			setState(2847);
			((Window_clauseContext)_localctx).window_defn = window_defn();
			((Window_clauseContext)_localctx).winDef.add(((Window_clauseContext)_localctx).window_defn);
			setState(2852);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2848);
					match(COMMA);
					setState(2849);
					((Window_clauseContext)_localctx).window_defn = window_defn();
					((Window_clauseContext)_localctx).winDef.add(((Window_clauseContext)_localctx).window_defn);
					}
					} 
				}
				setState(2854);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_defnContext extends ParserRuleContext {
		public IdentifierContext name;
		public Window_specificationContext spec;
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_defnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_defn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWindow_defn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWindow_defn(this);
		}
	}

	public final Window_defnContext window_defn() throws RecognitionException {
		Window_defnContext _localctx = new Window_defnContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_window_defn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2855);
			((Window_defnContext)_localctx).name = identifier();
			setState(2856);
			match(KW_AS);
			setState(2857);
			((Window_defnContext)_localctx).spec = window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public IdentifierContext id;
		public PartitioningSpecContext p;
		public Window_frameContext w;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public PartitioningSpecContext partitioningSpec() {
			return getRuleContext(PartitioningSpecContext.class,0);
		}
		public Window_frameContext window_frame() {
			return getRuleContext(Window_frameContext.class,0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWindow_specification(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_window_specification);
		int _la;
		try {
			setState(2871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(2859);
				((Window_specificationContext)_localctx).id = identifier();
				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2860);
				match(LPAREN);
				{
				setState(2862);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
				case 1:
					{
					setState(2861);
					((Window_specificationContext)_localctx).id = identifier();
					}
					break;
				}
				setState(2865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (KW_ORDER - 30)) | (1L << (KW_PARTITION - 30)) | (1L << (KW_CLUSTER - 30)) | (1L << (KW_DISTRIBUTE - 30)) | (1L << (KW_SORT - 30)))) != 0)) {
					{
					setState(2864);
					((Window_specificationContext)_localctx).p = partitioningSpec();
					}
				}

				setState(2868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_GROUPS || _la==KW_ROWS || _la==KW_RANGE) {
					{
					setState(2867);
					((Window_specificationContext)_localctx).w = window_frame();
					}
				}

				}
				setState(2870);
				match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frameContext extends ParserRuleContext {
		public Token frameType;
		public Window_frame_boundaryContext b;
		public Frame_exclusionContext ex;
		public Window_frame_boundaryContext s;
		public Window_frame_boundaryContext end;
		public List<Window_frame_boundaryContext> window_frame_boundary() {
			return getRuleContexts(Window_frame_boundaryContext.class);
		}
		public Window_frame_boundaryContext window_frame_boundary(int i) {
			return getRuleContext(Window_frame_boundaryContext.class,i);
		}
		public TerminalNode KW_ROWS() { return getToken(CommandParser.KW_ROWS, 0); }
		public TerminalNode KW_RANGE() { return getToken(CommandParser.KW_RANGE, 0); }
		public TerminalNode KW_GROUPS() { return getToken(CommandParser.KW_GROUPS, 0); }
		public Frame_exclusionContext frame_exclusion() {
			return getRuleContext(Frame_exclusionContext.class,0);
		}
		public TerminalNode KW_BETWEEN() { return getToken(CommandParser.KW_BETWEEN, 0); }
		public TerminalNode KW_AND() { return getToken(CommandParser.KW_AND, 0); }
		public Window_frameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWindow_frame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWindow_frame(this);
		}
	}

	public final Window_frameContext window_frame() throws RecognitionException {
		Window_frameContext _localctx = new Window_frameContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_window_frame);
		int _la;
		try {
			setState(2886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2873);
				((Window_frameContext)_localctx).frameType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==KW_GROUPS || _la==KW_ROWS || _la==KW_RANGE) ) {
					((Window_frameContext)_localctx).frameType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2874);
				((Window_frameContext)_localctx).b = window_frame_boundary();
				setState(2876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXCLUDE) {
					{
					setState(2875);
					((Window_frameContext)_localctx).ex = frame_exclusion();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2878);
				((Window_frameContext)_localctx).frameType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==KW_GROUPS || _la==KW_ROWS || _la==KW_RANGE) ) {
					((Window_frameContext)_localctx).frameType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2879);
				match(KW_BETWEEN);
				setState(2880);
				((Window_frameContext)_localctx).s = window_frame_boundary();
				setState(2881);
				match(KW_AND);
				setState(2882);
				((Window_frameContext)_localctx).end = window_frame_boundary();
				setState(2884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXCLUDE) {
					{
					setState(2883);
					((Window_frameContext)_localctx).ex = frame_exclusion();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_exclusionContext extends ParserRuleContext {
		public TerminalNode KW_EXCLUDE() { return getToken(CommandParser.KW_EXCLUDE, 0); }
		public TerminalNode KW_CURRENT() { return getToken(CommandParser.KW_CURRENT, 0); }
		public TerminalNode KW_ROW() { return getToken(CommandParser.KW_ROW, 0); }
		public TerminalNode KW_GROUP() { return getToken(CommandParser.KW_GROUP, 0); }
		public TerminalNode KW_TIES() { return getToken(CommandParser.KW_TIES, 0); }
		public TerminalNode KW_NO() { return getToken(CommandParser.KW_NO, 0); }
		public TerminalNode KW_OTHERS() { return getToken(CommandParser.KW_OTHERS, 0); }
		public Frame_exclusionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_exclusion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFrame_exclusion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFrame_exclusion(this);
		}
	}

	public final Frame_exclusionContext frame_exclusion() throws RecognitionException {
		Frame_exclusionContext _localctx = new Frame_exclusionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_frame_exclusion);
		try {
			setState(2898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2888);
				match(KW_EXCLUDE);
				setState(2889);
				match(KW_CURRENT);
				setState(2890);
				match(KW_ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2891);
				match(KW_EXCLUDE);
				setState(2892);
				match(KW_GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2893);
				match(KW_EXCLUDE);
				setState(2894);
				match(KW_TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2895);
				match(KW_EXCLUDE);
				setState(2896);
				match(KW_NO);
				setState(2897);
				match(KW_OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundaryContext extends ParserRuleContext {
		public Token d;
		public MathExpressionContext value;
		public TerminalNode KW_UNBOUNDED() { return getToken(CommandParser.KW_UNBOUNDED, 0); }
		public TerminalNode KW_PRECEDING() { return getToken(CommandParser.KW_PRECEDING, 0); }
		public TerminalNode KW_FOLLOWING() { return getToken(CommandParser.KW_FOLLOWING, 0); }
		public TerminalNode KW_CURRENT() { return getToken(CommandParser.KW_CURRENT, 0); }
		public TerminalNode KW_ROW() { return getToken(CommandParser.KW_ROW, 0); }
		public MathExpressionContext mathExpression() {
			return getRuleContext(MathExpressionContext.class,0);
		}
		public Window_frame_boundaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_boundary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWindow_frame_boundary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWindow_frame_boundary(this);
		}
	}

	public final Window_frame_boundaryContext window_frame_boundary() throws RecognitionException {
		Window_frame_boundaryContext _localctx = new Window_frame_boundaryContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_window_frame_boundary);
		try {
			setState(2912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2900);
				match(KW_UNBOUNDED);
				setState(2903);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_PRECEDING:
					{
					setState(2901);
					((Window_frame_boundaryContext)_localctx).d = match(KW_PRECEDING);
					}
					break;
				case KW_FOLLOWING:
					{
					setState(2902);
					((Window_frame_boundaryContext)_localctx).d = match(KW_FOLLOWING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2905);
				match(KW_CURRENT);
				setState(2906);
				match(KW_ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2907);
				((Window_frame_boundaryContext)_localctx).value = mathExpression(0);
				setState(2910);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_PRECEDING:
					{
					setState(2908);
					((Window_frame_boundaryContext)_localctx).d = match(KW_PRECEDING);
					}
					break;
				case KW_FOLLOWING:
					{
					setState(2909);
					((Window_frame_boundaryContext)_localctx).d = match(KW_FOLLOWING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAllColumnsContext extends ParserRuleContext {
		public IdentifierContext table;
		public TerminalNode STAR() { return getToken(CommandParser.STAR, 0); }
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableAllColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAllColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableAllColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableAllColumns(this);
		}
	}

	public final TableAllColumnsContext tableAllColumns() throws RecognitionException {
		TableAllColumnsContext _localctx = new TableAllColumnsContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_tableAllColumns);
		try {
			setState(2919);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(2914);
				match(STAR);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case ByteLengthLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(2915);
				((TableAllColumnsContext)_localctx).table = identifier();
				setState(2916);
				match(DOT);
				setState(2917);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionListContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterExpressionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitExpressionList(this);
		}
	}

	public final ExpressionListContext expressionList() throws RecognitionException {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_expressionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2921);
			expression();
			setState(2926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2922);
				match(COMMA);
				setState(2923);
				expression();
				}
				}
				setState(2928);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasListContext extends ParserRuleContext {
		public AliasIdentifierContext aliasIdentifier;
		public List<AliasIdentifierContext> ids = new ArrayList<AliasIdentifierContext>();
		public List<AliasIdentifierContext> aliasIdentifier() {
			return getRuleContexts(AliasIdentifierContext.class);
		}
		public AliasIdentifierContext aliasIdentifier(int i) {
			return getRuleContext(AliasIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public AliasListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAliasList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAliasList(this);
		}
	}

	public final AliasListContext aliasList() throws RecognitionException {
		AliasListContext _localctx = new AliasListContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_aliasList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			((AliasListContext)_localctx).aliasIdentifier = aliasIdentifier();
			((AliasListContext)_localctx).ids.add(((AliasListContext)_localctx).aliasIdentifier);
			setState(2934);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2930);
					match(COMMA);
					setState(2931);
					((AliasListContext)_localctx).aliasIdentifier = aliasIdentifier();
					((AliasListContext)_localctx).ids.add(((AliasListContext)_localctx).aliasIdentifier);
					}
					} 
				}
				setState(2936);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public JoinSourceContext joinSource() {
			return getRuleContext(JoinSourceContext.class,0);
		}
		public HintClauseContext hintClause() {
			return getRuleContext(HintClauseContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFromClause(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2937);
			match(KW_FROM);
			setState(2939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HintStart) {
				{
				setState(2938);
				hintClause();
				}
			}

			setState(2941);
			joinSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinSourceContext extends ParserRuleContext {
		public FromSourceContext lhs;
		public JoinRHSContext joinRHS;
		public List<JoinRHSContext> rhs = new ArrayList<JoinRHSContext>();
		public FromSourceContext fromSource() {
			return getRuleContext(FromSourceContext.class,0);
		}
		public List<JoinRHSContext> joinRHS() {
			return getRuleContexts(JoinRHSContext.class);
		}
		public JoinRHSContext joinRHS(int i) {
			return getRuleContext(JoinRHSContext.class,i);
		}
		public UniqueJoinTokenContext uniqueJoinToken() {
			return getRuleContext(UniqueJoinTokenContext.class,0);
		}
		public List<UniqueJoinSourceContext> uniqueJoinSource() {
			return getRuleContexts(UniqueJoinSourceContext.class);
		}
		public UniqueJoinSourceContext uniqueJoinSource(int i) {
			return getRuleContext(UniqueJoinSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public JoinSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterJoinSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitJoinSource(this);
		}
	}

	public final JoinSourceContext joinSource() throws RecognitionException {
		JoinSourceContext _localctx = new JoinSourceContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_joinSource);
		try {
			int _alt;
			setState(2958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2943);
				((JoinSourceContext)_localctx).lhs = fromSource();
				setState(2947);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,335,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2944);
						((JoinSourceContext)_localctx).joinRHS = joinRHS();
						((JoinSourceContext)_localctx).rhs.add(((JoinSourceContext)_localctx).joinRHS);
						}
						} 
					}
					setState(2949);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,335,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2950);
				uniqueJoinToken();
				setState(2951);
				uniqueJoinSource();
				setState(2954); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2952);
						match(COMMA);
						setState(2953);
						uniqueJoinSource();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2956); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinRHSContext extends ParserRuleContext {
		public JoinTokenContext joinType;
		public FromSourceContext joinTable;
		public IdentifierContext identifier;
		public List<IdentifierContext> commonCols = new ArrayList<IdentifierContext>();
		public ExpressionContext expression;
		public List<ExpressionContext> joinOn = new ArrayList<ExpressionContext>();
		public FunctionIdentifierContext cbn;
		public SelectExpressionListContext exprs;
		public AliasIdentifierContext aliasIdentifier;
		public List<AliasIdentifierContext> alias = new ArrayList<AliasIdentifierContext>();
		public SortByClauseContext sort;
		public Token natural;
		public LateralViewContext lv;
		public JoinTokenContext joinToken() {
			return getRuleContext(JoinTokenContext.class,0);
		}
		public FromSourceContext fromSource() {
			return getRuleContext(FromSourceContext.class,0);
		}
		public TerminalNode KW_USING() { return getToken(CommandParser.KW_USING, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(CommandParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(CommandParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(CommandParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(CommandParser.RPAREN, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public List<TerminalNode> KW_ON() { return getTokens(CommandParser.KW_ON); }
		public TerminalNode KW_ON(int i) {
			return getToken(CommandParser.KW_ON, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public TerminalNode KW_UDFPROPERTIES() { return getToken(CommandParser.KW_UDFPROPERTIES, 0); }
		public UserDefinedJoinPropertiesListContext userDefinedJoinPropertiesList() {
			return getRuleContext(UserDefinedJoinPropertiesListContext.class,0);
		}
		public SelectExpressionListContext selectExpressionList() {
			return getRuleContext(SelectExpressionListContext.class,0);
		}
		public SortByClauseContext sortByClause() {
			return getRuleContext(SortByClauseContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public List<AliasIdentifierContext> aliasIdentifier() {
			return getRuleContexts(AliasIdentifierContext.class);
		}
		public AliasIdentifierContext aliasIdentifier(int i) {
			return getRuleContext(AliasIdentifierContext.class,i);
		}
		public TerminalNode KW_NATURAL() { return getToken(CommandParser.KW_NATURAL, 0); }
		public LateralViewContext lateralView() {
			return getRuleContext(LateralViewContext.class,0);
		}
		public JoinRHSContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinRHS; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterJoinRHS(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitJoinRHS(this);
		}
	}

	public final JoinRHSContext joinRHS() throws RecognitionException {
		JoinRHSContext _localctx = new JoinRHSContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_joinRHS);
		int _la;
		try {
			setState(3034);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_JOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_CROSS:
			case KW_INNER:
			case COMMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(2960);
				((JoinRHSContext)_localctx).joinType = joinToken();
				setState(2961);
				((JoinRHSContext)_localctx).joinTable = fromSource();
				setState(3023);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					setState(2962);
					match(KW_USING);
					setState(2963);
					match(LPAREN);
					setState(2964);
					((JoinRHSContext)_localctx).identifier = identifier();
					((JoinRHSContext)_localctx).commonCols.add(((JoinRHSContext)_localctx).identifier);
					setState(2969);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2965);
						match(COMMA);
						setState(2966);
						((JoinRHSContext)_localctx).identifier = identifier();
						((JoinRHSContext)_localctx).commonCols.add(((JoinRHSContext)_localctx).identifier);
						}
						}
						setState(2971);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2972);
					match(RPAREN);
					}
					break;
				case 2:
					{
					setState(2978);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==KW_ON) {
						{
						{
						setState(2974);
						match(KW_ON);
						setState(2975);
						((JoinRHSContext)_localctx).expression = expression();
						((JoinRHSContext)_localctx).joinOn.add(((JoinRHSContext)_localctx).expression);
						}
						}
						setState(2980);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3021);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_USING) {
						{
						setState(2981);
						match(KW_USING);
						setState(2982);
						((JoinRHSContext)_localctx).cbn = functionIdentifier();
						setState(2987);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==LPAREN) {
							{
							setState(2983);
							match(LPAREN);
							setState(2984);
							((JoinRHSContext)_localctx).exprs = selectExpressionList();
							setState(2985);
							match(RPAREN);
							}
						}

						setState(2990);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
						case 1:
							{
							setState(2989);
							tableAlias();
							}
							break;
						}
						setState(3008);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
						case 1:
							{
							{
							setState(2993);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
							case 1:
								{
								setState(2992);
								match(KW_AS);
								}
								break;
							}
							setState(2995);
							((JoinRHSContext)_localctx).aliasIdentifier = aliasIdentifier();
							((JoinRHSContext)_localctx).alias.add(((JoinRHSContext)_localctx).aliasIdentifier);
							}
							}
							break;
						case 2:
							{
							{
							setState(2996);
							match(KW_AS);
							setState(2997);
							match(LPAREN);
							setState(2998);
							((JoinRHSContext)_localctx).aliasIdentifier = aliasIdentifier();
							((JoinRHSContext)_localctx).alias.add(((JoinRHSContext)_localctx).aliasIdentifier);
							setState(3003);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(2999);
								match(COMMA);
								setState(3000);
								((JoinRHSContext)_localctx).aliasIdentifier = aliasIdentifier();
								((JoinRHSContext)_localctx).alias.add(((JoinRHSContext)_localctx).aliasIdentifier);
								}
								}
								setState(3005);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(3006);
							match(RPAREN);
							}
							}
							break;
						}
						setState(3016);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==KW_WITH) {
							{
							setState(3010);
							match(KW_WITH);
							setState(3011);
							match(KW_UDFPROPERTIES);
							setState(3012);
							match(LPAREN);
							setState(3013);
							userDefinedJoinPropertiesList();
							setState(3014);
							match(RPAREN);
							}
						}

						setState(3019);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
						case 1:
							{
							setState(3018);
							((JoinRHSContext)_localctx).sort = sortByClause();
							}
							break;
						}
						}
					}

					}
					break;
				}
				}
				break;
			case KW_NATURAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3025);
				((JoinRHSContext)_localctx).natural = match(KW_NATURAL);
				setState(3026);
				((JoinRHSContext)_localctx).joinType = joinToken();
				setState(3027);
				((JoinRHSContext)_localctx).joinTable = fromSource();
				}
				break;
			case KW_LATERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3029);
				((JoinRHSContext)_localctx).lv = lateralView();
				setState(3032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ON) {
					{
					setState(3030);
					match(KW_ON);
					setState(3031);
					((JoinRHSContext)_localctx).expression = expression();
					((JoinRHSContext)_localctx).joinOn.add(((JoinRHSContext)_localctx).expression);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueJoinSourceContext extends ParserRuleContext {
		public FromSourceContext fromSource() {
			return getRuleContext(FromSourceContext.class,0);
		}
		public UniqueJoinExprContext uniqueJoinExpr() {
			return getRuleContext(UniqueJoinExprContext.class,0);
		}
		public TerminalNode KW_PRESERVE() { return getToken(CommandParser.KW_PRESERVE, 0); }
		public UniqueJoinSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueJoinSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUniqueJoinSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUniqueJoinSource(this);
		}
	}

	public final UniqueJoinSourceContext uniqueJoinSource() throws RecognitionException {
		UniqueJoinSourceContext _localctx = new UniqueJoinSourceContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_uniqueJoinSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRESERVE) {
				{
				setState(3036);
				match(KW_PRESERVE);
				}
			}

			setState(3039);
			fromSource();
			setState(3040);
			uniqueJoinExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueJoinExprContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> e1 = new ArrayList<ExpressionContext>();
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public UniqueJoinExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueJoinExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUniqueJoinExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUniqueJoinExpr(this);
		}
	}

	public final UniqueJoinExprContext uniqueJoinExpr() throws RecognitionException {
		UniqueJoinExprContext _localctx = new UniqueJoinExprContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_uniqueJoinExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042);
			match(LPAREN);
			setState(3043);
			((UniqueJoinExprContext)_localctx).expression = expression();
			((UniqueJoinExprContext)_localctx).e1.add(((UniqueJoinExprContext)_localctx).expression);
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3044);
				match(COMMA);
				setState(3045);
				((UniqueJoinExprContext)_localctx).expression = expression();
				((UniqueJoinExprContext)_localctx).e1.add(((UniqueJoinExprContext)_localctx).expression);
				}
				}
				setState(3050);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3051);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueJoinTokenContext extends ParserRuleContext {
		public TerminalNode KW_UNIQUEJOIN() { return getToken(CommandParser.KW_UNIQUEJOIN, 0); }
		public UniqueJoinTokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueJoinToken; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterUniqueJoinToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitUniqueJoinToken(this);
		}
	}

	public final UniqueJoinTokenContext uniqueJoinToken() throws RecognitionException {
		UniqueJoinTokenContext _localctx = new UniqueJoinTokenContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_uniqueJoinToken);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3053);
			match(KW_UNIQUEJOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTokenContext extends ParserRuleContext {
		public Token outer;
		public Token semi;
		public Token anti;
		public TerminalNode KW_JOIN() { return getToken(CommandParser.KW_JOIN, 0); }
		public TerminalNode KW_INNER() { return getToken(CommandParser.KW_INNER, 0); }
		public TerminalNode COMMA() { return getToken(CommandParser.COMMA, 0); }
		public TerminalNode KW_CROSS() { return getToken(CommandParser.KW_CROSS, 0); }
		public TerminalNode KW_LEFT() { return getToken(CommandParser.KW_LEFT, 0); }
		public TerminalNode KW_OUTER() { return getToken(CommandParser.KW_OUTER, 0); }
		public TerminalNode KW_RIGHT() { return getToken(CommandParser.KW_RIGHT, 0); }
		public TerminalNode KW_FULL() { return getToken(CommandParser.KW_FULL, 0); }
		public TerminalNode KW_SEMI() { return getToken(CommandParser.KW_SEMI, 0); }
		public TerminalNode KW_ANTI() { return getToken(CommandParser.KW_ANTI, 0); }
		public JoinTokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinToken; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterJoinToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitJoinToken(this);
		}
	}

	public final JoinTokenContext joinToken() throws RecognitionException {
		JoinTokenContext _localctx = new JoinTokenContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_joinToken);
		int _la;
		try {
			setState(3082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3055);
				match(KW_JOIN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3056);
				match(KW_INNER);
				setState(3057);
				match(KW_JOIN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3058);
				match(COMMA);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3059);
				match(KW_CROSS);
				setState(3060);
				match(KW_JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3061);
				match(KW_LEFT);
				setState(3063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_OUTER) {
					{
					setState(3062);
					((JoinTokenContext)_localctx).outer = match(KW_OUTER);
					}
				}

				setState(3065);
				match(KW_JOIN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3066);
				match(KW_RIGHT);
				setState(3068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_OUTER) {
					{
					setState(3067);
					((JoinTokenContext)_localctx).outer = match(KW_OUTER);
					}
				}

				setState(3070);
				match(KW_JOIN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3071);
				match(KW_FULL);
				setState(3073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_OUTER) {
					{
					setState(3072);
					((JoinTokenContext)_localctx).outer = match(KW_OUTER);
					}
				}

				setState(3075);
				match(KW_JOIN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3076);
				match(KW_LEFT);
				setState(3077);
				((JoinTokenContext)_localctx).semi = match(KW_SEMI);
				setState(3078);
				match(KW_JOIN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3079);
				match(KW_LEFT);
				setState(3080);
				((JoinTokenContext)_localctx).anti = match(KW_ANTI);
				setState(3081);
				match(KW_JOIN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LateralViewContext extends ParserRuleContext {
		public Token outer;
		public TerminalNode KW_LATERAL() { return getToken(CommandParser.KW_LATERAL, 0); }
		public TerminalNode KW_VIEW() { return getToken(CommandParser.KW_VIEW, 0); }
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode KW_OUTER() { return getToken(CommandParser.KW_OUTER, 0); }
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public LateralViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterLateralView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitLateralView(this);
		}
	}

	public final LateralViewContext lateralView() throws RecognitionException {
		LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_lateralView);
		int _la;
		try {
			int _alt;
			setState(3113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3084);
				match(KW_LATERAL);
				setState(3085);
				match(KW_VIEW);
				setState(3086);
				((LateralViewContext)_localctx).outer = match(KW_OUTER);
				setState(3087);
				function();
				setState(3088);
				tableAlias();
				setState(3098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AS) {
					{
					setState(3089);
					match(KW_AS);
					setState(3090);
					identifier();
					setState(3095);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,357,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3091);
							match(COMMA);
							setState(3092);
							identifier();
							}
							} 
						}
						setState(3097);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,357,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3100);
				match(KW_LATERAL);
				setState(3101);
				match(KW_VIEW);
				setState(3102);
				function();
				setState(3103);
				tableAlias();
				setState(3104);
				match(KW_AS);
				setState(3105);
				identifier();
				setState(3110);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3106);
						match(COMMA);
						setState(3107);
						identifier();
						}
						} 
					}
					setState(3112);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,359,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public AliasIdentifierContext aliasIdentifier() {
			return getRuleContext(AliasIdentifierContext.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableAlias(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115);
			aliasIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableBucketSampleContext extends ParserRuleContext {
		public Token numerator;
		public Token denominator;
		public ExpressionContext expression;
		public List<ExpressionContext> expr = new ArrayList<ExpressionContext>();
		public TerminalNode KW_TABLESAMPLE() { return getToken(CommandParser.KW_TABLESAMPLE, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode KW_BUCKET() { return getToken(CommandParser.KW_BUCKET, 0); }
		public TerminalNode KW_OUT() { return getToken(CommandParser.KW_OUT, 0); }
		public TerminalNode KW_OF() { return getToken(CommandParser.KW_OF, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<TerminalNode> Number() { return getTokens(CommandParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(CommandParser.Number, i);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TableBucketSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableBucketSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableBucketSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableBucketSample(this);
		}
	}

	public final TableBucketSampleContext tableBucketSample() throws RecognitionException {
		TableBucketSampleContext _localctx = new TableBucketSampleContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_tableBucketSample);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3117);
			match(KW_TABLESAMPLE);
			setState(3118);
			match(LPAREN);
			setState(3119);
			match(KW_BUCKET);
			{
			setState(3120);
			((TableBucketSampleContext)_localctx).numerator = match(Number);
			}
			setState(3121);
			match(KW_OUT);
			setState(3122);
			match(KW_OF);
			{
			setState(3123);
			((TableBucketSampleContext)_localctx).denominator = match(Number);
			}
			setState(3133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(3124);
				match(KW_ON);
				setState(3125);
				((TableBucketSampleContext)_localctx).expression = expression();
				((TableBucketSampleContext)_localctx).expr.add(((TableBucketSampleContext)_localctx).expression);
				setState(3130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3126);
					match(COMMA);
					setState(3127);
					((TableBucketSampleContext)_localctx).expression = expression();
					((TableBucketSampleContext)_localctx).expr.add(((TableBucketSampleContext)_localctx).expression);
					}
					}
					setState(3132);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3135);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SplitSampleContext extends ParserRuleContext {
		public Token numerator;
		public Token percent;
		public TerminalNode KW_TABLESAMPLE() { return getToken(CommandParser.KW_TABLESAMPLE, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public TerminalNode KW_ROWS() { return getToken(CommandParser.KW_ROWS, 0); }
		public TerminalNode Number() { return getToken(CommandParser.Number, 0); }
		public TerminalNode KW_PERCENT() { return getToken(CommandParser.KW_PERCENT, 0); }
		public TerminalNode ByteLengthLiteral() { return getToken(CommandParser.ByteLengthLiteral, 0); }
		public SplitSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_splitSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSplitSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSplitSample(this);
		}
	}

	public final SplitSampleContext splitSample() throws RecognitionException {
		SplitSampleContext _localctx = new SplitSampleContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_splitSample);
		try {
			setState(3149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3137);
				match(KW_TABLESAMPLE);
				setState(3138);
				match(LPAREN);
				{
				setState(3139);
				((SplitSampleContext)_localctx).numerator = match(Number);
				}
				setState(3142);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_PERCENT:
					{
					setState(3140);
					((SplitSampleContext)_localctx).percent = match(KW_PERCENT);
					}
					break;
				case KW_ROWS:
					{
					setState(3141);
					match(KW_ROWS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3144);
				match(RPAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3145);
				match(KW_TABLESAMPLE);
				setState(3146);
				match(LPAREN);
				{
				setState(3147);
				((SplitSampleContext)_localctx).numerator = match(ByteLengthLiteral);
				}
				setState(3148);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSampleContext extends ParserRuleContext {
		public TableBucketSampleContext tableBucketSample() {
			return getRuleContext(TableBucketSampleContext.class,0);
		}
		public SplitSampleContext splitSample() {
			return getRuleContext(SplitSampleContext.class,0);
		}
		public TableSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableSample(this);
		}
	}

	public final TableSampleContext tableSample() throws RecognitionException {
		TableSampleContext _localctx = new TableSampleContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_tableSample);
		try {
			setState(3153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3151);
				tableBucketSample();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3152);
				splitSample();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableNameContext tabname;
		public TablePropertiesContext props;
		public TableSampleContext ts;
		public IdentifierWithoutSql11Context alias;
		public AvailableSql11KeywordsForOdpsTableAliasContext extra;
		public DoubleQuoteStringLiteralContext l;
		public IdentifierContext identifier;
		public List<IdentifierContext> col = new ArrayList<IdentifierContext>();
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public IdentifierWithoutSql11Context identifierWithoutSql11() {
			return getRuleContext(IdentifierWithoutSql11Context.class,0);
		}
		public AvailableSql11KeywordsForOdpsTableAliasContext availableSql11KeywordsForOdpsTableAlias() {
			return getRuleContext(AvailableSql11KeywordsForOdpsTableAliasContext.class,0);
		}
		public DoubleQuoteStringLiteralContext doubleQuoteStringLiteral() {
			return getRuleContext(DoubleQuoteStringLiteralContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableSource(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_tableSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3155);
			((TableSourceContext)_localctx).tabname = tableName();
			setState(3157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				setState(3156);
				((TableSourceContext)_localctx).props = tableProperties();
				}
				break;
			}
			setState(3160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				setState(3159);
				((TableSourceContext)_localctx).ts = tableSample();
				}
				break;
			}
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				setState(3163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AS) {
					{
					setState(3162);
					match(KW_AS);
					}
				}

				setState(3168);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_ASC:
				case KW_DESC:
				case KW_ZORDER:
				case KW_GROUPS:
				case KW_OVERWRITE:
				case KW_UNIQUEJOIN:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_TRANSFORM:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_UNLOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_LAST:
				case KW_NULLS:
				case KW_AFTER:
				case KW_RENAME:
				case KW_IGNORE:
				case KW_PROTECTION:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_INTERVAL:
				case KW_STRING:
				case KW_STRUCT:
				case KW_MAP:
				case KW_UNIONTYPE:
				case KW_REDUCE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_OFFLINE:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_READONLY:
				case KW_NO_DROP:
				case KW_LOCATION:
				case KW_TABLESAMPLE:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_RLIKE:
				case KW_REGEXP:
				case KW_TEMPORARY:
				case KW_MACRO:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_PRETTY:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_SKEWJOIN:
				case KW_DYNAMICFILTER:
				case KW_STREAMTABLE:
				case KW_HOLD_DDLTIME:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_MINUS:
				case KW_VIEW:
				case KW_DATABASE:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_ANTI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_NULL_VALUE:
				case KW_DISTINCT_VALUE:
				case KW_TABLE_COUNT:
				case KW_COLUMN_SUM:
				case KW_COLUMN_MAX:
				case KW_COLUMN_MIN:
				case KW_EXPRESSION_CONDITION:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_MATCHED:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_CUBE:
				case KW_DIRECTORIES:
				case KW_UNBOUNDED:
				case KW_PRECEDING:
				case KW_FOLLOWING:
				case KW_LOCALTIMESTAMP:
				case KW_LESS:
				case KW_MORE:
				case KW_OVER:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_PARTIALSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_EXCHANGE:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_CONF:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_MONTH:
				case KW_DAY:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_YEARS:
				case KW_MONTHS:
				case KW_DAYS:
				case KW_HOURS:
				case KW_MINUTES:
				case KW_SECONDS:
				case KW_UDFPROPERTIES:
				case KW_EXCLUDE:
				case KW_TIES:
				case KW_NO:
				case KW_OTHERS:
				case KW_BEGIN:
				case KW_RETURNS:
				case KW_SQL:
				case KW_LOOP:
				case KW_NEW:
				case KW_LIFECYCLE:
				case KW_REMOVE:
				case KW_GRANTS:
				case KW_ACL:
				case KW_TYPE:
				case KW_LIST:
				case KW_USERS:
				case KW_WHOAMI:
				case KW_TRUSTEDPROJECTS:
				case KW_TRUSTEDPROJECT:
				case KW_SECURITYCONFIGURATION:
				case KW_PRIVILEGES:
				case KW_PROJECT:
				case KW_PROJECTS:
				case KW_LABEL:
				case KW_ALLOW:
				case KW_DISALLOW:
				case KW_PACKAGE:
				case KW_PACKAGES:
				case KW_INSTALL:
				case KW_UNINSTALL:
				case KW_P:
				case KW_JOB:
				case KW_JOBS:
				case KW_ACCOUNTPROVIDERS:
				case KW_RESOURCES:
				case KW_FLAGS:
				case KW_COUNT:
				case KW_STATISTIC:
				case KW_STATISTIC_LIST:
				case KW_GET:
				case KW_PUT:
				case KW_POLICY:
				case KW_PROJECTPROTECTION:
				case KW_EXCEPTION:
				case KW_CLEAR:
				case KW_EXPIRED:
				case KW_EXP:
				case KW_ACCOUNTPROVIDER:
				case KW_SUPER:
				case KW_VOLUMEFILE:
				case KW_VOLUMEARCHIVE:
				case KW_OFFLINEMODEL:
				case KW_PY:
				case KW_RESOURCE:
				case KW_KILL:
				case KW_STATUS:
				case KW_SETPROJECT:
				case KW_MERGE:
				case KW_SMALLFILES:
				case KW_PARTITIONPROPERTIES:
				case KW_EXSTORE:
				case KW_CHANGELOGS:
				case KW_REDO:
				case KW_CHANGEOWNER:
				case KW_RECYCLEBIN:
				case KW_PRIVILEGEPROPERTIES:
				case KW_CACHE:
				case KW_CACHEPROPERTIES:
				case KW_VARIABLES:
				case KW_EXCEPT:
				case KW_SELECTIVITY:
				case KW_EXTRACT:
				case KW_SUBSTRING:
				case KW_DEFAULT:
				case KW_ANY:
				case KW_CONSTRAINT:
				case KW_PRIMARY:
				case KW_KEY:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_CLONE:
				case KW_HISTORY:
				case KW_RESTORE:
				case KW_LSN:
				case KW_WITHIN:
				case KW_FILTER:
				case KW_TENANT:
				case KW_SHARDS:
				case KW_HUBLIFECYCLE:
				case KW_HUBTABLE:
				case KW_OUTPUT:
				case KW_CODE_BEGIN:
				case KW_CODE_END:
				case KW_MODEL:
				case KW_PROPERTIES:
				case ByteLengthLiteral:
				case Identifier:
					{
					setState(3165);
					((TableSourceContext)_localctx).alias = identifierWithoutSql11();
					}
					break;
				case KW_USER:
				case KW_INNER:
					{
					setState(3166);
					((TableSourceContext)_localctx).extra = availableSql11KeywordsForOdpsTableAlias();
					}
					break;
				case DoubleQuoteStringLiteral:
					{
					setState(3167);
					((TableSourceContext)_localctx).l = doubleQuoteStringLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(3170);
					match(LPAREN);
					setState(3171);
					((TableSourceContext)_localctx).identifier = identifier();
					((TableSourceContext)_localctx).col.add(((TableSourceContext)_localctx).identifier);
					setState(3176);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3172);
						match(COMMA);
						setState(3173);
						((TableSourceContext)_localctx).identifier = identifier();
						((TableSourceContext)_localctx).col.add(((TableSourceContext)_localctx).identifier);
						}
						}
						setState(3178);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3179);
					match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AvailableSql11KeywordsForOdpsTableAliasContext extends ParserRuleContext {
		public TerminalNode KW_USER() { return getToken(CommandParser.KW_USER, 0); }
		public TerminalNode KW_INNER() { return getToken(CommandParser.KW_INNER, 0); }
		public AvailableSql11KeywordsForOdpsTableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_availableSql11KeywordsForOdpsTableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterAvailableSql11KeywordsForOdpsTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitAvailableSql11KeywordsForOdpsTableAlias(this);
		}
	}

	public final AvailableSql11KeywordsForOdpsTableAliasContext availableSql11KeywordsForOdpsTableAlias() throws RecognitionException {
		AvailableSql11KeywordsForOdpsTableAliasContext _localctx = new AvailableSql11KeywordsForOdpsTableAliasContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_availableSql11KeywordsForOdpsTableAlias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3185);
			_la = _input.LA(1);
			if ( !(_la==KW_USER || _la==KW_INNER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext db;
		public IdentifierContext sch;
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSchemaName(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_schemaName);
		try {
			setState(3192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3187);
				((SchemaNameContext)_localctx).db = identifier();
				setState(3188);
				match(DOT);
				setState(3189);
				((SchemaNameContext)_localctx).sch = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3191);
				((SchemaNameContext)_localctx).sch = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public IdentifierContext db;
		public IdentifierContext tab;
		public IdentifierContext sch;
		public List<TerminalNode> DOT() { return getTokens(CommandParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CommandParser.DOT, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableName(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_tableName);
		try {
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3194);
				((TableNameContext)_localctx).db = identifier();
				setState(3195);
				match(DOT);
				setState(3196);
				((TableNameContext)_localctx).tab = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3198);
				((TableNameContext)_localctx).tab = identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3199);
				((TableNameContext)_localctx).db = identifier();
				setState(3200);
				match(DOT);
				setState(3201);
				((TableNameContext)_localctx).sch = identifier();
				setState(3202);
				match(DOT);
				setState(3203);
				((TableNameContext)_localctx).tab = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitioningSpecContext extends ParserRuleContext {
		public PartitionByClauseContext p;
		public OrderByClauseContext o;
		public DistributeByClauseContext d;
		public SortByClauseContext s;
		public ClusterByClauseContext c;
		public PartitionByClauseContext partitionByClause() {
			return getRuleContext(PartitionByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public DistributeByClauseContext distributeByClause() {
			return getRuleContext(DistributeByClauseContext.class,0);
		}
		public SortByClauseContext sortByClause() {
			return getRuleContext(SortByClauseContext.class,0);
		}
		public ClusterByClauseContext clusterByClause() {
			return getRuleContext(ClusterByClauseContext.class,0);
		}
		public PartitioningSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPartitioningSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPartitioningSpec(this);
		}
	}

	public final PartitioningSpecContext partitioningSpec() throws RecognitionException {
		PartitioningSpecContext _localctx = new PartitioningSpecContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_partitioningSpec);
		int _la;
		try {
			setState(3218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3207);
				((PartitioningSpecContext)_localctx).p = partitionByClause();
				setState(3209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ORDER) {
					{
					setState(3208);
					((PartitioningSpecContext)_localctx).o = orderByClause();
					}
				}

				}
				break;
			case KW_ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3211);
				((PartitioningSpecContext)_localctx).o = orderByClause();
				}
				break;
			case KW_DISTRIBUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3212);
				((PartitioningSpecContext)_localctx).d = distributeByClause();
				setState(3214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_SORT) {
					{
					setState(3213);
					((PartitioningSpecContext)_localctx).s = sortByClause();
					}
				}

				}
				break;
			case KW_SORT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3216);
				((PartitioningSpecContext)_localctx).s = sortByClause();
				}
				break;
			case KW_CLUSTER:
				enterOuterAlt(_localctx, 5);
				{
				setState(3217);
				((PartitioningSpecContext)_localctx).c = clusterByClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionTableFunctionSourceContext extends ParserRuleContext {
		public SubQuerySourceContext subQuerySource() {
			return getRuleContext(SubQuerySourceContext.class,0);
		}
		public TableSourceContext tableSource() {
			return getRuleContext(TableSourceContext.class,0);
		}
		public PartitionedTableFunctionContext partitionedTableFunction() {
			return getRuleContext(PartitionedTableFunctionContext.class,0);
		}
		public PartitionTableFunctionSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTableFunctionSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPartitionTableFunctionSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPartitionTableFunctionSource(this);
		}
	}

	public final PartitionTableFunctionSourceContext partitionTableFunctionSource() throws RecognitionException {
		PartitionTableFunctionSourceContext _localctx = new PartitionTableFunctionSourceContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_partitionTableFunctionSource);
		try {
			setState(3223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3220);
				subQuerySource();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3221);
				tableSource();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3222);
				partitionedTableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionedTableFunctionContext extends ParserRuleContext {
		public Token name;
		public PartitionTableFunctionSourceContext ptfsrc;
		public PartitioningSpecContext spec;
		public Token alias;
		public List<TerminalNode> LPAREN() { return getTokens(CommandParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(CommandParser.LPAREN, i);
		}
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public List<TerminalNode> RPAREN() { return getTokens(CommandParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(CommandParser.RPAREN, i);
		}
		public List<TerminalNode> Identifier() { return getTokens(CommandParser.Identifier); }
		public TerminalNode Identifier(int i) {
			return getToken(CommandParser.Identifier, i);
		}
		public PartitionTableFunctionSourceContext partitionTableFunctionSource() {
			return getRuleContext(PartitionTableFunctionSourceContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PartitioningSpecContext partitioningSpec() {
			return getRuleContext(PartitioningSpecContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public PartitionedTableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionedTableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPartitionedTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPartitionedTableFunction(this);
		}
	}

	public final PartitionedTableFunctionContext partitionedTableFunction() throws RecognitionException {
		PartitionedTableFunctionContext _localctx = new PartitionedTableFunctionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_partitionedTableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3225);
			((PartitionedTableFunctionContext)_localctx).name = match(Identifier);
			setState(3226);
			match(LPAREN);
			setState(3227);
			match(KW_ON);
			{
			setState(3228);
			((PartitionedTableFunctionContext)_localctx).ptfsrc = partitionTableFunctionSource();
			setState(3230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (KW_ORDER - 30)) | (1L << (KW_PARTITION - 30)) | (1L << (KW_CLUSTER - 30)) | (1L << (KW_DISTRIBUTE - 30)) | (1L << (KW_SORT - 30)))) != 0)) {
				{
				setState(3229);
				((PartitionedTableFunctionContext)_localctx).spec = partitioningSpec();
				}
			}

			}
			setState(3247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Identifier) {
				{
				setState(3232);
				match(Identifier);
				setState(3233);
				match(LPAREN);
				setState(3234);
				expression();
				setState(3235);
				match(RPAREN);
				setState(3244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3236);
					match(COMMA);
					setState(3237);
					match(Identifier);
					setState(3238);
					match(LPAREN);
					setState(3239);
					expression();
					setState(3240);
					match(RPAREN);
					}
					}
					setState(3246);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3249);
			match(RPAREN);
			setState(3251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3250);
				((PartitionedTableFunctionContext)_localctx).alias = match(Identifier);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode KW_WHERE() { return getToken(CommandParser.KW_WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWhereClause(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3253);
			match(KW_WHERE);
			setState(3254);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueRowConstructorContext extends ParserRuleContext {
		public MathExpressionContext mathExpression;
		public List<MathExpressionContext> cols = new ArrayList<MathExpressionContext>();
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<MathExpressionContext> mathExpression() {
			return getRuleContexts(MathExpressionContext.class);
		}
		public MathExpressionContext mathExpression(int i) {
			return getRuleContext(MathExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ValueRowConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueRowConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterValueRowConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitValueRowConstructor(this);
		}
	}

	public final ValueRowConstructorContext valueRowConstructor() throws RecognitionException {
		ValueRowConstructorContext _localctx = new ValueRowConstructorContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_valueRowConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3256);
			match(LPAREN);
			setState(3257);
			((ValueRowConstructorContext)_localctx).mathExpression = mathExpression(0);
			((ValueRowConstructorContext)_localctx).cols.add(((ValueRowConstructorContext)_localctx).mathExpression);
			setState(3262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3258);
				match(COMMA);
				setState(3259);
				((ValueRowConstructorContext)_localctx).mathExpression = mathExpression(0);
				((ValueRowConstructorContext)_localctx).cols.add(((ValueRowConstructorContext)_localctx).mathExpression);
				}
				}
				setState(3264);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3265);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesTableConstructorContext extends ParserRuleContext {
		public ValueRowConstructorContext valueRowConstructor;
		public List<ValueRowConstructorContext> rows = new ArrayList<ValueRowConstructorContext>();
		public List<ValueRowConstructorContext> valueRowConstructor() {
			return getRuleContexts(ValueRowConstructorContext.class);
		}
		public ValueRowConstructorContext valueRowConstructor(int i) {
			return getRuleContext(ValueRowConstructorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ValuesTableConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesTableConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterValuesTableConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitValuesTableConstructor(this);
		}
	}

	public final ValuesTableConstructorContext valuesTableConstructor() throws RecognitionException {
		ValuesTableConstructorContext _localctx = new ValuesTableConstructorContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_valuesTableConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3267);
			((ValuesTableConstructorContext)_localctx).valueRowConstructor = valueRowConstructor();
			((ValuesTableConstructorContext)_localctx).rows.add(((ValuesTableConstructorContext)_localctx).valueRowConstructor);
			setState(3272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3268);
				match(COMMA);
				setState(3269);
				((ValuesTableConstructorContext)_localctx).valueRowConstructor = valueRowConstructor();
				((ValuesTableConstructorContext)_localctx).rows.add(((ValuesTableConstructorContext)_localctx).valueRowConstructor);
				}
				}
				setState(3274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public ValuesTableConstructorContext values;
		public TerminalNode KW_VALUES() { return getToken(CommandParser.KW_VALUES, 0); }
		public ValuesTableConstructorContext valuesTableConstructor() {
			return getRuleContext(ValuesTableConstructorContext.class,0);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitValuesClause(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_valuesClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3275);
			match(KW_VALUES);
			setState(3276);
			((ValuesClauseContext)_localctx).values = valuesTableConstructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VirtualTableSourceContext extends ParserRuleContext {
		public ValuesClauseContext values;
		public TableNameColListContext tableDecl;
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TableNameColListContext tableNameColList() {
			return getRuleContext(TableNameColListContext.class,0);
		}
		public VirtualTableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_virtualTableSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterVirtualTableSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitVirtualTableSource(this);
		}
	}

	public final VirtualTableSourceContext virtualTableSource() throws RecognitionException {
		VirtualTableSourceContext _localctx = new VirtualTableSourceContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_virtualTableSource);
		try {
			setState(3286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3278);
				match(LPAREN);
				setState(3279);
				((VirtualTableSourceContext)_localctx).values = valuesClause();
				setState(3280);
				match(RPAREN);
				setState(3281);
				((VirtualTableSourceContext)_localctx).tableDecl = tableNameColList();
				}
				break;
			case KW_VALUES:
				enterOuterAlt(_localctx, 2);
				{
				setState(3283);
				((VirtualTableSourceContext)_localctx).values = valuesClause();
				setState(3284);
				((VirtualTableSourceContext)_localctx).tableDecl = tableNameColList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameColListContext extends ParserRuleContext {
		public IdentifierContext table;
		public IdentifierContext identifier;
		public List<IdentifierContext> col = new ArrayList<IdentifierContext>();
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TableNameColListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNameColList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTableNameColList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTableNameColList(this);
		}
	}

	public final TableNameColListContext tableNameColList() throws RecognitionException {
		TableNameColListContext _localctx = new TableNameColListContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_tableNameColList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				setState(3288);
				match(KW_AS);
				}
				break;
			}
			setState(3291);
			((TableNameColListContext)_localctx).table = identifier();
			setState(3292);
			match(LPAREN);
			setState(3293);
			((TableNameColListContext)_localctx).identifier = identifier();
			((TableNameColListContext)_localctx).col.add(((TableNameColListContext)_localctx).identifier);
			setState(3298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3294);
				match(COMMA);
				setState(3295);
				((TableNameColListContext)_localctx).identifier = identifier();
				((TableNameColListContext)_localctx).col.add(((TableNameColListContext)_localctx).identifier);
				}
				}
				setState(3300);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3301);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTypeCubeOrRollupContext extends ParserRuleContext {
		public Token c;
		public Token r;
		public GroupingSetExpressionContext groupingSetExpression;
		public List<GroupingSetExpressionContext> gs = new ArrayList<GroupingSetExpressionContext>();
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<GroupingSetExpressionContext> groupingSetExpression() {
			return getRuleContexts(GroupingSetExpressionContext.class);
		}
		public GroupingSetExpressionContext groupingSetExpression(int i) {
			return getRuleContext(GroupingSetExpressionContext.class,i);
		}
		public TerminalNode KW_CUBE() { return getToken(CommandParser.KW_CUBE, 0); }
		public TerminalNode KW_ROLLUP() { return getToken(CommandParser.KW_ROLLUP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public FunctionTypeCubeOrRollupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTypeCubeOrRollup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunctionTypeCubeOrRollup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunctionTypeCubeOrRollup(this);
		}
	}

	public final FunctionTypeCubeOrRollupContext functionTypeCubeOrRollup() throws RecognitionException {
		FunctionTypeCubeOrRollupContext _localctx = new FunctionTypeCubeOrRollupContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_functionTypeCubeOrRollup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3305);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CUBE:
				{
				setState(3303);
				((FunctionTypeCubeOrRollupContext)_localctx).c = match(KW_CUBE);
				}
				break;
			case KW_ROLLUP:
				{
				setState(3304);
				((FunctionTypeCubeOrRollupContext)_localctx).r = match(KW_ROLLUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3307);
			match(LPAREN);
			setState(3308);
			((FunctionTypeCubeOrRollupContext)_localctx).groupingSetExpression = groupingSetExpression();
			((FunctionTypeCubeOrRollupContext)_localctx).gs.add(((FunctionTypeCubeOrRollupContext)_localctx).groupingSetExpression);
			setState(3313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3309);
				match(COMMA);
				setState(3310);
				((FunctionTypeCubeOrRollupContext)_localctx).groupingSetExpression = groupingSetExpression();
				((FunctionTypeCubeOrRollupContext)_localctx).gs.add(((FunctionTypeCubeOrRollupContext)_localctx).groupingSetExpression);
				}
				}
				setState(3315);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3316);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsItemContext extends ParserRuleContext {
		public FunctionTypeCubeOrRollupContext functionTypeCubeOrRollup() {
			return getRuleContext(FunctionTypeCubeOrRollupContext.class,0);
		}
		public GroupingSetExpressionContext groupingSetExpression() {
			return getRuleContext(GroupingSetExpressionContext.class,0);
		}
		public GroupingSetsItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGroupingSetsItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGroupingSetsItem(this);
		}
	}

	public final GroupingSetsItemContext groupingSetsItem() throws RecognitionException {
		GroupingSetsItemContext _localctx = new GroupingSetsItemContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_groupingSetsItem);
		try {
			setState(3320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3318);
				functionTypeCubeOrRollup();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3319);
				groupingSetExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsClauseContext extends ParserRuleContext {
		public Token sets;
		public TerminalNode KW_SETS() { return getToken(CommandParser.KW_SETS, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public List<GroupingSetsItemContext> groupingSetsItem() {
			return getRuleContexts(GroupingSetsItemContext.class);
		}
		public GroupingSetsItemContext groupingSetsItem(int i) {
			return getRuleContext(GroupingSetsItemContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public TerminalNode KW_GROUPING() { return getToken(CommandParser.KW_GROUPING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public GroupingSetsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGroupingSetsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGroupingSetsClause(this);
		}
	}

	public final GroupingSetsClauseContext groupingSetsClause() throws RecognitionException {
		GroupingSetsClauseContext _localctx = new GroupingSetsClauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_groupingSetsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3322);
			((GroupingSetsClauseContext)_localctx).sets = match(KW_GROUPING);
			setState(3323);
			match(KW_SETS);
			setState(3324);
			match(LPAREN);
			setState(3325);
			groupingSetsItem();
			setState(3330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3326);
				match(COMMA);
				setState(3327);
				groupingSetsItem();
				}
				}
				setState(3332);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3333);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByKeyContext extends ParserRuleContext {
		public FunctionTypeCubeOrRollupContext cr;
		public GroupingSetsClauseContext gp;
		public ExpressionContext exp;
		public FunctionTypeCubeOrRollupContext functionTypeCubeOrRollup() {
			return getRuleContext(FunctionTypeCubeOrRollupContext.class,0);
		}
		public GroupingSetsClauseContext groupingSetsClause() {
			return getRuleContext(GroupingSetsClauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupByKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGroupByKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGroupByKey(this);
		}
	}

	public final GroupByKeyContext groupByKey() throws RecognitionException {
		GroupByKeyContext _localctx = new GroupByKeyContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_groupByKey);
		try {
			setState(3338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3335);
				((GroupByKeyContext)_localctx).cr = functionTypeCubeOrRollup();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3336);
				((GroupByKeyContext)_localctx).gp = groupingSetsClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3337);
				((GroupByKeyContext)_localctx).exp = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public Token rollup;
		public Token cube;
		public GroupingSetsClauseContext groupingset;
		public TerminalNode KW_GROUP() { return getToken(CommandParser.KW_GROUP, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public List<GroupByKeyContext> groupByKey() {
			return getRuleContexts(GroupByKeyContext.class);
		}
		public GroupByKeyContext groupByKey(int i) {
			return getRuleContext(GroupByKeyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public TerminalNode KW_ROLLUP() { return getToken(CommandParser.KW_ROLLUP, 0); }
		public TerminalNode KW_CUBE() { return getToken(CommandParser.KW_CUBE, 0); }
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public GroupingSetsClauseContext groupingSetsClause() {
			return getRuleContext(GroupingSetsClauseContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGroupByClause(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_groupByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			match(KW_GROUP);
			setState(3341);
			match(KW_BY);
			setState(3342);
			groupByKey();
			setState(3347);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,393,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3343);
					match(COMMA);
					setState(3344);
					groupByKey();
					}
					} 
				}
				setState(3349);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,393,_ctx);
			}
			setState(3355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				{
				setState(3350);
				((GroupByClauseContext)_localctx).rollup = match(KW_WITH);
				setState(3351);
				match(KW_ROLLUP);
				}
				}
				break;
			case 2:
				{
				{
				setState(3352);
				((GroupByClauseContext)_localctx).cube = match(KW_WITH);
				setState(3353);
				match(KW_CUBE);
				}
				}
				break;
			case 3:
				{
				{
				setState(3354);
				((GroupByClauseContext)_localctx).groupingset = groupingSetsClause();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetExpressionContext extends ParserRuleContext {
		public GroupingSetExpressionMultipleContext groupingSetExpressionMultiple() {
			return getRuleContext(GroupingSetExpressionMultipleContext.class,0);
		}
		public GroupingExpressionSingleContext groupingExpressionSingle() {
			return getRuleContext(GroupingExpressionSingleContext.class,0);
		}
		public GroupingSetExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGroupingSetExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGroupingSetExpression(this);
		}
	}

	public final GroupingSetExpressionContext groupingSetExpression() throws RecognitionException {
		GroupingSetExpressionContext _localctx = new GroupingSetExpressionContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_groupingSetExpression);
		try {
			setState(3359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3357);
				groupingSetExpressionMultiple();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3358);
				groupingExpressionSingle();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetExpressionMultipleContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public GroupingSetExpressionMultipleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetExpressionMultiple; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGroupingSetExpressionMultiple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGroupingSetExpressionMultiple(this);
		}
	}

	public final GroupingSetExpressionMultipleContext groupingSetExpressionMultiple() throws RecognitionException {
		GroupingSetExpressionMultipleContext _localctx = new GroupingSetExpressionMultipleContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_groupingSetExpressionMultiple);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3361);
			match(LPAREN);
			setState(3363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_NOT - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_IF - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_CAST - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_CASE - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (COLON - 402)) | (1L << (LPAREN - 402)) | (1L << (PLUS - 402)) | (1L << (MINUS - 402)) | (1L << (TILDE - 402)) | (1L << (StringLiteral - 402)) | (1L << (DoubleQuoteStringLiteral - 402)) | (1L << (BigintLiteral - 402)) | (1L << (SmallintLiteral - 402)) | (1L << (TinyintLiteral - 402)) | (1L << (DecimalLiteral - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Number - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)) | (1L << (CharSetStringLiteral - 402)))) != 0)) {
				{
				setState(3362);
				expression();
				}
			}

			setState(3369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3365);
				match(COMMA);
				setState(3366);
				expression();
				}
				}
				setState(3371);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3372);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionSingleContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupingExpressionSingleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpressionSingle; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterGroupingExpressionSingle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitGroupingExpressionSingle(this);
		}
	}

	public final GroupingExpressionSingleContext groupingExpressionSingle() throws RecognitionException {
		GroupingExpressionSingleContext _localctx = new GroupingExpressionSingleContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_groupingExpressionSingle);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode KW_HAVING() { return getToken(CommandParser.KW_HAVING, 0); }
		public HavingConditionContext havingCondition() {
			return getRuleContext(HavingConditionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHavingClause(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3376);
			match(KW_HAVING);
			setState(3377);
			havingCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterHavingCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitHavingCondition(this);
		}
	}

	public final HavingConditionContext havingCondition() throws RecognitionException {
		HavingConditionContext _localctx = new HavingConditionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_havingCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3379);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsInParentheseContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public ExpressionsNotInParentheseContext expressionsNotInParenthese() {
			return getRuleContext(ExpressionsNotInParentheseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ExpressionsInParentheseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsInParenthese; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterExpressionsInParenthese(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitExpressionsInParenthese(this);
		}
	}

	public final ExpressionsInParentheseContext expressionsInParenthese() throws RecognitionException {
		ExpressionsInParentheseContext _localctx = new ExpressionsInParentheseContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_expressionsInParenthese);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3381);
			match(LPAREN);
			setState(3382);
			expressionsNotInParenthese();
			setState(3383);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsNotInParentheseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ExpressionsNotInParentheseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsNotInParenthese; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterExpressionsNotInParenthese(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitExpressionsNotInParenthese(this);
		}
	}

	public final ExpressionsNotInParentheseContext expressionsNotInParenthese() throws RecognitionException {
		ExpressionsNotInParentheseContext _localctx = new ExpressionsNotInParentheseContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_expressionsNotInParenthese);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3385);
			expression();
			setState(3390);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3386);
					match(COMMA);
					setState(3387);
					expression();
					}
					} 
				}
				setState(3392);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnRefOrderInParentheseContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public ColumnRefOrderNotInParentheseContext columnRefOrderNotInParenthese() {
			return getRuleContext(ColumnRefOrderNotInParentheseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ColumnRefOrderInParentheseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRefOrderInParenthese; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnRefOrderInParenthese(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnRefOrderInParenthese(this);
		}
	}

	public final ColumnRefOrderInParentheseContext columnRefOrderInParenthese() throws RecognitionException {
		ColumnRefOrderInParentheseContext _localctx = new ColumnRefOrderInParentheseContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_columnRefOrderInParenthese);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3393);
			match(LPAREN);
			setState(3394);
			columnRefOrderNotInParenthese();
			setState(3395);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnRefOrderNotInParentheseContext extends ParserRuleContext {
		public List<ColumnRefOrderContext> columnRefOrder() {
			return getRuleContexts(ColumnRefOrderContext.class);
		}
		public ColumnRefOrderContext columnRefOrder(int i) {
			return getRuleContext(ColumnRefOrderContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ColumnRefOrderNotInParentheseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRefOrderNotInParenthese; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnRefOrderNotInParenthese(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnRefOrderNotInParenthese(this);
		}
	}

	public final ColumnRefOrderNotInParentheseContext columnRefOrderNotInParenthese() throws RecognitionException {
		ColumnRefOrderNotInParentheseContext _localctx = new ColumnRefOrderNotInParentheseContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_columnRefOrderNotInParenthese);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3397);
			columnRefOrder();
			setState(3402);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3398);
					match(COMMA);
					setState(3399);
					columnRefOrder();
					}
					} 
				}
				setState(3404);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public ColumnRefOrderContext columnRefOrder;
		public List<ColumnRefOrderContext> exp = new ArrayList<ColumnRefOrderContext>();
		public TerminalNode KW_ORDER() { return getToken(CommandParser.KW_ORDER, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public List<ColumnRefOrderContext> columnRefOrder() {
			return getRuleContexts(ColumnRefOrderContext.class);
		}
		public ColumnRefOrderContext columnRefOrder(int i) {
			return getRuleContext(ColumnRefOrderContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitOrderByClause(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_orderByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3405);
			match(KW_ORDER);
			setState(3406);
			match(KW_BY);
			setState(3407);
			((OrderByClauseContext)_localctx).columnRefOrder = columnRefOrder();
			((OrderByClauseContext)_localctx).exp.add(((OrderByClauseContext)_localctx).columnRefOrder);
			setState(3412);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3408);
					match(COMMA);
					setState(3409);
					((OrderByClauseContext)_localctx).columnRefOrder = columnRefOrder();
					((OrderByClauseContext)_localctx).exp.add(((OrderByClauseContext)_localctx).columnRefOrder);
					}
					} 
				}
				setState(3414);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameOrIndexInParentheseContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public ColumnNameOrIndexNotInParentheseContext columnNameOrIndexNotInParenthese() {
			return getRuleContext(ColumnNameOrIndexNotInParentheseContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ColumnNameOrIndexInParentheseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameOrIndexInParenthese; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameOrIndexInParenthese(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameOrIndexInParenthese(this);
		}
	}

	public final ColumnNameOrIndexInParentheseContext columnNameOrIndexInParenthese() throws RecognitionException {
		ColumnNameOrIndexInParentheseContext _localctx = new ColumnNameOrIndexInParentheseContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_columnNameOrIndexInParenthese);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3415);
			match(LPAREN);
			setState(3416);
			columnNameOrIndexNotInParenthese();
			setState(3417);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameOrIndexNotInParentheseContext extends ParserRuleContext {
		public ColumnNameOrIndexContext columnNameOrIndex;
		public List<ColumnNameOrIndexContext> col = new ArrayList<ColumnNameOrIndexContext>();
		public List<ColumnNameOrIndexContext> columnNameOrIndex() {
			return getRuleContexts(ColumnNameOrIndexContext.class);
		}
		public ColumnNameOrIndexContext columnNameOrIndex(int i) {
			return getRuleContext(ColumnNameOrIndexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public ColumnNameOrIndexNotInParentheseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameOrIndexNotInParenthese; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameOrIndexNotInParenthese(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameOrIndexNotInParenthese(this);
		}
	}

	public final ColumnNameOrIndexNotInParentheseContext columnNameOrIndexNotInParenthese() throws RecognitionException {
		ColumnNameOrIndexNotInParentheseContext _localctx = new ColumnNameOrIndexNotInParentheseContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_columnNameOrIndexNotInParenthese);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3419);
			((ColumnNameOrIndexNotInParentheseContext)_localctx).columnNameOrIndex = columnNameOrIndex();
			((ColumnNameOrIndexNotInParentheseContext)_localctx).col.add(((ColumnNameOrIndexNotInParentheseContext)_localctx).columnNameOrIndex);
			setState(3424);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3420);
					match(COMMA);
					setState(3421);
					((ColumnNameOrIndexNotInParentheseContext)_localctx).columnNameOrIndex = columnNameOrIndex();
					((ColumnNameOrIndexNotInParentheseContext)_localctx).col.add(((ColumnNameOrIndexNotInParentheseContext)_localctx).columnNameOrIndex);
					}
					} 
				}
				setState(3426);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameOrIndexContext extends ParserRuleContext {
		public TableOrColumnRefContext col;
		public ConstantContext index;
		public TableOrColumnRefContext tableOrColumnRef() {
			return getRuleContext(TableOrColumnRefContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ColumnNameOrIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameOrIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterColumnNameOrIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitColumnNameOrIndex(this);
		}
	}

	public final ColumnNameOrIndexContext columnNameOrIndex() throws RecognitionException {
		ColumnNameOrIndexContext _localctx = new ColumnNameOrIndexContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_columnNameOrIndex);
		try {
			setState(3429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3427);
				((ColumnNameOrIndexContext)_localctx).col = tableOrColumnRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3428);
				((ColumnNameOrIndexContext)_localctx).index = constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZorderByClauseContext extends ParserRuleContext {
		public ColumnNameOrIndexInParentheseContext expsParen;
		public ColumnNameOrIndexNotInParentheseContext expsNoParen;
		public TerminalNode KW_ZORDER() { return getToken(CommandParser.KW_ZORDER, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public ColumnNameOrIndexInParentheseContext columnNameOrIndexInParenthese() {
			return getRuleContext(ColumnNameOrIndexInParentheseContext.class,0);
		}
		public ColumnNameOrIndexNotInParentheseContext columnNameOrIndexNotInParenthese() {
			return getRuleContext(ColumnNameOrIndexNotInParentheseContext.class,0);
		}
		public ZorderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zorderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterZorderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitZorderByClause(this);
		}
	}

	public final ZorderByClauseContext zorderByClause() throws RecognitionException {
		ZorderByClauseContext _localctx = new ZorderByClauseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_zorderByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3431);
			match(KW_ZORDER);
			setState(3432);
			match(KW_BY);
			setState(3435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				setState(3433);
				((ZorderByClauseContext)_localctx).expsParen = columnNameOrIndexInParenthese();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_ALL:
			case KW_NONE:
			case KW_LIKE:
			case KW_EXISTS:
			case KW_ASC:
			case KW_DESC:
			case KW_ORDER:
			case KW_ZORDER:
			case KW_GROUP:
			case KW_GROUPS:
			case KW_BY:
			case KW_AS:
			case KW_INSERT:
			case KW_OVERWRITE:
			case KW_OUTER:
			case KW_UNIQUEJOIN:
			case KW_LEFT:
			case KW_RIGHT:
			case KW_FULL:
			case KW_PARTITION:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_LOCAL:
			case KW_TRANSFORM:
			case KW_USING:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_UNION:
			case KW_LOAD:
			case KW_UNLOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_IS:
			case KW_NULL:
			case KW_CREATE:
			case KW_EXTERNAL:
			case KW_ALTER:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_LAST:
			case KW_NULLS:
			case KW_AFTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_RENAME:
			case KW_IGNORE:
			case KW_PROTECTION:
			case KW_TO:
			case KW_COMMENT:
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_ARRAY:
			case KW_STRUCT:
			case KW_MAP:
			case KW_UNIONTYPE:
			case KW_REDUCE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_INTO:
			case KW_BUCKETS:
			case KW_ROW:
			case KW_ROWS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_OFFLINE:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_READONLY:
			case KW_NO_DROP:
			case KW_LOCATION:
			case KW_TABLESAMPLE:
			case KW_BUCKET:
			case KW_OUT:
			case KW_OF:
			case KW_PERCENT:
			case KW_ADD:
			case KW_REPLACE:
			case KW_RLIKE:
			case KW_REGEXP:
			case KW_TEMPORARY:
			case KW_MACRO:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_PRETTY:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_WITH:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_SET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_SKEWJOIN:
			case KW_DYNAMICFILTER:
			case KW_STREAMTABLE:
			case KW_HOLD_DDLTIME:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_DELETE:
			case KW_PLUS:
			case KW_MINUS:
			case KW_FETCH:
			case KW_INTERSECT:
			case KW_VIEW:
			case KW_IN:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_PROCEDURE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_READS:
			case KW_PURGE:
			case KW_RANGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BOTH:
			case KW_BINARY:
			case KW_CONTINUE:
			case KW_CURSOR:
			case KW_TRIGGER:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_ANTI:
			case KW_LATERAL:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_NULL_VALUE:
			case KW_DISTINCT_VALUE:
			case KW_TABLE_COUNT:
			case KW_COLUMN_SUM:
			case KW_COLUMN_MAX:
			case KW_COLUMN_MIN:
			case KW_EXPRESSION_CONDITION:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_UPDATE:
			case KW_MATCHED:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_ROLLUP:
			case KW_CUBE:
			case KW_DIRECTORIES:
			case KW_FOR:
			case KW_WINDOW:
			case KW_UNBOUNDED:
			case KW_PRECEDING:
			case KW_FOLLOWING:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_LESS:
			case KW_MORE:
			case KW_OVER:
			case KW_GROUPING:
			case KW_SETS:
			case KW_TRUNCATE:
			case KW_NOSCAN:
			case KW_PARTIALSCAN:
			case KW_USER:
			case KW_ROLE:
			case KW_ROLES:
			case KW_INNER:
			case KW_EXCHANGE:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_AUTHORIZATION:
			case KW_CONF:
			case KW_VALUES:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_MONTH:
			case KW_DAY:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_YEARS:
			case KW_MONTHS:
			case KW_DAYS:
			case KW_HOURS:
			case KW_MINUTES:
			case KW_SECONDS:
			case KW_UDFPROPERTIES:
			case KW_EXCLUDE:
			case KW_TIES:
			case KW_NO:
			case KW_OTHERS:
			case KW_BEGIN:
			case KW_RETURNS:
			case KW_SQL:
			case KW_LOOP:
			case KW_NEW:
			case KW_LIFECYCLE:
			case KW_REMOVE:
			case KW_GRANTS:
			case KW_ACL:
			case KW_TYPE:
			case KW_LIST:
			case KW_USERS:
			case KW_WHOAMI:
			case KW_TRUSTEDPROJECTS:
			case KW_TRUSTEDPROJECT:
			case KW_SECURITYCONFIGURATION:
			case KW_PRIVILEGES:
			case KW_PROJECT:
			case KW_PROJECTS:
			case KW_LABEL:
			case KW_ALLOW:
			case KW_DISALLOW:
			case KW_PACKAGE:
			case KW_PACKAGES:
			case KW_INSTALL:
			case KW_UNINSTALL:
			case KW_P:
			case KW_JOB:
			case KW_JOBS:
			case KW_ACCOUNTPROVIDERS:
			case KW_RESOURCES:
			case KW_FLAGS:
			case KW_COUNT:
			case KW_STATISTIC:
			case KW_STATISTIC_LIST:
			case KW_GET:
			case KW_PUT:
			case KW_POLICY:
			case KW_PROJECTPROTECTION:
			case KW_EXCEPTION:
			case KW_CLEAR:
			case KW_EXPIRED:
			case KW_EXP:
			case KW_ACCOUNTPROVIDER:
			case KW_SUPER:
			case KW_VOLUMEFILE:
			case KW_VOLUMEARCHIVE:
			case KW_OFFLINEMODEL:
			case KW_PY:
			case KW_RESOURCE:
			case KW_KILL:
			case KW_STATUS:
			case KW_SETPROJECT:
			case KW_MERGE:
			case KW_SMALLFILES:
			case KW_PARTITIONPROPERTIES:
			case KW_EXSTORE:
			case KW_CHANGELOGS:
			case KW_REDO:
			case KW_CHANGEOWNER:
			case KW_RECYCLEBIN:
			case KW_PRIVILEGEPROPERTIES:
			case KW_CACHE:
			case KW_CACHEPROPERTIES:
			case KW_VARIABLES:
			case KW_EXCEPT:
			case KW_SELECTIVITY:
			case KW_EXTRACT:
			case KW_SUBSTRING:
			case KW_DEFAULT:
			case KW_ANY:
			case KW_NATURAL:
			case KW_CONSTRAINT:
			case KW_PRIMARY:
			case KW_KEY:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_CLONE:
			case KW_HISTORY:
			case KW_RESTORE:
			case KW_LSN:
			case KW_WITHIN:
			case KW_FILTER:
			case KW_TENANT:
			case KW_SHARDS:
			case KW_HUBLIFECYCLE:
			case KW_HUBTABLE:
			case KW_OUTPUT:
			case KW_CODE_BEGIN:
			case KW_CODE_END:
			case KW_MODEL:
			case KW_PROPERTIES:
			case StringLiteral:
			case DoubleQuoteStringLiteral:
			case BigintLiteral:
			case SmallintLiteral:
			case TinyintLiteral:
			case DecimalLiteral:
			case ByteLengthLiteral:
			case Number:
			case Identifier:
			case CharSetStringLiteral:
				{
				setState(3434);
				((ZorderByClauseContext)_localctx).expsNoParen = columnNameOrIndexNotInParenthese();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterByClauseContext extends ParserRuleContext {
		public ExpressionsInParentheseContext expsParen;
		public ExpressionsNotInParentheseContext expsNoParen;
		public TerminalNode KW_CLUSTER() { return getToken(CommandParser.KW_CLUSTER, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public ExpressionsInParentheseContext expressionsInParenthese() {
			return getRuleContext(ExpressionsInParentheseContext.class,0);
		}
		public ExpressionsNotInParentheseContext expressionsNotInParenthese() {
			return getRuleContext(ExpressionsNotInParentheseContext.class,0);
		}
		public ClusterByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterClusterByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitClusterByClause(this);
		}
	}

	public final ClusterByClauseContext clusterByClause() throws RecognitionException {
		ClusterByClauseContext _localctx = new ClusterByClauseContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_clusterByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3437);
			match(KW_CLUSTER);
			setState(3438);
			match(KW_BY);
			setState(3441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(3439);
				((ClusterByClauseContext)_localctx).expsParen = expressionsInParenthese();
				}
				break;
			case 2:
				{
				setState(3440);
				((ClusterByClauseContext)_localctx).expsNoParen = expressionsNotInParenthese();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByClauseContext extends ParserRuleContext {
		public ExpressionsInParentheseContext expsParen;
		public ExpressionsNotInParentheseContext expsNoParen;
		public TerminalNode KW_PARTITION() { return getToken(CommandParser.KW_PARTITION, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public ExpressionsInParentheseContext expressionsInParenthese() {
			return getRuleContext(ExpressionsInParentheseContext.class,0);
		}
		public ExpressionsNotInParentheseContext expressionsNotInParenthese() {
			return getRuleContext(ExpressionsNotInParentheseContext.class,0);
		}
		public PartitionByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPartitionByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPartitionByClause(this);
		}
	}

	public final PartitionByClauseContext partitionByClause() throws RecognitionException {
		PartitionByClauseContext _localctx = new PartitionByClauseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_partitionByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443);
			match(KW_PARTITION);
			setState(3444);
			match(KW_BY);
			setState(3447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				setState(3445);
				((PartitionByClauseContext)_localctx).expsParen = expressionsInParenthese();
				}
				break;
			case 2:
				{
				setState(3446);
				((PartitionByClauseContext)_localctx).expsNoParen = expressionsNotInParenthese();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistributeByClauseContext extends ParserRuleContext {
		public ExpressionsInParentheseContext expsParen;
		public ExpressionsNotInParentheseContext expsNoParen;
		public TerminalNode KW_DISTRIBUTE() { return getToken(CommandParser.KW_DISTRIBUTE, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public ExpressionsInParentheseContext expressionsInParenthese() {
			return getRuleContext(ExpressionsInParentheseContext.class,0);
		}
		public ExpressionsNotInParentheseContext expressionsNotInParenthese() {
			return getRuleContext(ExpressionsNotInParentheseContext.class,0);
		}
		public DistributeByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distributeByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDistributeByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDistributeByClause(this);
		}
	}

	public final DistributeByClauseContext distributeByClause() throws RecognitionException {
		DistributeByClauseContext _localctx = new DistributeByClauseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_distributeByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3449);
			match(KW_DISTRIBUTE);
			setState(3450);
			match(KW_BY);
			setState(3453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3451);
				((DistributeByClauseContext)_localctx).expsParen = expressionsInParenthese();
				}
				break;
			case 2:
				{
				setState(3452);
				((DistributeByClauseContext)_localctx).expsNoParen = expressionsNotInParenthese();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortByClauseContext extends ParserRuleContext {
		public ColumnRefOrderInParentheseContext expsParen;
		public ColumnRefOrderNotInParentheseContext expsNoParen;
		public TerminalNode KW_SORT() { return getToken(CommandParser.KW_SORT, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public ColumnRefOrderInParentheseContext columnRefOrderInParenthese() {
			return getRuleContext(ColumnRefOrderInParentheseContext.class,0);
		}
		public ColumnRefOrderNotInParentheseContext columnRefOrderNotInParenthese() {
			return getRuleContext(ColumnRefOrderNotInParentheseContext.class,0);
		}
		public SortByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSortByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSortByClause(this);
		}
	}

	public final SortByClauseContext sortByClause() throws RecognitionException {
		SortByClauseContext _localctx = new SortByClauseContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_sortByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3455);
			match(KW_SORT);
			setState(3456);
			match(KW_BY);
			setState(3459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(3457);
				((SortByClauseContext)_localctx).expsParen = columnRefOrderInParenthese();
				}
				break;
			case 2:
				{
				setState(3458);
				((SortByClauseContext)_localctx).expsNoParen = columnRefOrderNotInParenthese();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionContext extends ParserRuleContext {
		public FunctionNameContext name;
		public Token lp;
		public Token star;
		public Token distinct;
		public FunctionArgumentContext functionArgument;
		public List<FunctionArgumentContext> arg = new ArrayList<FunctionArgumentContext>();
		public OrderByClauseContext obc;
		public WhereClauseContext wc;
		public Window_specificationContext ws;
		public BuiltinFunctionStructureContext bfs;
		public List<TerminalNode> RPAREN() { return getTokens(CommandParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(CommandParser.RPAREN, i);
		}
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(CommandParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(CommandParser.LPAREN, i);
		}
		public TerminalNode STAR() { return getToken(CommandParser.STAR, 0); }
		public TerminalNode KW_WITHIN() { return getToken(CommandParser.KW_WITHIN, 0); }
		public TerminalNode KW_GROUP() { return getToken(CommandParser.KW_GROUP, 0); }
		public TerminalNode KW_FILTER() { return getToken(CommandParser.KW_FILTER, 0); }
		public TerminalNode KW_OVER() { return getToken(CommandParser.KW_OVER, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(CommandParser.KW_DISTINCT, 0); }
		public List<FunctionArgumentContext> functionArgument() {
			return getRuleContexts(FunctionArgumentContext.class);
		}
		public FunctionArgumentContext functionArgument(int i) {
			return getRuleContext(FunctionArgumentContext.class,i);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public BuiltinFunctionStructureContext builtinFunctionStructure() {
			return getRuleContext(BuiltinFunctionStructureContext.class,0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunction(this);
		}
	}

	public final FunctionContext function() throws RecognitionException {
		FunctionContext _localctx = new FunctionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_function);
		int _la;
		try {
			setState(3509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3461);
				((FunctionContext)_localctx).name = functionName();
				setState(3462);
				((FunctionContext)_localctx).lp = match(LPAREN);
				setState(3477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					setState(3463);
					((FunctionContext)_localctx).star = match(STAR);
					}
					break;
				case 2:
					{
					setState(3465);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_DISTINCT) {
						{
						setState(3464);
						((FunctionContext)_localctx).distinct = match(KW_DISTINCT);
						}
					}

					setState(3475);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (KW_TRUE - 18)) | (1L << (KW_FALSE - 18)) | (1L << (KW_ALL - 18)) | (1L << (KW_NONE - 18)) | (1L << (KW_NOT - 18)) | (1L << (KW_LIKE - 18)) | (1L << (KW_IF - 18)) | (1L << (KW_EXISTS - 18)) | (1L << (KW_ASC - 18)) | (1L << (KW_DESC - 18)) | (1L << (KW_ORDER - 18)) | (1L << (KW_ZORDER - 18)) | (1L << (KW_GROUP - 18)) | (1L << (KW_GROUPS - 18)) | (1L << (KW_BY - 18)) | (1L << (KW_AS - 18)) | (1L << (KW_INSERT - 18)) | (1L << (KW_OVERWRITE - 18)) | (1L << (KW_OUTER - 18)) | (1L << (KW_UNIQUEJOIN - 18)) | (1L << (KW_LEFT - 18)) | (1L << (KW_RIGHT - 18)) | (1L << (KW_FULL - 18)) | (1L << (KW_PARTITION - 18)) | (1L << (KW_PARTITIONS - 18)) | (1L << (KW_TABLE - 18)) | (1L << (KW_TABLES - 18)) | (1L << (KW_COLUMNS - 18)) | (1L << (KW_INDEX - 18)) | (1L << (KW_INDEXES - 18)) | (1L << (KW_REBUILD - 18)) | (1L << (KW_FUNCTIONS - 18)) | (1L << (KW_SHOW - 18)) | (1L << (KW_MSCK - 18)) | (1L << (KW_REPAIR - 18)) | (1L << (KW_DIRECTORY - 18)) | (1L << (KW_LOCAL - 18)) | (1L << (KW_TRANSFORM - 18)) | (1L << (KW_USING - 18)) | (1L << (KW_CLUSTER - 18)) | (1L << (KW_DISTRIBUTE - 18)) | (1L << (KW_SORT - 18)) | (1L << (KW_UNION - 18)) | (1L << (KW_LOAD - 18)) | (1L << (KW_UNLOAD - 18)) | (1L << (KW_EXPORT - 18)) | (1L << (KW_IMPORT - 18)) | (1L << (KW_REPLICATION - 18)) | (1L << (KW_METADATA - 18)) | (1L << (KW_DATA - 18)) | (1L << (KW_INPATH - 18)) | (1L << (KW_IS - 18)) | (1L << (KW_NULL - 18)) | (1L << (KW_CREATE - 18)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KW_EXTERNAL - 82)) | (1L << (KW_ALTER - 82)) | (1L << (KW_CHANGE - 82)) | (1L << (KW_FIRST - 82)) | (1L << (KW_LAST - 82)) | (1L << (KW_NULLS - 82)) | (1L << (KW_AFTER - 82)) | (1L << (KW_DESCRIBE - 82)) | (1L << (KW_DROP - 82)) | (1L << (KW_RENAME - 82)) | (1L << (KW_IGNORE - 82)) | (1L << (KW_PROTECTION - 82)) | (1L << (KW_TO - 82)) | (1L << (KW_COMMENT - 82)) | (1L << (KW_BOOLEAN - 82)) | (1L << (KW_TINYINT - 82)) | (1L << (KW_SMALLINT - 82)) | (1L << (KW_INT - 82)) | (1L << (KW_BIGINT - 82)) | (1L << (KW_FLOAT - 82)) | (1L << (KW_DOUBLE - 82)) | (1L << (KW_DATE - 82)) | (1L << (KW_DATETIME - 82)) | (1L << (KW_TIMESTAMP - 82)) | (1L << (KW_INTERVAL - 82)) | (1L << (KW_DECIMAL - 82)) | (1L << (KW_STRING - 82)) | (1L << (KW_ARRAY - 82)) | (1L << (KW_STRUCT - 82)) | (1L << (KW_MAP - 82)) | (1L << (KW_UNIONTYPE - 82)) | (1L << (KW_REDUCE - 82)) | (1L << (KW_PARTITIONED - 82)) | (1L << (KW_CLUSTERED - 82)) | (1L << (KW_SORTED - 82)) | (1L << (KW_INTO - 82)) | (1L << (KW_BUCKETS - 82)) | (1L << (KW_ROW - 82)) | (1L << (KW_ROWS - 82)) | (1L << (KW_FORMAT - 82)) | (1L << (KW_DELIMITED - 82)) | (1L << (KW_FIELDS - 82)) | (1L << (KW_TERMINATED - 82)) | (1L << (KW_ESCAPED - 82)) | (1L << (KW_COLLECTION - 82)) | (1L << (KW_ITEMS - 82)) | (1L << (KW_KEYS - 82)) | (1L << (KW_KEY_TYPE - 82)) | (1L << (KW_LINES - 82)) | (1L << (KW_STORED - 82)) | (1L << (KW_FILEFORMAT - 82)) | (1L << (KW_INPUTFORMAT - 82)) | (1L << (KW_OUTPUTFORMAT - 82)) | (1L << (KW_INPUTDRIVER - 82)) | (1L << (KW_OUTPUTDRIVER - 82)) | (1L << (KW_OFFLINE - 82)) | (1L << (KW_ENABLE - 82)) | (1L << (KW_DISABLE - 82)) | (1L << (KW_READONLY - 82)) | (1L << (KW_NO_DROP - 82)) | (1L << (KW_LOCATION - 82)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (KW_TABLESAMPLE - 146)) | (1L << (KW_BUCKET - 146)) | (1L << (KW_OUT - 146)) | (1L << (KW_OF - 146)) | (1L << (KW_PERCENT - 146)) | (1L << (KW_CAST - 146)) | (1L << (KW_ADD - 146)) | (1L << (KW_REPLACE - 146)) | (1L << (KW_RLIKE - 146)) | (1L << (KW_REGEXP - 146)) | (1L << (KW_TEMPORARY - 146)) | (1L << (KW_FUNCTION - 146)) | (1L << (KW_MACRO - 146)) | (1L << (KW_FILE - 146)) | (1L << (KW_JAR - 146)) | (1L << (KW_EXPLAIN - 146)) | (1L << (KW_FORMATTED - 146)) | (1L << (KW_PRETTY - 146)) | (1L << (KW_DEPENDENCY - 146)) | (1L << (KW_LOGICAL - 146)) | (1L << (KW_SERDE - 146)) | (1L << (KW_WITH - 146)) | (1L << (KW_DEFERRED - 146)) | (1L << (KW_SERDEPROPERTIES - 146)) | (1L << (KW_DBPROPERTIES - 146)) | (1L << (KW_LIMIT - 146)) | (1L << (KW_OFFSET - 146)) | (1L << (KW_SET - 146)) | (1L << (KW_UNSET - 146)) | (1L << (KW_TBLPROPERTIES - 146)) | (1L << (KW_IDXPROPERTIES - 146)) | (1L << (KW_VALUE_TYPE - 146)) | (1L << (KW_ELEM_TYPE - 146)) | (1L << (KW_DEFINED - 146)) | (1L << (KW_CASE - 146)) | (1L << (KW_MAPJOIN - 146)) | (1L << (KW_SKEWJOIN - 146)) | (1L << (KW_DYNAMICFILTER - 146)) | (1L << (KW_STREAMTABLE - 146)) | (1L << (KW_HOLD_DDLTIME - 146)) | (1L << (KW_CLUSTERSTATUS - 146)) | (1L << (KW_UTC - 146)) | (1L << (KW_UTCTIMESTAMP - 146)) | (1L << (KW_LONG - 146)) | (1L << (KW_DELETE - 146)) | (1L << (KW_PLUS - 146)) | (1L << (KW_MINUS - 146)) | (1L << (KW_FETCH - 146)) | (1L << (KW_INTERSECT - 146)) | (1L << (KW_VIEW - 146)) | (1L << (KW_IN - 146)) | (1L << (KW_DATABASE - 146)) | (1L << (KW_DATABASES - 146)) | (1L << (KW_MATERIALIZED - 146)) | (1L << (KW_SCHEMA - 146)) | (1L << (KW_SCHEMAS - 146)) | (1L << (KW_GRANT - 146)) | (1L << (KW_REVOKE - 146)) | (1L << (KW_SSL - 146)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (KW_UNDO - 210)) | (1L << (KW_LOCK - 210)) | (1L << (KW_LOCKS - 210)) | (1L << (KW_UNLOCK - 210)) | (1L << (KW_SHARED - 210)) | (1L << (KW_EXCLUSIVE - 210)) | (1L << (KW_PROCEDURE - 210)) | (1L << (KW_UNSIGNED - 210)) | (1L << (KW_WHILE - 210)) | (1L << (KW_READ - 210)) | (1L << (KW_READS - 210)) | (1L << (KW_PURGE - 210)) | (1L << (KW_RANGE - 210)) | (1L << (KW_ANALYZE - 210)) | (1L << (KW_BEFORE - 210)) | (1L << (KW_BETWEEN - 210)) | (1L << (KW_BOTH - 210)) | (1L << (KW_BINARY - 210)) | (1L << (KW_CONTINUE - 210)) | (1L << (KW_CURSOR - 210)) | (1L << (KW_TRIGGER - 210)) | (1L << (KW_RECORDREADER - 210)) | (1L << (KW_RECORDWRITER - 210)) | (1L << (KW_SEMI - 210)) | (1L << (KW_ANTI - 210)) | (1L << (KW_LATERAL - 210)) | (1L << (KW_TOUCH - 210)) | (1L << (KW_ARCHIVE - 210)) | (1L << (KW_UNARCHIVE - 210)) | (1L << (KW_COMPUTE - 210)) | (1L << (KW_STATISTICS - 210)) | (1L << (KW_NULL_VALUE - 210)) | (1L << (KW_DISTINCT_VALUE - 210)) | (1L << (KW_TABLE_COUNT - 210)) | (1L << (KW_COLUMN_SUM - 210)) | (1L << (KW_COLUMN_MAX - 210)) | (1L << (KW_COLUMN_MIN - 210)) | (1L << (KW_EXPRESSION_CONDITION - 210)) | (1L << (KW_USE - 210)) | (1L << (KW_OPTION - 210)) | (1L << (KW_CONCATENATE - 210)) | (1L << (KW_SHOW_DATABASE - 210)) | (1L << (KW_UPDATE - 210)) | (1L << (KW_MATCHED - 210)) | (1L << (KW_RESTRICT - 210)) | (1L << (KW_CASCADE - 210)) | (1L << (KW_SKEWED - 210)) | (1L << (KW_ROLLUP - 210)) | (1L << (KW_CUBE - 210)) | (1L << (KW_DIRECTORIES - 210)) | (1L << (KW_FOR - 210)) | (1L << (KW_WINDOW - 210)) | (1L << (KW_UNBOUNDED - 210)) | (1L << (KW_PRECEDING - 210)) | (1L << (KW_FOLLOWING - 210)) | (1L << (KW_LOCALTIMESTAMP - 210)) | (1L << (KW_CURRENT_DATE - 210)) | (1L << (KW_CURRENT_TIMESTAMP - 210)) | (1L << (KW_LESS - 210)) | (1L << (KW_MORE - 210)) | (1L << (KW_OVER - 210)) | (1L << (KW_GROUPING - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (KW_SETS - 274)) | (1L << (KW_TRUNCATE - 274)) | (1L << (KW_NOSCAN - 274)) | (1L << (KW_PARTIALSCAN - 274)) | (1L << (KW_USER - 274)) | (1L << (KW_ROLE - 274)) | (1L << (KW_ROLES - 274)) | (1L << (KW_INNER - 274)) | (1L << (KW_EXCHANGE - 274)) | (1L << (KW_URI - 274)) | (1L << (KW_SERVER - 274)) | (1L << (KW_ADMIN - 274)) | (1L << (KW_OWNER - 274)) | (1L << (KW_PRINCIPALS - 274)) | (1L << (KW_COMPACT - 274)) | (1L << (KW_COMPACTIONS - 274)) | (1L << (KW_TRANSACTIONS - 274)) | (1L << (KW_REWRITE - 274)) | (1L << (KW_AUTHORIZATION - 274)) | (1L << (KW_CONF - 274)) | (1L << (KW_VALUES - 274)) | (1L << (KW_RELOAD - 274)) | (1L << (KW_YEAR - 274)) | (1L << (KW_MONTH - 274)) | (1L << (KW_DAY - 274)) | (1L << (KW_HOUR - 274)) | (1L << (KW_MINUTE - 274)) | (1L << (KW_SECOND - 274)) | (1L << (KW_YEARS - 274)) | (1L << (KW_MONTHS - 274)) | (1L << (KW_DAYS - 274)) | (1L << (KW_HOURS - 274)) | (1L << (KW_MINUTES - 274)) | (1L << (KW_SECONDS - 274)) | (1L << (KW_UDFPROPERTIES - 274)) | (1L << (KW_EXCLUDE - 274)) | (1L << (KW_TIES - 274)) | (1L << (KW_NO - 274)) | (1L << (KW_OTHERS - 274)) | (1L << (KW_BEGIN - 274)) | (1L << (KW_RETURNS - 274)) | (1L << (KW_SQL - 274)) | (1L << (KW_LOOP - 274)) | (1L << (KW_NEW - 274)) | (1L << (KW_LIFECYCLE - 274)) | (1L << (KW_REMOVE - 274)) | (1L << (KW_GRANTS - 274)) | (1L << (KW_ACL - 274)) | (1L << (KW_TYPE - 274)) | (1L << (KW_LIST - 274)) | (1L << (KW_USERS - 274)) | (1L << (KW_WHOAMI - 274)) | (1L << (KW_TRUSTEDPROJECTS - 274)) | (1L << (KW_TRUSTEDPROJECT - 274)) | (1L << (KW_SECURITYCONFIGURATION - 274)) | (1L << (KW_PRIVILEGES - 274)) | (1L << (KW_PROJECT - 274)) | (1L << (KW_PROJECTS - 274)) | (1L << (KW_LABEL - 274)) | (1L << (KW_ALLOW - 274)) | (1L << (KW_DISALLOW - 274)) | (1L << (KW_PACKAGE - 274)) | (1L << (KW_PACKAGES - 274)) | (1L << (KW_INSTALL - 274)))) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (KW_UNINSTALL - 338)) | (1L << (KW_P - 338)) | (1L << (KW_JOB - 338)) | (1L << (KW_JOBS - 338)) | (1L << (KW_ACCOUNTPROVIDERS - 338)) | (1L << (KW_RESOURCES - 338)) | (1L << (KW_FLAGS - 338)) | (1L << (KW_COUNT - 338)) | (1L << (KW_STATISTIC - 338)) | (1L << (KW_STATISTIC_LIST - 338)) | (1L << (KW_GET - 338)) | (1L << (KW_PUT - 338)) | (1L << (KW_POLICY - 338)) | (1L << (KW_PROJECTPROTECTION - 338)) | (1L << (KW_EXCEPTION - 338)) | (1L << (KW_CLEAR - 338)) | (1L << (KW_EXPIRED - 338)) | (1L << (KW_EXP - 338)) | (1L << (KW_ACCOUNTPROVIDER - 338)) | (1L << (KW_SUPER - 338)) | (1L << (KW_VOLUMEFILE - 338)) | (1L << (KW_VOLUMEARCHIVE - 338)) | (1L << (KW_OFFLINEMODEL - 338)) | (1L << (KW_PY - 338)) | (1L << (KW_RESOURCE - 338)) | (1L << (KW_KILL - 338)) | (1L << (KW_STATUS - 338)) | (1L << (KW_SETPROJECT - 338)) | (1L << (KW_MERGE - 338)) | (1L << (KW_SMALLFILES - 338)) | (1L << (KW_PARTITIONPROPERTIES - 338)) | (1L << (KW_EXSTORE - 338)) | (1L << (KW_CHANGELOGS - 338)) | (1L << (KW_REDO - 338)) | (1L << (KW_CHANGEOWNER - 338)) | (1L << (KW_RECYCLEBIN - 338)) | (1L << (KW_PRIVILEGEPROPERTIES - 338)) | (1L << (KW_CACHE - 338)) | (1L << (KW_CACHEPROPERTIES - 338)) | (1L << (KW_VARIABLES - 338)) | (1L << (KW_EXCEPT - 338)) | (1L << (KW_SELECTIVITY - 338)) | (1L << (KW_EXTRACT - 338)) | (1L << (KW_SUBSTRING - 338)) | (1L << (KW_DEFAULT - 338)) | (1L << (KW_ANY - 338)) | (1L << (KW_NATURAL - 338)) | (1L << (KW_CONSTRAINT - 338)) | (1L << (KW_PRIMARY - 338)) | (1L << (KW_KEY - 338)) | (1L << (KW_VALIDATE - 338)) | (1L << (KW_NOVALIDATE - 338)) | (1L << (KW_RELY - 338)) | (1L << (KW_NORELY - 338)) | (1L << (KW_CLONE - 338)) | (1L << (KW_HISTORY - 338)) | (1L << (KW_RESTORE - 338)) | (1L << (KW_LSN - 338)) | (1L << (KW_WITHIN - 338)) | (1L << (KW_FILTER - 338)) | (1L << (KW_TENANT - 338)) | (1L << (KW_SHARDS - 338)) | (1L << (KW_HUBLIFECYCLE - 338)) | (1L << (KW_HUBTABLE - 338)))) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (KW_OUTPUT - 402)) | (1L << (KW_CODE_BEGIN - 402)) | (1L << (KW_CODE_END - 402)) | (1L << (KW_MODEL - 402)) | (1L << (KW_PROPERTIES - 402)) | (1L << (COLON - 402)) | (1L << (LPAREN - 402)) | (1L << (PLUS - 402)) | (1L << (MINUS - 402)) | (1L << (STAR - 402)) | (1L << (TILDE - 402)) | (1L << (StringLiteral - 402)) | (1L << (DoubleQuoteStringLiteral - 402)) | (1L << (BigintLiteral - 402)) | (1L << (SmallintLiteral - 402)) | (1L << (TinyintLiteral - 402)) | (1L << (DecimalLiteral - 402)) | (1L << (ByteLengthLiteral - 402)) | (1L << (Number - 402)) | (1L << (Variable - 402)) | (1L << (Identifier - 402)) | (1L << (CharSetStringLiteral - 402)))) != 0)) {
						{
						setState(3467);
						((FunctionContext)_localctx).functionArgument = functionArgument();
						((FunctionContext)_localctx).arg.add(((FunctionContext)_localctx).functionArgument);
						setState(3472);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3468);
							match(COMMA);
							setState(3469);
							((FunctionContext)_localctx).functionArgument = functionArgument();
							((FunctionContext)_localctx).arg.add(((FunctionContext)_localctx).functionArgument);
							}
							}
							setState(3474);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				}
				setState(3479);
				match(RPAREN);
				setState(3506);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3486);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
					case 1:
						{
						setState(3480);
						match(KW_WITHIN);
						setState(3481);
						match(KW_GROUP);
						setState(3482);
						match(LPAREN);
						setState(3483);
						((FunctionContext)_localctx).obc = orderByClause();
						setState(3484);
						match(RPAREN);
						}
						break;
					}
					setState(3493);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
					case 1:
						{
						setState(3488);
						match(KW_FILTER);
						setState(3489);
						match(LPAREN);
						setState(3490);
						((FunctionContext)_localctx).wc = whereClause();
						setState(3491);
						match(RPAREN);
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(3500);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
					case 1:
						{
						setState(3495);
						match(KW_FILTER);
						setState(3496);
						match(LPAREN);
						setState(3497);
						((FunctionContext)_localctx).wc = whereClause();
						setState(3498);
						match(RPAREN);
						}
						break;
					}
					setState(3504);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
					case 1:
						{
						setState(3502);
						match(KW_OVER);
						setState(3503);
						((FunctionContext)_localctx).ws = window_specification();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3508);
				((FunctionContext)_localctx).bfs = builtinFunctionStructure();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgumentContext extends ParserRuleContext {
		public SelectExpressionContext s;
		public FunNameRefContext f;
		public LambdaExpressionContext l;
		public SelectExpressionContext selectExpression() {
			return getRuleContext(SelectExpressionContext.class,0);
		}
		public FunNameRefContext funNameRef() {
			return getRuleContext(FunNameRefContext.class,0);
		}
		public LambdaExpressionContext lambdaExpression() {
			return getRuleContext(LambdaExpressionContext.class,0);
		}
		public FunctionArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunctionArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunctionArgument(this);
		}
	}

	public final FunctionArgumentContext functionArgument() throws RecognitionException {
		FunctionArgumentContext _localctx = new FunctionArgumentContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_functionArgument);
		try {
			setState(3514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3511);
				((FunctionArgumentContext)_localctx).s = selectExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3512);
				((FunctionArgumentContext)_localctx).f = funNameRef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3513);
				((FunctionArgumentContext)_localctx).l = lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BuiltinFunctionStructureContext extends ParserRuleContext {
		public IntervalQualifiersUnitContext u;
		public ExpressionContext arg;
		public MathExpressionContext st;
		public MathExpressionContext end;
		public TerminalNode KW_EXTRACT() { return getToken(CommandParser.KW_EXTRACT, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public IntervalQualifiersUnitContext intervalQualifiersUnit() {
			return getRuleContext(IntervalQualifiersUnitContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_SUBSTRING() { return getToken(CommandParser.KW_SUBSTRING, 0); }
		public List<MathExpressionContext> mathExpression() {
			return getRuleContexts(MathExpressionContext.class);
		}
		public MathExpressionContext mathExpression(int i) {
			return getRuleContext(MathExpressionContext.class,i);
		}
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public BuiltinFunctionStructureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtinFunctionStructure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterBuiltinFunctionStructure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitBuiltinFunctionStructure(this);
		}
	}

	public final BuiltinFunctionStructureContext builtinFunctionStructure() throws RecognitionException {
		BuiltinFunctionStructureContext _localctx = new BuiltinFunctionStructureContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_builtinFunctionStructure);
		int _la;
		try {
			setState(3534);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_EXTRACT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3516);
				match(KW_EXTRACT);
				setState(3517);
				match(LPAREN);
				setState(3518);
				((BuiltinFunctionStructureContext)_localctx).u = intervalQualifiersUnit();
				setState(3519);
				match(KW_FROM);
				setState(3520);
				((BuiltinFunctionStructureContext)_localctx).arg = expression();
				setState(3521);
				match(RPAREN);
				}
				break;
			case KW_SUBSTRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3523);
				match(KW_SUBSTRING);
				setState(3524);
				match(LPAREN);
				setState(3525);
				((BuiltinFunctionStructureContext)_localctx).arg = expression();
				setState(3526);
				match(KW_FROM);
				setState(3527);
				((BuiltinFunctionStructureContext)_localctx).st = mathExpression(0);
				setState(3530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FOR) {
					{
					setState(3528);
					match(KW_FOR);
					setState(3529);
					((BuiltinFunctionStructureContext)_localctx).end = mathExpression(0);
					}
				}

				setState(3532);
				match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public Token kwIf;
		public Token kwArray;
		public FunctionIdentifierContext id;
		public Sql11ReservedKeywordsUsedAsCastFunctionNameContext sql11ReservedId;
		public TerminalNode KW_IF() { return getToken(CommandParser.KW_IF, 0); }
		public TerminalNode KW_ARRAY() { return getToken(CommandParser.KW_ARRAY, 0); }
		public TerminalNode KW_MAP() { return getToken(CommandParser.KW_MAP, 0); }
		public TerminalNode KW_STRUCT() { return getToken(CommandParser.KW_STRUCT, 0); }
		public TerminalNode KW_UNIONTYPE() { return getToken(CommandParser.KW_UNIONTYPE, 0); }
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public Sql11ReservedKeywordsUsedAsCastFunctionNameContext sql11ReservedKeywordsUsedAsCastFunctionName() {
			return getRuleContext(Sql11ReservedKeywordsUsedAsCastFunctionNameContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunctionName(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_functionName);
		try {
			setState(3543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3536);
				((FunctionNameContext)_localctx).kwIf = match(KW_IF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3537);
				((FunctionNameContext)_localctx).kwArray = match(KW_ARRAY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3538);
				match(KW_MAP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3539);
				match(KW_STRUCT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3540);
				match(KW_UNIONTYPE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3541);
				((FunctionNameContext)_localctx).id = functionIdentifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3542);
				((FunctionNameContext)_localctx).sql11ReservedId = sql11ReservedKeywordsUsedAsCastFunctionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastExpressionContext extends ParserRuleContext {
		public ExpressionContext exp;
		public BuiltinTypeOrUdtContext typeDecl;
		public TerminalNode KW_CAST() { return getToken(CommandParser.KW_CAST, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public BuiltinTypeOrUdtContext builtinTypeOrUdt() {
			return getRuleContext(BuiltinTypeOrUdtContext.class,0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCastExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCastExpression(this);
		}
	}

	public final CastExpressionContext castExpression() throws RecognitionException {
		CastExpressionContext _localctx = new CastExpressionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_castExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			match(KW_CAST);
			setState(3546);
			match(LPAREN);
			setState(3547);
			((CastExpressionContext)_localctx).exp = expression();
			setState(3548);
			match(KW_AS);
			setState(3549);
			((CastExpressionContext)_localctx).typeDecl = builtinTypeOrUdt();
			setState(3550);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public ExpressionContext caseExp;
		public ExpressionContext expression;
		public List<ExpressionContext> whenExp = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> thenExp = new ArrayList<ExpressionContext>();
		public ExpressionContext elseExp;
		public TerminalNode KW_CASE() { return getToken(CommandParser.KW_CASE, 0); }
		public TerminalNode KW_END() { return getToken(CommandParser.KW_END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> KW_WHEN() { return getTokens(CommandParser.KW_WHEN); }
		public TerminalNode KW_WHEN(int i) {
			return getToken(CommandParser.KW_WHEN, i);
		}
		public List<TerminalNode> KW_THEN() { return getTokens(CommandParser.KW_THEN); }
		public TerminalNode KW_THEN(int i) {
			return getToken(CommandParser.KW_THEN, i);
		}
		public TerminalNode KW_ELSE() { return getToken(CommandParser.KW_ELSE, 0); }
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCaseExpression(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_caseExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3552);
			match(KW_CASE);
			setState(3553);
			((CaseExpressionContext)_localctx).caseExp = expression();
			setState(3559); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3554);
				match(KW_WHEN);
				setState(3555);
				((CaseExpressionContext)_localctx).expression = expression();
				((CaseExpressionContext)_localctx).whenExp.add(((CaseExpressionContext)_localctx).expression);
				setState(3556);
				match(KW_THEN);
				setState(3557);
				((CaseExpressionContext)_localctx).expression = expression();
				((CaseExpressionContext)_localctx).thenExp.add(((CaseExpressionContext)_localctx).expression);
				}
				}
				setState(3561); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==KW_WHEN );
			setState(3565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ELSE) {
				{
				setState(3563);
				match(KW_ELSE);
				setState(3564);
				((CaseExpressionContext)_localctx).elseExp = expression();
				}
			}

			setState(3567);
			match(KW_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenExpressionContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> whenExp = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> thenExp = new ArrayList<ExpressionContext>();
		public ExpressionContext elseExp;
		public TerminalNode KW_CASE() { return getToken(CommandParser.KW_CASE, 0); }
		public TerminalNode KW_END() { return getToken(CommandParser.KW_END, 0); }
		public List<TerminalNode> KW_WHEN() { return getTokens(CommandParser.KW_WHEN); }
		public TerminalNode KW_WHEN(int i) {
			return getToken(CommandParser.KW_WHEN, i);
		}
		public List<TerminalNode> KW_THEN() { return getTokens(CommandParser.KW_THEN); }
		public TerminalNode KW_THEN(int i) {
			return getToken(CommandParser.KW_THEN, i);
		}
		public TerminalNode KW_ELSE() { return getToken(CommandParser.KW_ELSE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterWhenExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitWhenExpression(this);
		}
	}

	public final WhenExpressionContext whenExpression() throws RecognitionException {
		WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_whenExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3569);
			match(KW_CASE);
			setState(3575); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3570);
				match(KW_WHEN);
				setState(3571);
				((WhenExpressionContext)_localctx).expression = expression();
				((WhenExpressionContext)_localctx).whenExp.add(((WhenExpressionContext)_localctx).expression);
				setState(3572);
				match(KW_THEN);
				setState(3573);
				((WhenExpressionContext)_localctx).expression = expression();
				((WhenExpressionContext)_localctx).thenExp.add(((WhenExpressionContext)_localctx).expression);
				}
				}
				setState(3577); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==KW_WHEN );
			setState(3581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ELSE) {
				{
				setState(3579);
				match(KW_ELSE);
				setState(3580);
				((WhenExpressionContext)_localctx).elseExp = expression();
				}
			}

			setState(3583);
			match(KW_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token n;
		public DateLiteralContext date;
		public TimestampLiteralContext timestamp;
		public DateTimeLiteralContext datetime;
		public IntervalLiteralContext i;
		public StringLiteralContext s;
		public Token bi;
		public Token si;
		public Token ti;
		public Token df;
		public CharSetStringLiteralContext cs;
		public BooleanValueContext b;
		public TerminalNode Number() { return getToken(CommandParser.Number, 0); }
		public DateLiteralContext dateLiteral() {
			return getRuleContext(DateLiteralContext.class,0);
		}
		public TimestampLiteralContext timestampLiteral() {
			return getRuleContext(TimestampLiteralContext.class,0);
		}
		public DateTimeLiteralContext dateTimeLiteral() {
			return getRuleContext(DateTimeLiteralContext.class,0);
		}
		public IntervalLiteralContext intervalLiteral() {
			return getRuleContext(IntervalLiteralContext.class,0);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode BigintLiteral() { return getToken(CommandParser.BigintLiteral, 0); }
		public TerminalNode SmallintLiteral() { return getToken(CommandParser.SmallintLiteral, 0); }
		public TerminalNode TinyintLiteral() { return getToken(CommandParser.TinyintLiteral, 0); }
		public TerminalNode DecimalLiteral() { return getToken(CommandParser.DecimalLiteral, 0); }
		public CharSetStringLiteralContext charSetStringLiteral() {
			return getRuleContext(CharSetStringLiteralContext.class,0);
		}
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_constant);
		try {
			setState(3597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Number:
				enterOuterAlt(_localctx, 1);
				{
				setState(3585);
				((ConstantContext)_localctx).n = match(Number);
				}
				break;
			case KW_DATE:
			case KW_CURRENT_DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3586);
				((ConstantContext)_localctx).date = dateLiteral();
				}
				break;
			case KW_TIMESTAMP:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3587);
				((ConstantContext)_localctx).timestamp = timestampLiteral();
				}
				break;
			case KW_DATETIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(3588);
				((ConstantContext)_localctx).datetime = dateTimeLiteral();
				}
				break;
			case KW_INTERVAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3589);
				((ConstantContext)_localctx).i = intervalLiteral();
				}
				break;
			case StringLiteral:
			case DoubleQuoteStringLiteral:
				enterOuterAlt(_localctx, 6);
				{
				setState(3590);
				((ConstantContext)_localctx).s = stringLiteral();
				}
				break;
			case BigintLiteral:
				enterOuterAlt(_localctx, 7);
				{
				setState(3591);
				((ConstantContext)_localctx).bi = match(BigintLiteral);
				}
				break;
			case SmallintLiteral:
				enterOuterAlt(_localctx, 8);
				{
				setState(3592);
				((ConstantContext)_localctx).si = match(SmallintLiteral);
				}
				break;
			case TinyintLiteral:
				enterOuterAlt(_localctx, 9);
				{
				setState(3593);
				((ConstantContext)_localctx).ti = match(TinyintLiteral);
				}
				break;
			case DecimalLiteral:
				enterOuterAlt(_localctx, 10);
				{
				setState(3594);
				((ConstantContext)_localctx).df = match(DecimalLiteral);
				}
				break;
			case CharSetStringLiteral:
				enterOuterAlt(_localctx, 11);
				{
				setState(3595);
				((ConstantContext)_localctx).cs = charSetStringLiteral();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
				enterOuterAlt(_localctx, 12);
				{
				setState(3596);
				((ConstantContext)_localctx).b = booleanValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringLiteralContext extends ParserRuleContext {
		public TerminalNode StringLiteral() { return getToken(CommandParser.StringLiteral, 0); }
		public TerminalNode DoubleQuoteStringLiteral() { return getToken(CommandParser.DoubleQuoteStringLiteral, 0); }
		public SimpleStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSimpleStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSimpleStringLiteral(this);
		}
	}

	public final SimpleStringLiteralContext simpleStringLiteral() throws RecognitionException {
		SimpleStringLiteralContext _localctx = new SimpleStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_simpleStringLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599);
			_la = _input.LA(1);
			if ( !(_la==StringLiteral || _la==DoubleQuoteStringLiteral) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<SimpleStringLiteralContext> simpleStringLiteral() {
			return getRuleContexts(SimpleStringLiteralContext.class);
		}
		public SimpleStringLiteralContext simpleStringLiteral(int i) {
			return getRuleContext(SimpleStringLiteralContext.class,i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitStringLiteral(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_stringLiteral);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3602); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3601);
					simpleStringLiteral();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3604); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,427,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoubleQuoteStringLiteralContext extends ParserRuleContext {
		public TerminalNode DoubleQuoteStringLiteral() { return getToken(CommandParser.DoubleQuoteStringLiteral, 0); }
		public DoubleQuoteStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doubleQuoteStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDoubleQuoteStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDoubleQuoteStringLiteral(this);
		}
	}

	public final DoubleQuoteStringLiteralContext doubleQuoteStringLiteral() throws RecognitionException {
		DoubleQuoteStringLiteralContext _localctx = new DoubleQuoteStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_doubleQuoteStringLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3606);
			match(DoubleQuoteStringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharSetStringLiteralContext extends ParserRuleContext {
		public TerminalNode CharSetStringLiteral() { return getToken(CommandParser.CharSetStringLiteral, 0); }
		public CharSetStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSetStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterCharSetStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitCharSetStringLiteral(this);
		}
	}

	public final CharSetStringLiteralContext charSetStringLiteral() throws RecognitionException {
		CharSetStringLiteralContext _localctx = new CharSetStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_charSetStringLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			match(CharSetStringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateLiteralContext extends ParserRuleContext {
		public SimpleStringLiteralContext s;
		public TerminalNode KW_DATE() { return getToken(CommandParser.KW_DATE, 0); }
		public SimpleStringLiteralContext simpleStringLiteral() {
			return getRuleContext(SimpleStringLiteralContext.class,0);
		}
		public TerminalNode KW_CURRENT_DATE() { return getToken(CommandParser.KW_CURRENT_DATE, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDateLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDateLiteral(this);
		}
	}

	public final DateLiteralContext dateLiteral() throws RecognitionException {
		DateLiteralContext _localctx = new DateLiteralContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_dateLiteral);
		try {
			setState(3613);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3610);
				match(KW_DATE);
				setState(3611);
				((DateLiteralContext)_localctx).s = simpleStringLiteral();
				}
				break;
			case KW_CURRENT_DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3612);
				match(KW_CURRENT_DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeLiteralContext extends ParserRuleContext {
		public SimpleStringLiteralContext s;
		public TerminalNode KW_DATETIME() { return getToken(CommandParser.KW_DATETIME, 0); }
		public SimpleStringLiteralContext simpleStringLiteral() {
			return getRuleContext(SimpleStringLiteralContext.class,0);
		}
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDateTimeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDateTimeLiteral(this);
		}
	}

	public final DateTimeLiteralContext dateTimeLiteral() throws RecognitionException {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_dateTimeLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			match(KW_DATETIME);
			setState(3616);
			((DateTimeLiteralContext)_localctx).s = simpleStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampLiteralContext extends ParserRuleContext {
		public SimpleStringLiteralContext s;
		public TerminalNode KW_TIMESTAMP() { return getToken(CommandParser.KW_TIMESTAMP, 0); }
		public SimpleStringLiteralContext simpleStringLiteral() {
			return getRuleContext(SimpleStringLiteralContext.class,0);
		}
		public TerminalNode KW_CURRENT_TIMESTAMP() { return getToken(CommandParser.KW_CURRENT_TIMESTAMP, 0); }
		public TerminalNode KW_LOCALTIMESTAMP() { return getToken(CommandParser.KW_LOCALTIMESTAMP, 0); }
		public TimestampLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterTimestampLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitTimestampLiteral(this);
		}
	}

	public final TimestampLiteralContext timestampLiteral() throws RecognitionException {
		TimestampLiteralContext _localctx = new TimestampLiteralContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_timestampLiteral);
		try {
			setState(3622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3618);
				match(KW_TIMESTAMP);
				setState(3619);
				((TimestampLiteralContext)_localctx).s = simpleStringLiteral();
				}
				break;
			case KW_CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3620);
				match(KW_CURRENT_TIMESTAMP);
				}
				break;
			case KW_LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3621);
				match(KW_LOCALTIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalLiteralContext extends ParserRuleContext {
		public StringLiteralContext v;
		public IntervalQualifiersContext q;
		public MathExpressionContext e;
		public IntervalQualifiersUnitContext u;
		public TerminalNode KW_INTERVAL() { return getToken(CommandParser.KW_INTERVAL, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public IntervalQualifiersContext intervalQualifiers() {
			return getRuleContext(IntervalQualifiersContext.class,0);
		}
		public MathExpressionContext mathExpression() {
			return getRuleContext(MathExpressionContext.class,0);
		}
		public IntervalQualifiersUnitContext intervalQualifiersUnit() {
			return getRuleContext(IntervalQualifiersUnitContext.class,0);
		}
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterIntervalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitIntervalLiteral(this);
		}
	}

	public final IntervalLiteralContext intervalLiteral() throws RecognitionException {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_intervalLiteral);
		try {
			setState(3632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3624);
				match(KW_INTERVAL);
				setState(3625);
				((IntervalLiteralContext)_localctx).v = stringLiteral();
				setState(3626);
				((IntervalLiteralContext)_localctx).q = intervalQualifiers();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3628);
				match(KW_INTERVAL);
				setState(3629);
				((IntervalLiteralContext)_localctx).e = mathExpression(0);
				setState(3630);
				((IntervalLiteralContext)_localctx).u = intervalQualifiersUnit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalQualifiersContext extends ParserRuleContext {
		public Token y2m;
		public Token d2h;
		public Token d2m;
		public Token d2s;
		public Token h2m;
		public Token h2s;
		public Token m2s;
		public IntervalQualifiersUnitContext u;
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public TerminalNode KW_MONTH() { return getToken(CommandParser.KW_MONTH, 0); }
		public TerminalNode KW_YEAR() { return getToken(CommandParser.KW_YEAR, 0); }
		public List<IntervalQualifierPrecisionContext> intervalQualifierPrecision() {
			return getRuleContexts(IntervalQualifierPrecisionContext.class);
		}
		public IntervalQualifierPrecisionContext intervalQualifierPrecision(int i) {
			return getRuleContext(IntervalQualifierPrecisionContext.class,i);
		}
		public TerminalNode KW_HOUR() { return getToken(CommandParser.KW_HOUR, 0); }
		public TerminalNode KW_DAY() { return getToken(CommandParser.KW_DAY, 0); }
		public TerminalNode KW_MINUTE() { return getToken(CommandParser.KW_MINUTE, 0); }
		public TerminalNode KW_SECOND() { return getToken(CommandParser.KW_SECOND, 0); }
		public IntervalQualifiersUnitContext intervalQualifiersUnit() {
			return getRuleContext(IntervalQualifiersUnitContext.class,0);
		}
		public IntervalQualifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalQualifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterIntervalQualifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitIntervalQualifiers(this);
		}
	}

	public final IntervalQualifiersContext intervalQualifiers() throws RecognitionException {
		IntervalQualifiersContext _localctx = new IntervalQualifiersContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_intervalQualifiers);
		int _la;
		try {
			setState(3701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3634);
				((IntervalQualifiersContext)_localctx).y2m = match(KW_YEAR);
				setState(3636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3635);
					intervalQualifierPrecision();
					}
				}

				setState(3638);
				match(KW_TO);
				setState(3639);
				match(KW_MONTH);
				setState(3641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(3640);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3643);
				((IntervalQualifiersContext)_localctx).d2h = match(KW_DAY);
				setState(3645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3644);
					intervalQualifierPrecision();
					}
				}

				setState(3647);
				match(KW_TO);
				setState(3648);
				match(KW_HOUR);
				setState(3650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					setState(3649);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3652);
				((IntervalQualifiersContext)_localctx).d2m = match(KW_DAY);
				setState(3654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3653);
					intervalQualifierPrecision();
					}
				}

				setState(3656);
				match(KW_TO);
				setState(3657);
				match(KW_MINUTE);
				setState(3659);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					setState(3658);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3661);
				((IntervalQualifiersContext)_localctx).d2s = match(KW_DAY);
				setState(3663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3662);
					intervalQualifierPrecision();
					}
				}

				setState(3665);
				match(KW_TO);
				setState(3666);
				match(KW_SECOND);
				setState(3668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					setState(3667);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3670);
				((IntervalQualifiersContext)_localctx).h2m = match(KW_HOUR);
				setState(3672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3671);
					intervalQualifierPrecision();
					}
				}

				setState(3674);
				match(KW_TO);
				setState(3675);
				match(KW_MINUTE);
				setState(3677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(3676);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3679);
				((IntervalQualifiersContext)_localctx).h2s = match(KW_HOUR);
				setState(3681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3680);
					intervalQualifierPrecision();
					}
				}

				setState(3683);
				match(KW_TO);
				setState(3684);
				match(KW_SECOND);
				setState(3686);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					setState(3685);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3688);
				((IntervalQualifiersContext)_localctx).m2s = match(KW_MINUTE);
				setState(3690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(3689);
					intervalQualifierPrecision();
					}
				}

				setState(3692);
				match(KW_TO);
				setState(3693);
				match(KW_SECOND);
				setState(3695);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
				case 1:
					{
					setState(3694);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3697);
				((IntervalQualifiersContext)_localctx).u = intervalQualifiersUnit();
				setState(3699);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(3698);
					intervalQualifierPrecision();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalQualifiersUnitContext extends ParserRuleContext {
		public Token y;
		public Token M;
		public Token d;
		public Token h;
		public Token m;
		public Token s;
		public TerminalNode KW_YEAR() { return getToken(CommandParser.KW_YEAR, 0); }
		public TerminalNode KW_YEARS() { return getToken(CommandParser.KW_YEARS, 0); }
		public TerminalNode KW_MONTH() { return getToken(CommandParser.KW_MONTH, 0); }
		public TerminalNode KW_MONTHS() { return getToken(CommandParser.KW_MONTHS, 0); }
		public TerminalNode KW_DAY() { return getToken(CommandParser.KW_DAY, 0); }
		public TerminalNode KW_DAYS() { return getToken(CommandParser.KW_DAYS, 0); }
		public TerminalNode KW_HOUR() { return getToken(CommandParser.KW_HOUR, 0); }
		public TerminalNode KW_HOURS() { return getToken(CommandParser.KW_HOURS, 0); }
		public TerminalNode KW_MINUTE() { return getToken(CommandParser.KW_MINUTE, 0); }
		public TerminalNode KW_MINUTES() { return getToken(CommandParser.KW_MINUTES, 0); }
		public TerminalNode KW_SECOND() { return getToken(CommandParser.KW_SECOND, 0); }
		public TerminalNode KW_SECONDS() { return getToken(CommandParser.KW_SECONDS, 0); }
		public IntervalQualifiersUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalQualifiersUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterIntervalQualifiersUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitIntervalQualifiersUnit(this);
		}
	}

	public final IntervalQualifiersUnitContext intervalQualifiersUnit() throws RecognitionException {
		IntervalQualifiersUnitContext _localctx = new IntervalQualifiersUnitContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_intervalQualifiersUnit);
		try {
			setState(3715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3703);
				((IntervalQualifiersUnitContext)_localctx).y = match(KW_YEAR);
				}
				break;
			case KW_YEARS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3704);
				((IntervalQualifiersUnitContext)_localctx).y = match(KW_YEARS);
				}
				break;
			case KW_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(3705);
				((IntervalQualifiersUnitContext)_localctx).M = match(KW_MONTH);
				}
				break;
			case KW_MONTHS:
				enterOuterAlt(_localctx, 4);
				{
				setState(3706);
				((IntervalQualifiersUnitContext)_localctx).M = match(KW_MONTHS);
				}
				break;
			case KW_DAY:
				enterOuterAlt(_localctx, 5);
				{
				setState(3707);
				((IntervalQualifiersUnitContext)_localctx).d = match(KW_DAY);
				}
				break;
			case KW_DAYS:
				enterOuterAlt(_localctx, 6);
				{
				setState(3708);
				((IntervalQualifiersUnitContext)_localctx).d = match(KW_DAYS);
				}
				break;
			case KW_HOUR:
				enterOuterAlt(_localctx, 7);
				{
				setState(3709);
				((IntervalQualifiersUnitContext)_localctx).h = match(KW_HOUR);
				}
				break;
			case KW_HOURS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3710);
				((IntervalQualifiersUnitContext)_localctx).h = match(KW_HOURS);
				}
				break;
			case KW_MINUTE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3711);
				((IntervalQualifiersUnitContext)_localctx).m = match(KW_MINUTE);
				}
				break;
			case KW_MINUTES:
				enterOuterAlt(_localctx, 10);
				{
				setState(3712);
				((IntervalQualifiersUnitContext)_localctx).m = match(KW_MINUTES);
				}
				break;
			case KW_SECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(3713);
				((IntervalQualifiersUnitContext)_localctx).s = match(KW_SECOND);
				}
				break;
			case KW_SECONDS:
				enterOuterAlt(_localctx, 12);
				{
				setState(3714);
				((IntervalQualifiersUnitContext)_localctx).s = match(KW_SECONDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalQualifierPrecisionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode Number() { return getToken(CommandParser.Number, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public IntervalQualifierPrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalQualifierPrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterIntervalQualifierPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitIntervalQualifierPrecision(this);
		}
	}

	public final IntervalQualifierPrecisionContext intervalQualifierPrecision() throws RecognitionException {
		IntervalQualifierPrecisionContext _localctx = new IntervalQualifierPrecisionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_intervalQualifierPrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3717);
			match(LPAREN);
			setState(3718);
			match(Number);
			setState(3719);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode KW_TRUE() { return getToken(CommandParser.KW_TRUE, 0); }
		public TerminalNode KW_FALSE() { return getToken(CommandParser.KW_FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitBooleanValue(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3721);
			_la = _input.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecContext extends ParserRuleContext {
		public PartitionValContext partitionVal;
		public List<PartitionValContext> partitions = new ArrayList<PartitionValContext>();
		public TerminalNode KW_PARTITION() { return getToken(CommandParser.KW_PARTITION, 0); }
		public TerminalNode LPAREN() { return getToken(CommandParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(CommandParser.RPAREN, 0); }
		public List<PartitionValContext> partitionVal() {
			return getRuleContexts(PartitionValContext.class);
		}
		public PartitionValContext partitionVal(int i) {
			return getRuleContext(PartitionValContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CommandParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CommandParser.COMMA, i);
		}
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPartitionSpec(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_partitionSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3723);
			match(KW_PARTITION);
			setState(3724);
			match(LPAREN);
			setState(3725);
			((PartitionSpecContext)_localctx).partitionVal = partitionVal();
			((PartitionSpecContext)_localctx).partitions.add(((PartitionSpecContext)_localctx).partitionVal);
			setState(3730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3726);
				match(COMMA);
				setState(3727);
				((PartitionSpecContext)_localctx).partitionVal = partitionVal();
				((PartitionSpecContext)_localctx).partitions.add(((PartitionSpecContext)_localctx).partitionVal);
				}
				}
				setState(3732);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3733);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(CommandParser.EQUAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public VariableRefContext variableRef() {
			return getRuleContext(VariableRefContext.class,0);
		}
		public PartitionValContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionVal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterPartitionVal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitPartitionVal(this);
		}
	}

	public final PartitionValContext partitionVal() throws RecognitionException {
		PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_partitionVal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3735);
			identifier();
			setState(3736);
			match(EQUAL);
			setState(3739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_INTERVAL:
			case KW_LOCALTIMESTAMP:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case StringLiteral:
			case DoubleQuoteStringLiteral:
			case BigintLiteral:
			case SmallintLiteral:
			case TinyintLiteral:
			case DecimalLiteral:
			case Number:
			case CharSetStringLiteral:
				{
				setState(3737);
				constant();
				}
				break;
			case Variable:
				{
				setState(3738);
				variableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateWithoutQuoteContext extends ParserRuleContext {
		public List<TerminalNode> Num() { return getTokens(CommandParser.Num); }
		public TerminalNode Num(int i) {
			return getToken(CommandParser.Num, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(CommandParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CommandParser.MINUS, i);
		}
		public DateWithoutQuoteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateWithoutQuote; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterDateWithoutQuote(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitDateWithoutQuote(this);
		}
	}

	public final DateWithoutQuoteContext dateWithoutQuote() throws RecognitionException {
		DateWithoutQuoteContext _localctx = new DateWithoutQuoteContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_dateWithoutQuote);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3741);
			match(Num);
			setState(3742);
			match(MINUS);
			setState(3743);
			match(Num);
			setState(3744);
			match(MINUS);
			setState(3745);
			match(Num);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionIdentifierContext extends ParserRuleContext {
		public IdentifierContext db;
		public IdentifierContext fn;
		public Token builtin;
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(CommandParser.DOT, 0); }
		public List<TerminalNode> COLON() { return getTokens(CommandParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(CommandParser.COLON, i);
		}
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitFunctionIdentifier(this);
		}
	}

	public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_functionIdentifier);
		int _la;
		try {
			setState(3755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3747);
				((FunctionIdentifierContext)_localctx).db = identifier();
				setState(3748);
				_la = _input.LA(1);
				if ( !(_la==DOT || _la==COLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3749);
				((FunctionIdentifierContext)_localctx).fn = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3751);
				((FunctionIdentifierContext)_localctx).builtin = match(COLON);
				setState(3752);
				match(COLON);
				setState(3753);
				((FunctionIdentifierContext)_localctx).fn = identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3754);
				((FunctionIdentifierContext)_localctx).fn = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode KW_ADD() { return getToken(CommandParser.KW_ADD, 0); }
		public TerminalNode KW_ADMIN() { return getToken(CommandParser.KW_ADMIN, 0); }
		public TerminalNode KW_AFTER() { return getToken(CommandParser.KW_AFTER, 0); }
		public TerminalNode KW_ANALYZE() { return getToken(CommandParser.KW_ANALYZE, 0); }
		public TerminalNode KW_ARCHIVE() { return getToken(CommandParser.KW_ARCHIVE, 0); }
		public TerminalNode KW_ASC() { return getToken(CommandParser.KW_ASC, 0); }
		public TerminalNode KW_BEFORE() { return getToken(CommandParser.KW_BEFORE, 0); }
		public TerminalNode KW_BUCKET() { return getToken(CommandParser.KW_BUCKET, 0); }
		public TerminalNode KW_BUCKETS() { return getToken(CommandParser.KW_BUCKETS, 0); }
		public TerminalNode KW_CASCADE() { return getToken(CommandParser.KW_CASCADE, 0); }
		public TerminalNode KW_CHANGE() { return getToken(CommandParser.KW_CHANGE, 0); }
		public TerminalNode KW_CLUSTER() { return getToken(CommandParser.KW_CLUSTER, 0); }
		public TerminalNode KW_CLUSTERED() { return getToken(CommandParser.KW_CLUSTERED, 0); }
		public TerminalNode KW_CLUSTERSTATUS() { return getToken(CommandParser.KW_CLUSTERSTATUS, 0); }
		public TerminalNode KW_COLLECTION() { return getToken(CommandParser.KW_COLLECTION, 0); }
		public TerminalNode KW_COLUMNS() { return getToken(CommandParser.KW_COLUMNS, 0); }
		public TerminalNode KW_COMMENT() { return getToken(CommandParser.KW_COMMENT, 0); }
		public TerminalNode KW_COMPACT() { return getToken(CommandParser.KW_COMPACT, 0); }
		public TerminalNode KW_COMPACTIONS() { return getToken(CommandParser.KW_COMPACTIONS, 0); }
		public TerminalNode KW_COMPUTE() { return getToken(CommandParser.KW_COMPUTE, 0); }
		public TerminalNode KW_CONCATENATE() { return getToken(CommandParser.KW_CONCATENATE, 0); }
		public TerminalNode KW_CONTINUE() { return getToken(CommandParser.KW_CONTINUE, 0); }
		public TerminalNode KW_DATA() { return getToken(CommandParser.KW_DATA, 0); }
		public TerminalNode KW_DAY() { return getToken(CommandParser.KW_DAY, 0); }
		public TerminalNode KW_DATABASES() { return getToken(CommandParser.KW_DATABASES, 0); }
		public TerminalNode KW_DATETIME() { return getToken(CommandParser.KW_DATETIME, 0); }
		public TerminalNode KW_DBPROPERTIES() { return getToken(CommandParser.KW_DBPROPERTIES, 0); }
		public TerminalNode KW_DEFERRED() { return getToken(CommandParser.KW_DEFERRED, 0); }
		public TerminalNode KW_DEFINED() { return getToken(CommandParser.KW_DEFINED, 0); }
		public TerminalNode KW_DELIMITED() { return getToken(CommandParser.KW_DELIMITED, 0); }
		public TerminalNode KW_DEPENDENCY() { return getToken(CommandParser.KW_DEPENDENCY, 0); }
		public TerminalNode KW_DESC() { return getToken(CommandParser.KW_DESC, 0); }
		public TerminalNode KW_DIRECTORIES() { return getToken(CommandParser.KW_DIRECTORIES, 0); }
		public TerminalNode KW_DIRECTORY() { return getToken(CommandParser.KW_DIRECTORY, 0); }
		public TerminalNode KW_DISABLE() { return getToken(CommandParser.KW_DISABLE, 0); }
		public TerminalNode KW_DISTRIBUTE() { return getToken(CommandParser.KW_DISTRIBUTE, 0); }
		public TerminalNode KW_ELEM_TYPE() { return getToken(CommandParser.KW_ELEM_TYPE, 0); }
		public TerminalNode KW_ENABLE() { return getToken(CommandParser.KW_ENABLE, 0); }
		public TerminalNode KW_ESCAPED() { return getToken(CommandParser.KW_ESCAPED, 0); }
		public TerminalNode KW_EXCLUSIVE() { return getToken(CommandParser.KW_EXCLUSIVE, 0); }
		public TerminalNode KW_EXPLAIN() { return getToken(CommandParser.KW_EXPLAIN, 0); }
		public TerminalNode KW_EXPORT() { return getToken(CommandParser.KW_EXPORT, 0); }
		public TerminalNode KW_FIELDS() { return getToken(CommandParser.KW_FIELDS, 0); }
		public TerminalNode KW_FILE() { return getToken(CommandParser.KW_FILE, 0); }
		public TerminalNode KW_FILEFORMAT() { return getToken(CommandParser.KW_FILEFORMAT, 0); }
		public TerminalNode KW_FIRST() { return getToken(CommandParser.KW_FIRST, 0); }
		public TerminalNode KW_FORMAT() { return getToken(CommandParser.KW_FORMAT, 0); }
		public TerminalNode KW_FORMATTED() { return getToken(CommandParser.KW_FORMATTED, 0); }
		public TerminalNode KW_FUNCTIONS() { return getToken(CommandParser.KW_FUNCTIONS, 0); }
		public TerminalNode KW_HOLD_DDLTIME() { return getToken(CommandParser.KW_HOLD_DDLTIME, 0); }
		public TerminalNode KW_HOUR() { return getToken(CommandParser.KW_HOUR, 0); }
		public TerminalNode KW_IDXPROPERTIES() { return getToken(CommandParser.KW_IDXPROPERTIES, 0); }
		public TerminalNode KW_IGNORE() { return getToken(CommandParser.KW_IGNORE, 0); }
		public TerminalNode KW_INDEX() { return getToken(CommandParser.KW_INDEX, 0); }
		public TerminalNode KW_INDEXES() { return getToken(CommandParser.KW_INDEXES, 0); }
		public TerminalNode KW_INPATH() { return getToken(CommandParser.KW_INPATH, 0); }
		public TerminalNode KW_INPUTDRIVER() { return getToken(CommandParser.KW_INPUTDRIVER, 0); }
		public TerminalNode KW_INPUTFORMAT() { return getToken(CommandParser.KW_INPUTFORMAT, 0); }
		public TerminalNode KW_ITEMS() { return getToken(CommandParser.KW_ITEMS, 0); }
		public TerminalNode KW_JAR() { return getToken(CommandParser.KW_JAR, 0); }
		public TerminalNode KW_KEYS() { return getToken(CommandParser.KW_KEYS, 0); }
		public TerminalNode KW_KEY_TYPE() { return getToken(CommandParser.KW_KEY_TYPE, 0); }
		public TerminalNode KW_LIMIT() { return getToken(CommandParser.KW_LIMIT, 0); }
		public TerminalNode KW_LINES() { return getToken(CommandParser.KW_LINES, 0); }
		public TerminalNode KW_LOAD() { return getToken(CommandParser.KW_LOAD, 0); }
		public TerminalNode KW_LOCATION() { return getToken(CommandParser.KW_LOCATION, 0); }
		public TerminalNode KW_LOCK() { return getToken(CommandParser.KW_LOCK, 0); }
		public TerminalNode KW_LOCKS() { return getToken(CommandParser.KW_LOCKS, 0); }
		public TerminalNode KW_LOGICAL() { return getToken(CommandParser.KW_LOGICAL, 0); }
		public TerminalNode KW_LONG() { return getToken(CommandParser.KW_LONG, 0); }
		public TerminalNode KW_MAPJOIN() { return getToken(CommandParser.KW_MAPJOIN, 0); }
		public TerminalNode KW_SKEWJOIN() { return getToken(CommandParser.KW_SKEWJOIN, 0); }
		public TerminalNode KW_MATERIALIZED() { return getToken(CommandParser.KW_MATERIALIZED, 0); }
		public TerminalNode KW_METADATA() { return getToken(CommandParser.KW_METADATA, 0); }
		public TerminalNode KW_MINUS() { return getToken(CommandParser.KW_MINUS, 0); }
		public TerminalNode KW_MINUTE() { return getToken(CommandParser.KW_MINUTE, 0); }
		public TerminalNode KW_MONTH() { return getToken(CommandParser.KW_MONTH, 0); }
		public TerminalNode KW_MSCK() { return getToken(CommandParser.KW_MSCK, 0); }
		public TerminalNode KW_NOSCAN() { return getToken(CommandParser.KW_NOSCAN, 0); }
		public TerminalNode KW_NO_DROP() { return getToken(CommandParser.KW_NO_DROP, 0); }
		public TerminalNode KW_OFFLINE() { return getToken(CommandParser.KW_OFFLINE, 0); }
		public TerminalNode KW_OPTION() { return getToken(CommandParser.KW_OPTION, 0); }
		public TerminalNode KW_OUTPUTDRIVER() { return getToken(CommandParser.KW_OUTPUTDRIVER, 0); }
		public TerminalNode KW_OUTPUTFORMAT() { return getToken(CommandParser.KW_OUTPUTFORMAT, 0); }
		public TerminalNode KW_OVERWRITE() { return getToken(CommandParser.KW_OVERWRITE, 0); }
		public TerminalNode KW_OWNER() { return getToken(CommandParser.KW_OWNER, 0); }
		public TerminalNode KW_PARTITIONED() { return getToken(CommandParser.KW_PARTITIONED, 0); }
		public TerminalNode KW_PARTITIONS() { return getToken(CommandParser.KW_PARTITIONS, 0); }
		public TerminalNode KW_PLUS() { return getToken(CommandParser.KW_PLUS, 0); }
		public TerminalNode KW_PRETTY() { return getToken(CommandParser.KW_PRETTY, 0); }
		public TerminalNode KW_PRINCIPALS() { return getToken(CommandParser.KW_PRINCIPALS, 0); }
		public TerminalNode KW_PROTECTION() { return getToken(CommandParser.KW_PROTECTION, 0); }
		public TerminalNode KW_PURGE() { return getToken(CommandParser.KW_PURGE, 0); }
		public TerminalNode KW_READ() { return getToken(CommandParser.KW_READ, 0); }
		public TerminalNode KW_READONLY() { return getToken(CommandParser.KW_READONLY, 0); }
		public TerminalNode KW_REBUILD() { return getToken(CommandParser.KW_REBUILD, 0); }
		public TerminalNode KW_RECORDREADER() { return getToken(CommandParser.KW_RECORDREADER, 0); }
		public TerminalNode KW_RECORDWRITER() { return getToken(CommandParser.KW_RECORDWRITER, 0); }
		public TerminalNode KW_REGEXP() { return getToken(CommandParser.KW_REGEXP, 0); }
		public TerminalNode KW_RELOAD() { return getToken(CommandParser.KW_RELOAD, 0); }
		public TerminalNode KW_RENAME() { return getToken(CommandParser.KW_RENAME, 0); }
		public TerminalNode KW_REPAIR() { return getToken(CommandParser.KW_REPAIR, 0); }
		public TerminalNode KW_REPLACE() { return getToken(CommandParser.KW_REPLACE, 0); }
		public TerminalNode KW_REPLICATION() { return getToken(CommandParser.KW_REPLICATION, 0); }
		public TerminalNode KW_RESTRICT() { return getToken(CommandParser.KW_RESTRICT, 0); }
		public TerminalNode KW_REWRITE() { return getToken(CommandParser.KW_REWRITE, 0); }
		public TerminalNode KW_RLIKE() { return getToken(CommandParser.KW_RLIKE, 0); }
		public TerminalNode KW_ROLE() { return getToken(CommandParser.KW_ROLE, 0); }
		public TerminalNode KW_ROLES() { return getToken(CommandParser.KW_ROLES, 0); }
		public TerminalNode KW_SCHEMA() { return getToken(CommandParser.KW_SCHEMA, 0); }
		public TerminalNode KW_SCHEMAS() { return getToken(CommandParser.KW_SCHEMAS, 0); }
		public TerminalNode KW_SECOND() { return getToken(CommandParser.KW_SECOND, 0); }
		public TerminalNode KW_SEMI() { return getToken(CommandParser.KW_SEMI, 0); }
		public TerminalNode KW_SERDE() { return getToken(CommandParser.KW_SERDE, 0); }
		public TerminalNode KW_SERDEPROPERTIES() { return getToken(CommandParser.KW_SERDEPROPERTIES, 0); }
		public TerminalNode KW_SERVER() { return getToken(CommandParser.KW_SERVER, 0); }
		public TerminalNode KW_SETS() { return getToken(CommandParser.KW_SETS, 0); }
		public TerminalNode KW_SHARED() { return getToken(CommandParser.KW_SHARED, 0); }
		public TerminalNode KW_SHOW() { return getToken(CommandParser.KW_SHOW, 0); }
		public TerminalNode KW_SHOW_DATABASE() { return getToken(CommandParser.KW_SHOW_DATABASE, 0); }
		public TerminalNode KW_SKEWED() { return getToken(CommandParser.KW_SKEWED, 0); }
		public TerminalNode KW_SORT() { return getToken(CommandParser.KW_SORT, 0); }
		public TerminalNode KW_SORTED() { return getToken(CommandParser.KW_SORTED, 0); }
		public TerminalNode KW_SSL() { return getToken(CommandParser.KW_SSL, 0); }
		public TerminalNode KW_STATISTICS() { return getToken(CommandParser.KW_STATISTICS, 0); }
		public TerminalNode KW_STORED() { return getToken(CommandParser.KW_STORED, 0); }
		public TerminalNode KW_STREAMTABLE() { return getToken(CommandParser.KW_STREAMTABLE, 0); }
		public TerminalNode KW_STRING() { return getToken(CommandParser.KW_STRING, 0); }
		public TerminalNode KW_STRUCT() { return getToken(CommandParser.KW_STRUCT, 0); }
		public TerminalNode KW_TABLES() { return getToken(CommandParser.KW_TABLES, 0); }
		public TerminalNode KW_TBLPROPERTIES() { return getToken(CommandParser.KW_TBLPROPERTIES, 0); }
		public TerminalNode KW_TEMPORARY() { return getToken(CommandParser.KW_TEMPORARY, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(CommandParser.KW_TERMINATED, 0); }
		public TerminalNode KW_TINYINT() { return getToken(CommandParser.KW_TINYINT, 0); }
		public TerminalNode KW_TOUCH() { return getToken(CommandParser.KW_TOUCH, 0); }
		public TerminalNode KW_TRANSACTIONS() { return getToken(CommandParser.KW_TRANSACTIONS, 0); }
		public TerminalNode KW_UNARCHIVE() { return getToken(CommandParser.KW_UNARCHIVE, 0); }
		public TerminalNode KW_UNDO() { return getToken(CommandParser.KW_UNDO, 0); }
		public TerminalNode KW_UNIONTYPE() { return getToken(CommandParser.KW_UNIONTYPE, 0); }
		public TerminalNode KW_UNLOCK() { return getToken(CommandParser.KW_UNLOCK, 0); }
		public TerminalNode KW_UNSET() { return getToken(CommandParser.KW_UNSET, 0); }
		public TerminalNode KW_UNSIGNED() { return getToken(CommandParser.KW_UNSIGNED, 0); }
		public TerminalNode KW_URI() { return getToken(CommandParser.KW_URI, 0); }
		public TerminalNode KW_USE() { return getToken(CommandParser.KW_USE, 0); }
		public TerminalNode KW_UTC() { return getToken(CommandParser.KW_UTC, 0); }
		public TerminalNode KW_UTCTIMESTAMP() { return getToken(CommandParser.KW_UTCTIMESTAMP, 0); }
		public TerminalNode KW_VALUE_TYPE() { return getToken(CommandParser.KW_VALUE_TYPE, 0); }
		public TerminalNode KW_VIEW() { return getToken(CommandParser.KW_VIEW, 0); }
		public TerminalNode KW_WHILE() { return getToken(CommandParser.KW_WHILE, 0); }
		public TerminalNode KW_YEAR() { return getToken(CommandParser.KW_YEAR, 0); }
		public TerminalNode KW_MAP() { return getToken(CommandParser.KW_MAP, 0); }
		public TerminalNode KW_REDUCE() { return getToken(CommandParser.KW_REDUCE, 0); }
		public TerminalNode KW_ANTI() { return getToken(CommandParser.KW_ANTI, 0); }
		public TerminalNode KW_CUBE() { return getToken(CommandParser.KW_CUBE, 0); }
		public TerminalNode KW_PRIMARY() { return getToken(CommandParser.KW_PRIMARY, 0); }
		public TerminalNode KW_KEY() { return getToken(CommandParser.KW_KEY, 0); }
		public TerminalNode KW_VALIDATE() { return getToken(CommandParser.KW_VALIDATE, 0); }
		public TerminalNode KW_NOVALIDATE() { return getToken(CommandParser.KW_NOVALIDATE, 0); }
		public TerminalNode KW_RELY() { return getToken(CommandParser.KW_RELY, 0); }
		public TerminalNode KW_NORELY() { return getToken(CommandParser.KW_NORELY, 0); }
		public TerminalNode KW_OUTPUT() { return getToken(CommandParser.KW_OUTPUT, 0); }
		public TerminalNode KW_YEARS() { return getToken(CommandParser.KW_YEARS, 0); }
		public TerminalNode KW_MONTHS() { return getToken(CommandParser.KW_MONTHS, 0); }
		public TerminalNode KW_DAYS() { return getToken(CommandParser.KW_DAYS, 0); }
		public TerminalNode KW_HOURS() { return getToken(CommandParser.KW_HOURS, 0); }
		public TerminalNode KW_MINUTES() { return getToken(CommandParser.KW_MINUTES, 0); }
		public TerminalNode KW_SECONDS() { return getToken(CommandParser.KW_SECONDS, 0); }
		public TerminalNode KW_MATCHED() { return getToken(CommandParser.KW_MATCHED, 0); }
		public TerminalNode KW_CODE_BEGIN() { return getToken(CommandParser.KW_CODE_BEGIN, 0); }
		public TerminalNode KW_CODE_END() { return getToken(CommandParser.KW_CODE_END, 0); }
		public TerminalNode KW_HISTORY() { return getToken(CommandParser.KW_HISTORY, 0); }
		public TerminalNode KW_RESTORE() { return getToken(CommandParser.KW_RESTORE, 0); }
		public TerminalNode KW_LSN() { return getToken(CommandParser.KW_LSN, 0); }
		public TerminalNode KW_ZORDER() { return getToken(CommandParser.KW_ZORDER, 0); }
		public TerminalNode KW_SQL() { return getToken(CommandParser.KW_SQL, 0); }
		public TerminalNode KW_MODEL() { return getToken(CommandParser.KW_MODEL, 0); }
		public TerminalNode KW_PROPERTIES() { return getToken(CommandParser.KW_PROPERTIES, 0); }
		public TerminalNode KW_UNLOAD() { return getToken(CommandParser.KW_UNLOAD, 0); }
		public TerminalNode KW_WITHIN() { return getToken(CommandParser.KW_WITHIN, 0); }
		public TerminalNode KW_FILTER() { return getToken(CommandParser.KW_FILTER, 0); }
		public TerminalNode KW_EXCLUDE() { return getToken(CommandParser.KW_EXCLUDE, 0); }
		public TerminalNode KW_TIES() { return getToken(CommandParser.KW_TIES, 0); }
		public TerminalNode KW_NO() { return getToken(CommandParser.KW_NO, 0); }
		public TerminalNode KW_OTHERS() { return getToken(CommandParser.KW_OTHERS, 0); }
		public TerminalNode KW_TRANSFORM() { return getToken(CommandParser.KW_TRANSFORM, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitNonReserved(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3757);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_ZORDER) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (KW_TRANSFORM - 65)) | (1L << (KW_CLUSTER - 65)) | (1L << (KW_DISTRIBUTE - 65)) | (1L << (KW_SORT - 65)) | (1L << (KW_LOAD - 65)) | (1L << (KW_UNLOAD - 65)) | (1L << (KW_EXPORT - 65)) | (1L << (KW_REPLICATION - 65)) | (1L << (KW_METADATA - 65)) | (1L << (KW_DATA - 65)) | (1L << (KW_INPATH - 65)) | (1L << (KW_CHANGE - 65)) | (1L << (KW_FIRST - 65)) | (1L << (KW_AFTER - 65)) | (1L << (KW_RENAME - 65)) | (1L << (KW_IGNORE - 65)) | (1L << (KW_PROTECTION - 65)) | (1L << (KW_COMMENT - 65)) | (1L << (KW_TINYINT - 65)) | (1L << (KW_DATETIME - 65)) | (1L << (KW_STRING - 65)) | (1L << (KW_STRUCT - 65)) | (1L << (KW_MAP - 65)) | (1L << (KW_UNIONTYPE - 65)) | (1L << (KW_REDUCE - 65)) | (1L << (KW_PARTITIONED - 65)) | (1L << (KW_CLUSTERED - 65)) | (1L << (KW_SORTED - 65)) | (1L << (KW_BUCKETS - 65)) | (1L << (KW_FORMAT - 65)) | (1L << (KW_DELIMITED - 65)) | (1L << (KW_FIELDS - 65)) | (1L << (KW_TERMINATED - 65)) | (1L << (KW_ESCAPED - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (KW_COLLECTION - 129)) | (1L << (KW_ITEMS - 129)) | (1L << (KW_KEYS - 129)) | (1L << (KW_KEY_TYPE - 129)) | (1L << (KW_LINES - 129)) | (1L << (KW_STORED - 129)) | (1L << (KW_FILEFORMAT - 129)) | (1L << (KW_INPUTFORMAT - 129)) | (1L << (KW_OUTPUTFORMAT - 129)) | (1L << (KW_INPUTDRIVER - 129)) | (1L << (KW_OUTPUTDRIVER - 129)) | (1L << (KW_OFFLINE - 129)) | (1L << (KW_ENABLE - 129)) | (1L << (KW_DISABLE - 129)) | (1L << (KW_READONLY - 129)) | (1L << (KW_NO_DROP - 129)) | (1L << (KW_LOCATION - 129)) | (1L << (KW_BUCKET - 129)) | (1L << (KW_ADD - 129)) | (1L << (KW_REPLACE - 129)) | (1L << (KW_RLIKE - 129)) | (1L << (KW_REGEXP - 129)) | (1L << (KW_TEMPORARY - 129)) | (1L << (KW_FILE - 129)) | (1L << (KW_JAR - 129)) | (1L << (KW_EXPLAIN - 129)) | (1L << (KW_FORMATTED - 129)) | (1L << (KW_PRETTY - 129)) | (1L << (KW_DEPENDENCY - 129)) | (1L << (KW_LOGICAL - 129)) | (1L << (KW_SERDE - 129)) | (1L << (KW_DEFERRED - 129)) | (1L << (KW_SERDEPROPERTIES - 129)) | (1L << (KW_DBPROPERTIES - 129)) | (1L << (KW_LIMIT - 129)) | (1L << (KW_UNSET - 129)) | (1L << (KW_TBLPROPERTIES - 129)) | (1L << (KW_IDXPROPERTIES - 129)) | (1L << (KW_VALUE_TYPE - 129)) | (1L << (KW_ELEM_TYPE - 129)) | (1L << (KW_DEFINED - 129)) | (1L << (KW_MAPJOIN - 129)) | (1L << (KW_SKEWJOIN - 129)) | (1L << (KW_STREAMTABLE - 129)) | (1L << (KW_HOLD_DDLTIME - 129)) | (1L << (KW_CLUSTERSTATUS - 129)) | (1L << (KW_UTC - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KW_UTCTIMESTAMP - 193)) | (1L << (KW_LONG - 193)) | (1L << (KW_PLUS - 193)) | (1L << (KW_MINUS - 193)) | (1L << (KW_VIEW - 193)) | (1L << (KW_DATABASES - 193)) | (1L << (KW_MATERIALIZED - 193)) | (1L << (KW_SCHEMA - 193)) | (1L << (KW_SCHEMAS - 193)) | (1L << (KW_SSL - 193)) | (1L << (KW_UNDO - 193)) | (1L << (KW_LOCK - 193)) | (1L << (KW_LOCKS - 193)) | (1L << (KW_UNLOCK - 193)) | (1L << (KW_SHARED - 193)) | (1L << (KW_EXCLUSIVE - 193)) | (1L << (KW_UNSIGNED - 193)) | (1L << (KW_WHILE - 193)) | (1L << (KW_READ - 193)) | (1L << (KW_PURGE - 193)) | (1L << (KW_ANALYZE - 193)) | (1L << (KW_BEFORE - 193)) | (1L << (KW_CONTINUE - 193)) | (1L << (KW_RECORDREADER - 193)) | (1L << (KW_RECORDWRITER - 193)) | (1L << (KW_SEMI - 193)) | (1L << (KW_ANTI - 193)) | (1L << (KW_TOUCH - 193)) | (1L << (KW_ARCHIVE - 193)) | (1L << (KW_UNARCHIVE - 193)) | (1L << (KW_COMPUTE - 193)) | (1L << (KW_STATISTICS - 193)) | (1L << (KW_USE - 193)) | (1L << (KW_OPTION - 193)) | (1L << (KW_CONCATENATE - 193)) | (1L << (KW_SHOW_DATABASE - 193)) | (1L << (KW_MATCHED - 193)) | (1L << (KW_RESTRICT - 193)) | (1L << (KW_CASCADE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KW_SKEWED - 257)) | (1L << (KW_CUBE - 257)) | (1L << (KW_DIRECTORIES - 257)) | (1L << (KW_SETS - 257)) | (1L << (KW_NOSCAN - 257)) | (1L << (KW_ROLE - 257)) | (1L << (KW_ROLES - 257)) | (1L << (KW_URI - 257)) | (1L << (KW_SERVER - 257)) | (1L << (KW_ADMIN - 257)) | (1L << (KW_OWNER - 257)) | (1L << (KW_PRINCIPALS - 257)) | (1L << (KW_COMPACT - 257)) | (1L << (KW_COMPACTIONS - 257)) | (1L << (KW_TRANSACTIONS - 257)) | (1L << (KW_REWRITE - 257)) | (1L << (KW_RELOAD - 257)) | (1L << (KW_YEAR - 257)) | (1L << (KW_MONTH - 257)) | (1L << (KW_DAY - 257)) | (1L << (KW_HOUR - 257)) | (1L << (KW_MINUTE - 257)) | (1L << (KW_SECOND - 257)) | (1L << (KW_YEARS - 257)) | (1L << (KW_MONTHS - 257)) | (1L << (KW_DAYS - 257)) | (1L << (KW_HOURS - 257)) | (1L << (KW_MINUTES - 257)) | (1L << (KW_SECONDS - 257)) | (1L << (KW_EXCLUDE - 257)) | (1L << (KW_TIES - 257)) | (1L << (KW_NO - 257)) | (1L << (KW_OTHERS - 257)) | (1L << (KW_SQL - 257)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (KW_PRIMARY - 386)) | (1L << (KW_KEY - 386)) | (1L << (KW_VALIDATE - 386)) | (1L << (KW_NOVALIDATE - 386)) | (1L << (KW_RELY - 386)) | (1L << (KW_NORELY - 386)) | (1L << (KW_HISTORY - 386)) | (1L << (KW_RESTORE - 386)) | (1L << (KW_LSN - 386)) | (1L << (KW_WITHIN - 386)) | (1L << (KW_FILTER - 386)) | (1L << (KW_OUTPUT - 386)) | (1L << (KW_CODE_BEGIN - 386)) | (1L << (KW_CODE_END - 386)) | (1L << (KW_MODEL - 386)) | (1L << (KW_PROPERTIES - 386)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql11ReservedKeywordsUsedAsCastFunctionNameContext extends ParserRuleContext {
		public TerminalNode KW_BIGINT() { return getToken(CommandParser.KW_BIGINT, 0); }
		public TerminalNode KW_BINARY() { return getToken(CommandParser.KW_BINARY, 0); }
		public TerminalNode KW_BOOLEAN() { return getToken(CommandParser.KW_BOOLEAN, 0); }
		public TerminalNode KW_CURRENT_DATE() { return getToken(CommandParser.KW_CURRENT_DATE, 0); }
		public TerminalNode KW_CURRENT_TIMESTAMP() { return getToken(CommandParser.KW_CURRENT_TIMESTAMP, 0); }
		public TerminalNode KW_DATE() { return getToken(CommandParser.KW_DATE, 0); }
		public TerminalNode KW_DOUBLE() { return getToken(CommandParser.KW_DOUBLE, 0); }
		public TerminalNode KW_FLOAT() { return getToken(CommandParser.KW_FLOAT, 0); }
		public TerminalNode KW_INT() { return getToken(CommandParser.KW_INT, 0); }
		public TerminalNode KW_SMALLINT() { return getToken(CommandParser.KW_SMALLINT, 0); }
		public TerminalNode KW_TIMESTAMP() { return getToken(CommandParser.KW_TIMESTAMP, 0); }
		public Sql11ReservedKeywordsUsedAsCastFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql11ReservedKeywordsUsedAsCastFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSql11ReservedKeywordsUsedAsCastFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSql11ReservedKeywordsUsedAsCastFunctionName(this);
		}
	}

	public final Sql11ReservedKeywordsUsedAsCastFunctionNameContext sql11ReservedKeywordsUsedAsCastFunctionName() throws RecognitionException {
		Sql11ReservedKeywordsUsedAsCastFunctionNameContext _localctx = new Sql11ReservedKeywordsUsedAsCastFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_sql11ReservedKeywordsUsedAsCastFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3759);
			_la = _input.LA(1);
			if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (KW_BOOLEAN - 97)) | (1L << (KW_SMALLINT - 97)) | (1L << (KW_INT - 97)) | (1L << (KW_BIGINT - 97)) | (1L << (KW_FLOAT - 97)) | (1L << (KW_DOUBLE - 97)) | (1L << (KW_DATE - 97)) | (1L << (KW_TIMESTAMP - 97)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (KW_BINARY - 227)) | (1L << (KW_CURRENT_DATE - 227)) | (1L << (KW_CURRENT_TIMESTAMP - 227)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql11ReservedKeywordsUsedAsIdentifierContext extends ParserRuleContext {
		public TerminalNode KW_ALL() { return getToken(CommandParser.KW_ALL, 0); }
		public TerminalNode KW_ALTER() { return getToken(CommandParser.KW_ALTER, 0); }
		public TerminalNode KW_ARRAY() { return getToken(CommandParser.KW_ARRAY, 0); }
		public TerminalNode KW_AS() { return getToken(CommandParser.KW_AS, 0); }
		public TerminalNode KW_AUTHORIZATION() { return getToken(CommandParser.KW_AUTHORIZATION, 0); }
		public TerminalNode KW_BETWEEN() { return getToken(CommandParser.KW_BETWEEN, 0); }
		public TerminalNode KW_BIGINT() { return getToken(CommandParser.KW_BIGINT, 0); }
		public TerminalNode KW_BINARY() { return getToken(CommandParser.KW_BINARY, 0); }
		public TerminalNode KW_BOOLEAN() { return getToken(CommandParser.KW_BOOLEAN, 0); }
		public TerminalNode KW_BOTH() { return getToken(CommandParser.KW_BOTH, 0); }
		public TerminalNode KW_BY() { return getToken(CommandParser.KW_BY, 0); }
		public TerminalNode KW_CREATE() { return getToken(CommandParser.KW_CREATE, 0); }
		public TerminalNode KW_CURRENT_DATE() { return getToken(CommandParser.KW_CURRENT_DATE, 0); }
		public TerminalNode KW_CURRENT_TIMESTAMP() { return getToken(CommandParser.KW_CURRENT_TIMESTAMP, 0); }
		public TerminalNode KW_CURSOR() { return getToken(CommandParser.KW_CURSOR, 0); }
		public TerminalNode KW_DATE() { return getToken(CommandParser.KW_DATE, 0); }
		public TerminalNode KW_DECIMAL() { return getToken(CommandParser.KW_DECIMAL, 0); }
		public TerminalNode KW_DELETE() { return getToken(CommandParser.KW_DELETE, 0); }
		public TerminalNode KW_DESCRIBE() { return getToken(CommandParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DOUBLE() { return getToken(CommandParser.KW_DOUBLE, 0); }
		public TerminalNode KW_DROP() { return getToken(CommandParser.KW_DROP, 0); }
		public TerminalNode KW_EXISTS() { return getToken(CommandParser.KW_EXISTS, 0); }
		public TerminalNode KW_EXTERNAL() { return getToken(CommandParser.KW_EXTERNAL, 0); }
		public TerminalNode KW_FALSE() { return getToken(CommandParser.KW_FALSE, 0); }
		public TerminalNode KW_FETCH() { return getToken(CommandParser.KW_FETCH, 0); }
		public TerminalNode KW_FLOAT() { return getToken(CommandParser.KW_FLOAT, 0); }
		public TerminalNode KW_FOR() { return getToken(CommandParser.KW_FOR, 0); }
		public TerminalNode KW_FULL() { return getToken(CommandParser.KW_FULL, 0); }
		public TerminalNode KW_GRANT() { return getToken(CommandParser.KW_GRANT, 0); }
		public TerminalNode KW_GROUP() { return getToken(CommandParser.KW_GROUP, 0); }
		public TerminalNode KW_GROUPING() { return getToken(CommandParser.KW_GROUPING, 0); }
		public TerminalNode KW_IMPORT() { return getToken(CommandParser.KW_IMPORT, 0); }
		public TerminalNode KW_IN() { return getToken(CommandParser.KW_IN, 0); }
		public TerminalNode KW_INNER() { return getToken(CommandParser.KW_INNER, 0); }
		public TerminalNode KW_INSERT() { return getToken(CommandParser.KW_INSERT, 0); }
		public TerminalNode KW_INT() { return getToken(CommandParser.KW_INT, 0); }
		public TerminalNode KW_INTERSECT() { return getToken(CommandParser.KW_INTERSECT, 0); }
		public TerminalNode KW_INTO() { return getToken(CommandParser.KW_INTO, 0); }
		public TerminalNode KW_IS() { return getToken(CommandParser.KW_IS, 0); }
		public TerminalNode KW_LATERAL() { return getToken(CommandParser.KW_LATERAL, 0); }
		public TerminalNode KW_LEFT() { return getToken(CommandParser.KW_LEFT, 0); }
		public TerminalNode KW_LIKE() { return getToken(CommandParser.KW_LIKE, 0); }
		public TerminalNode KW_LOCAL() { return getToken(CommandParser.KW_LOCAL, 0); }
		public TerminalNode KW_NONE() { return getToken(CommandParser.KW_NONE, 0); }
		public TerminalNode KW_NULL() { return getToken(CommandParser.KW_NULL, 0); }
		public TerminalNode KW_OF() { return getToken(CommandParser.KW_OF, 0); }
		public TerminalNode KW_ORDER() { return getToken(CommandParser.KW_ORDER, 0); }
		public TerminalNode KW_OUT() { return getToken(CommandParser.KW_OUT, 0); }
		public TerminalNode KW_OUTER() { return getToken(CommandParser.KW_OUTER, 0); }
		public TerminalNode KW_PARTITION() { return getToken(CommandParser.KW_PARTITION, 0); }
		public TerminalNode KW_PERCENT() { return getToken(CommandParser.KW_PERCENT, 0); }
		public TerminalNode KW_PROCEDURE() { return getToken(CommandParser.KW_PROCEDURE, 0); }
		public TerminalNode KW_RANGE() { return getToken(CommandParser.KW_RANGE, 0); }
		public TerminalNode KW_READS() { return getToken(CommandParser.KW_READS, 0); }
		public TerminalNode KW_REVOKE() { return getToken(CommandParser.KW_REVOKE, 0); }
		public TerminalNode KW_RIGHT() { return getToken(CommandParser.KW_RIGHT, 0); }
		public TerminalNode KW_ROLLUP() { return getToken(CommandParser.KW_ROLLUP, 0); }
		public TerminalNode KW_ROW() { return getToken(CommandParser.KW_ROW, 0); }
		public TerminalNode KW_ROWS() { return getToken(CommandParser.KW_ROWS, 0); }
		public TerminalNode KW_SET() { return getToken(CommandParser.KW_SET, 0); }
		public TerminalNode KW_SMALLINT() { return getToken(CommandParser.KW_SMALLINT, 0); }
		public TerminalNode KW_TABLE() { return getToken(CommandParser.KW_TABLE, 0); }
		public TerminalNode KW_TIMESTAMP() { return getToken(CommandParser.KW_TIMESTAMP, 0); }
		public TerminalNode KW_TO() { return getToken(CommandParser.KW_TO, 0); }
		public TerminalNode KW_TRIGGER() { return getToken(CommandParser.KW_TRIGGER, 0); }
		public TerminalNode KW_TRUE() { return getToken(CommandParser.KW_TRUE, 0); }
		public TerminalNode KW_TRUNCATE() { return getToken(CommandParser.KW_TRUNCATE, 0); }
		public TerminalNode KW_UNION() { return getToken(CommandParser.KW_UNION, 0); }
		public TerminalNode KW_UPDATE() { return getToken(CommandParser.KW_UPDATE, 0); }
		public TerminalNode KW_USER() { return getToken(CommandParser.KW_USER, 0); }
		public TerminalNode KW_USING() { return getToken(CommandParser.KW_USING, 0); }
		public TerminalNode KW_VALUES() { return getToken(CommandParser.KW_VALUES, 0); }
		public TerminalNode KW_WITH() { return getToken(CommandParser.KW_WITH, 0); }
		public TerminalNode KW_WINDOW() { return getToken(CommandParser.KW_WINDOW, 0); }
		public TerminalNode KW_NATURAL() { return getToken(CommandParser.KW_NATURAL, 0); }
		public Sql11ReservedKeywordsUsedAsIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql11ReservedKeywordsUsedAsIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterSql11ReservedKeywordsUsedAsIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitSql11ReservedKeywordsUsedAsIdentifier(this);
		}
	}

	public final Sql11ReservedKeywordsUsedAsIdentifierContext sql11ReservedKeywordsUsedAsIdentifier() throws RecognitionException {
		Sql11ReservedKeywordsUsedAsIdentifierContext _localctx = new Sql11ReservedKeywordsUsedAsIdentifierContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_sql11ReservedKeywordsUsedAsIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3761);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_ALL) | (1L << KW_NONE) | (1L << KW_LIKE) | (1L << KW_EXISTS) | (1L << KW_ORDER) | (1L << KW_GROUP) | (1L << KW_BY) | (1L << KW_AS) | (1L << KW_INSERT) | (1L << KW_OUTER) | (1L << KW_LEFT) | (1L << KW_RIGHT) | (1L << KW_FULL) | (1L << KW_PARTITION) | (1L << KW_TABLE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (KW_LOCAL - 64)) | (1L << (KW_USING - 64)) | (1L << (KW_UNION - 64)) | (1L << (KW_IMPORT - 64)) | (1L << (KW_IS - 64)) | (1L << (KW_NULL - 64)) | (1L << (KW_CREATE - 64)) | (1L << (KW_EXTERNAL - 64)) | (1L << (KW_ALTER - 64)) | (1L << (KW_DESCRIBE - 64)) | (1L << (KW_DROP - 64)) | (1L << (KW_TO - 64)) | (1L << (KW_BOOLEAN - 64)) | (1L << (KW_SMALLINT - 64)) | (1L << (KW_INT - 64)) | (1L << (KW_BIGINT - 64)) | (1L << (KW_FLOAT - 64)) | (1L << (KW_DOUBLE - 64)) | (1L << (KW_DATE - 64)) | (1L << (KW_TIMESTAMP - 64)) | (1L << (KW_DECIMAL - 64)) | (1L << (KW_ARRAY - 64)) | (1L << (KW_INTO - 64)) | (1L << (KW_ROW - 64)) | (1L << (KW_ROWS - 64)))) != 0) || ((((_la - 148)) & ~0x3f) == 0 && ((1L << (_la - 148)) & ((1L << (KW_OUT - 148)) | (1L << (KW_OF - 148)) | (1L << (KW_PERCENT - 148)) | (1L << (KW_WITH - 148)) | (1L << (KW_SET - 148)) | (1L << (KW_DELETE - 148)) | (1L << (KW_FETCH - 148)) | (1L << (KW_INTERSECT - 148)) | (1L << (KW_IN - 148)) | (1L << (KW_GRANT - 148)) | (1L << (KW_REVOKE - 148)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (KW_PROCEDURE - 216)) | (1L << (KW_READS - 216)) | (1L << (KW_RANGE - 216)) | (1L << (KW_BETWEEN - 216)) | (1L << (KW_BOTH - 216)) | (1L << (KW_BINARY - 216)) | (1L << (KW_CURSOR - 216)) | (1L << (KW_TRIGGER - 216)) | (1L << (KW_LATERAL - 216)) | (1L << (KW_UPDATE - 216)) | (1L << (KW_ROLLUP - 216)) | (1L << (KW_FOR - 216)) | (1L << (KW_WINDOW - 216)) | (1L << (KW_CURRENT_DATE - 216)) | (1L << (KW_CURRENT_TIMESTAMP - 216)) | (1L << (KW_GROUPING - 216)) | (1L << (KW_TRUNCATE - 216)) | (1L << (KW_USER - 216)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (KW_INNER - 281)) | (1L << (KW_AUTHORIZATION - 281)) | (1L << (KW_VALUES - 281)))) != 0) || _la==KW_NATURAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReservedContext extends ParserRuleContext {
		public TerminalNode KW_AND() { return getToken(CommandParser.KW_AND, 0); }
		public TerminalNode KW_OR() { return getToken(CommandParser.KW_OR, 0); }
		public TerminalNode KW_NOT() { return getToken(CommandParser.KW_NOT, 0); }
		public TerminalNode KW_LIKE() { return getToken(CommandParser.KW_LIKE, 0); }
		public TerminalNode KW_IF() { return getToken(CommandParser.KW_IF, 0); }
		public TerminalNode KW_HAVING() { return getToken(CommandParser.KW_HAVING, 0); }
		public TerminalNode KW_FROM() { return getToken(CommandParser.KW_FROM, 0); }
		public TerminalNode KW_SELECT() { return getToken(CommandParser.KW_SELECT, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(CommandParser.KW_DISTINCT, 0); }
		public TerminalNode KW_UNIQUEJOIN() { return getToken(CommandParser.KW_UNIQUEJOIN, 0); }
		public TerminalNode KW_PRESERVE() { return getToken(CommandParser.KW_PRESERVE, 0); }
		public TerminalNode KW_JOIN() { return getToken(CommandParser.KW_JOIN, 0); }
		public TerminalNode KW_ON() { return getToken(CommandParser.KW_ON, 0); }
		public TerminalNode KW_COLUMN() { return getToken(CommandParser.KW_COLUMN, 0); }
		public TerminalNode KW_CHAR() { return getToken(CommandParser.KW_CHAR, 0); }
		public TerminalNode KW_VARCHAR() { return getToken(CommandParser.KW_VARCHAR, 0); }
		public TerminalNode KW_TABLESAMPLE() { return getToken(CommandParser.KW_TABLESAMPLE, 0); }
		public TerminalNode KW_CAST() { return getToken(CommandParser.KW_CAST, 0); }
		public TerminalNode KW_MACRO() { return getToken(CommandParser.KW_MACRO, 0); }
		public TerminalNode KW_EXTENDED() { return getToken(CommandParser.KW_EXTENDED, 0); }
		public TerminalNode KW_CASE() { return getToken(CommandParser.KW_CASE, 0); }
		public TerminalNode KW_WHEN() { return getToken(CommandParser.KW_WHEN, 0); }
		public TerminalNode KW_THEN() { return getToken(CommandParser.KW_THEN, 0); }
		public TerminalNode KW_ELSE() { return getToken(CommandParser.KW_ELSE, 0); }
		public TerminalNode KW_END() { return getToken(CommandParser.KW_END, 0); }
		public TerminalNode KW_CROSS() { return getToken(CommandParser.KW_CROSS, 0); }
		public TerminalNode KW_UNBOUNDED() { return getToken(CommandParser.KW_UNBOUNDED, 0); }
		public TerminalNode KW_PRECEDING() { return getToken(CommandParser.KW_PRECEDING, 0); }
		public TerminalNode KW_FOLLOWING() { return getToken(CommandParser.KW_FOLLOWING, 0); }
		public TerminalNode KW_CURRENT() { return getToken(CommandParser.KW_CURRENT, 0); }
		public TerminalNode KW_PARTIALSCAN() { return getToken(CommandParser.KW_PARTIALSCAN, 0); }
		public TerminalNode KW_OVER() { return getToken(CommandParser.KW_OVER, 0); }
		public TerminalNode KW_WHERE() { return getToken(CommandParser.KW_WHERE, 0); }
		public ReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).enterReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CommandParserListener ) ((CommandParserListener)listener).exitReserved(this);
		}
	}

	public final ReservedContext reserved() throws RecognitionException {
		ReservedContext _localctx = new ReservedContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_reserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AND) | (1L << KW_OR) | (1L << KW_NOT) | (1L << KW_LIKE) | (1L << KW_IF) | (1L << KW_HAVING) | (1L << KW_WHERE) | (1L << KW_FROM) | (1L << KW_SELECT) | (1L << KW_DISTINCT) | (1L << KW_UNIQUEJOIN) | (1L << KW_PRESERVE) | (1L << KW_JOIN) | (1L << KW_ON))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (KW_COLUMN - 85)) | (1L << (KW_CHAR - 85)) | (1L << (KW_VARCHAR - 85)) | (1L << (KW_TABLESAMPLE - 85)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (KW_CAST - 151)) | (1L << (KW_MACRO - 151)) | (1L << (KW_EXTENDED - 151)) | (1L << (KW_CASE - 151)) | (1L << (KW_WHEN - 151)) | (1L << (KW_THEN - 151)) | (1L << (KW_ELSE - 151)) | (1L << (KW_END - 151)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (KW_CROSS - 228)) | (1L << (KW_UNBOUNDED - 228)) | (1L << (KW_PRECEDING - 228)) | (1L << (KW_FOLLOWING - 228)) | (1L << (KW_CURRENT - 228)) | (1L << (KW_OVER - 228)) | (1L << (KW_PARTIALSCAN - 228)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 61:
			return mathExpression_sempred((MathExpressionContext)_localctx, predIndex);
		case 62:
			return unarySuffixExpression_sempred((UnarySuffixExpressionContext)_localctx, predIndex);
		case 64:
			return fieldExpression_sempred((FieldExpressionContext)_localctx, predIndex);
		case 65:
			return logicalExpression_sempred((LogicalExpressionContext)_localctx, predIndex);
		case 67:
			return equalExpression_sempred((EqualExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean mathExpression_sempred(MathExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 7);
		case 1:
			return precpred(_ctx, 6);
		case 2:
			return precpred(_ctx, 5);
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean unarySuffixExpression_sempred(UnarySuffixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean fieldExpression_sempred(FieldExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean logicalExpression_sempred(LogicalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 3);
		case 9:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean equalExpression_sempred(EqualExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 4);
		case 11:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01ce\u0eb8\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\3\2\5\2\u026e\n\2\3\2\3\2\3\2\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\5\3\u0279\n\3\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\7\6\u0283"+
		"\n\6\f\6\16\6\u0286\13\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\5\7\u0294\n\7\5\7\u0296\n\7\3\7\3\7\3\7\3\7\5\7\u029c\n\7\3\7\3\7\3"+
		"\7\5\7\u02a1\n\7\3\b\5\b\u02a4\n\b\3\b\3\b\3\b\3\b\3\b\7\b\u02ab\n\b\f"+
		"\b\16\b\u02ae\13\b\3\b\3\b\5\b\u02b2\n\b\3\t\3\t\5\t\u02b6\n\t\3\n\3\n"+
		"\3\n\3\n\7\n\u02bc\n\n\f\n\16\n\u02bf\13\n\5\n\u02c1\n\n\3\n\3\n\3\13"+
		"\3\13\3\13\3\13\5\13\u02c9\n\13\3\13\3\13\5\13\u02cd\n\13\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\5\f\u02d5\n\f\5\f\u02d7\n\f\3\f\3\f\3\f\3\f\5\f\u02dd\n\f"+
		"\3\r\3\r\3\r\5\r\u02e2\n\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\7\16\u02eb\n"+
		"\16\f\16\16\16\u02ee\13\16\3\17\3\17\3\17\7\17\u02f3\n\17\f\17\16\17\u02f6"+
		"\13\17\3\20\3\20\3\20\3\20\5\20\u02fc\n\20\3\21\3\21\3\21\3\22\3\22\5"+
		"\22\u0303\n\22\3\22\5\22\u0306\n\22\3\22\5\22\u0309\n\22\3\22\3\22\5\22"+
		"\u030d\n\22\3\22\5\22\u0310\n\22\3\22\3\22\5\22\u0314\n\22\3\22\5\22\u0317"+
		"\n\22\3\23\5\23\u031a\n\23\3\23\5\23\u031d\n\23\3\23\5\23\u0320\n\23\3"+
		"\23\5\23\u0323\n\23\3\23\5\23\u0326\n\23\3\23\5\23\u0329\n\23\3\24\3\24"+
		"\5\24\u032d\n\24\3\24\5\24\u0330\n\24\3\24\3\24\3\25\3\25\5\25\u0336\n"+
		"\25\3\25\5\25\u0339\n\25\3\25\3\25\3\25\5\25\u033e\n\25\3\25\3\25\3\25"+
		"\3\25\5\25\u0344\n\25\3\26\3\26\5\26\u0348\n\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\5\26\u0350\n\26\3\27\3\27\5\27\u0354\n\27\3\30\3\30\3\30\3\31"+
		"\3\31\3\31\3\32\3\32\3\32\3\32\3\32\5\32\u0361\n\32\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\5\33\u0369\n\33\3\33\7\33\u036c\n\33\f\33\16\33\u036f\13\33"+
		"\3\34\5\34\u0372\n\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36"+
		"\5\36\u037e\n\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0386\n\37\3\37\7"+
		"\37\u0389\n\37\f\37\16\37\u038c\13\37\3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3\""+
		"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u039e\n\"\5\"\u03a0\n\"\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\5#\u03ac\n#\3$\3$\5$\u03b0\n$\3%\3%\5%\u03b4\n%\3&\3&\3"+
		"\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u03c8"+
		"\n\'\3(\3(\3)\3)\3)\5)\u03cf\n)\3)\3)\3*\3*\3*\3*\3+\3+\3+\3+\3+\7+\u03dc"+
		"\n+\f+\16+\u03df\13+\5+\u03e1\n+\3+\3+\3+\3+\3+\5+\u03e8\n+\3+\3+\3+\3"+
		"+\5+\u03ee\n+\3+\3+\3+\3+\3+\7+\u03f5\n+\f+\16+\u03f8\13+\5+\u03fa\n+"+
		"\3+\5+\u03fd\n+\3+\3+\5+\u0401\n+\3,\3,\5,\u0405\n,\3,\5,\u0408\n,\3-"+
		"\3-\3.\3.\3.\3.\5.\u0410\n.\3.\3.\3.\6.\u0415\n.\r.\16.\u0416\3.\3.\5"+
		".\u041b\n.\3.\3.\3.\3.\3.\6.\u0422\n.\r.\16.\u0423\3.\3.\7.\u0428\n.\f"+
		".\16.\u042b\13.\5.\u042d\n.\3/\3/\3/\3\60\3\60\3\61\3\61\3\61\7\61\u0437"+
		"\n\61\f\61\16\61\u043a\13\61\3\61\3\61\3\61\3\61\3\61\5\61\u0441\n\61"+
		"\3\62\3\62\3\62\7\62\u0446\n\62\f\62\16\62\u0449\13\62\3\63\3\63\3\63"+
		"\7\63\u044e\n\63\f\63\16\63\u0451\13\63\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\5\64\u04bc\n\64\3\65\3\65\3\66\3\66\3\66\3\66\5\66\u04c4\n\66\3"+
		"\67\3\67\5\67\u04c8\n\67\38\38\38\58\u04cd\n8\39\79\u04d0\n9\f9\169\u04d3"+
		"\139\3:\3:\3:\3;\3;\3;\3;\3;\5;\u04dd\n;\3;\3;\3;\5;\u04e2\n;\3;\3;\3"+
		"<\3<\5<\u04e8\n<\3<\3<\3=\5=\u04ed\n=\3=\3=\3=\5=\u04f2\n=\3>\5>\u04f5"+
		"\n>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0507\n?\3?\3?"+
		"\3?\3?\5?\u050d\n?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\7?\u0519\n?\f?\16?\u051c"+
		"\13?\3@\3@\3@\3@\3@\7@\u0523\n@\f@\16@\u0526\13@\3A\3A\3A\5A\u052b\nA"+
		"\3A\3A\5A\u052f\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u053b\nB\7B\u053d"+
		"\nB\fB\16B\u0540\13B\3C\3C\3C\3C\3C\3C\3C\3C\3C\7C\u054b\nC\fC\16C\u054e"+
		"\13C\3D\3D\3D\5D\u0553\nD\3E\3E\3E\5E\u0558\nE\3E\3E\5E\u055c\nE\3E\3"+
		"E\3E\5E\u0561\nE\3E\3E\3E\3E\5E\u0567\nE\3E\3E\3E\3E\3E\3E\3E\5E\u0570"+
		"\nE\3E\3E\3E\3E\5E\u0576\nE\7E\u0578\nE\fE\16E\u057b\13E\3F\3F\3F\3F\3"+
		"G\3G\3G\7G\u0584\nG\fG\16G\u0587\13G\3H\3H\3I\3I\3J\3J\3J\3J\3J\3J\3J"+
		"\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J"+
		"\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u05bc\nJ\3K\3K"+
		"\5K\u05c0\nK\3K\3K\3L\3L\5L\u05c6\nL\3L\3L\3L\3L\5L\u05cc\nL\3M\3M\5M"+
		"\u05d0\nM\3M\3M\3M\5M\u05d5\nM\3N\3N\5N\u05d9\nN\3N\3N\3N\5N\u05de\nN"+
		"\3O\3O\5O\u05e2\nO\3O\3O\3O\3P\3P\5P\u05e9\nP\3P\3P\3P\3Q\3Q\3Q\3Q\3R"+
		"\3R\3R\3R\3S\3S\3S\3S\3S\3S\3S\5S\u05fd\nS\3T\3T\5T\u0601\nT\3T\3T\3T"+
		"\3U\3U\5U\u0608\nU\3U\3U\3V\3V\3V\3W\3W\3W\3W\3X\3X\3X\3X\3Y\3Y\3Y\3Z"+
		"\3Z\3Z\3Z\5Z\u061e\nZ\3Z\5Z\u0621\nZ\3[\3[\3[\3[\3[\3[\5[\u0629\n[\3["+
		"\3[\3[\5[\u062e\n[\5[\u0630\n[\3[\5[\u0633\n[\3\\\3\\\3\\\3\\\5\\\u0639"+
		"\n\\\3]\3]\3]\3]\5]\u063f\n]\3^\3^\3^\3^\3_\3_\3_\3_\3`\3`\3`\3`\3`\3"+
		"`\3`\3`\3`\3`\7`\u0653\n`\f`\16`\u0656\13`\5`\u0658\n`\3`\5`\u065b\n`"+
		"\3a\3a\3a\3a\3a\3a\3b\3b\3b\3b\5b\u0667\nb\3b\3b\3b\3b\3b\3b\3b\3b\7b"+
		"\u0671\nb\fb\16b\u0674\13b\5b\u0676\nb\3b\3b\3b\5b\u067b\nb\3b\3b\5b\u067f"+
		"\nb\3c\3c\3c\3c\5c\u0685\nc\3c\3c\3c\3c\3c\3d\3d\3d\3d\3d\5d\u0691\nd"+
		"\3d\3d\5d\u0695\nd\3e\3e\3e\3e\5e\u069b\ne\3e\3e\5e\u069f\ne\3f\3f\3f"+
		"\3f\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u06af\ng\3g\3g\3g\3g\3g\3g\3g\5g"+
		"\u06b8\ng\3g\5g\u06bb\ng\3h\3h\3h\3h\3h\3h\3h\3h\3h\5h\u06c6\nh\3h\3h"+
		"\3h\5h\u06cb\nh\3i\3i\3i\5i\u06d0\ni\3i\3i\3i\3i\3i\3i\5i\u06d8\ni\3i"+
		"\3i\3i\3i\3i\5i\u06df\ni\3i\5i\u06e2\ni\3j\3j\3j\3j\3j\7j\u06e9\nj\fj"+
		"\16j\u06ec\13j\3j\3j\3j\3k\3k\3k\3k\3k\7k\u06f6\nk\fk\16k\u06f9\13k\3"+
		"k\3k\3k\3l\3l\5l\u0700\nl\3l\3l\3l\5l\u0705\nl\3l\5l\u0708\nl\3m\3m\5"+
		"m\u070c\nm\3m\3m\3m\3n\3n\3n\3n\3n\3n\3n\3n\3o\3o\3o\3o\3o\3o\3o\3o\3"+
		"p\3p\5p\u0723\np\3p\5p\u0726\np\3p\3p\3p\7p\u072b\np\fp\16p\u072e\13p"+
		"\3p\3p\3p\5p\u0733\np\3q\3q\5q\u0737\nq\3q\5q\u073a\nq\3q\5q\u073d\nq"+
		"\3q\3q\3q\7q\u0742\nq\fq\16q\u0745\13q\3q\3q\3q\3r\3r\3r\3r\7r\u074e\n"+
		"r\fr\16r\u0751\13r\3r\3r\3r\3r\3r\5r\u0758\nr\3r\5r\u075b\nr\3s\3s\3s"+
		"\3s\3s\7s\u0762\ns\fs\16s\u0765\13s\3s\3s\3t\3t\5t\u076b\nt\3t\3t\3t\7"+
		"t\u0770\nt\ft\16t\u0773\13t\3t\3t\3t\3t\3t\5t\u077a\nt\3u\3u\3u\3u\3u"+
		"\3v\3v\3v\5v\u0784\nv\3v\5v\u0787\nv\3v\3v\3v\3v\3v\5v\u078e\nv\3v\5v"+
		"\u0791\nv\3w\3w\3w\3w\3w\3x\3x\3x\3y\3y\3y\5y\u079e\ny\3y\5y\u07a1\ny"+
		"\3y\5y\u07a4\ny\3y\3y\3z\3z\3z\5z\u07ab\nz\3z\3z\5z\u07af\nz\3z\3z\3z"+
		"\5z\u07b4\nz\7z\u07b6\nz\fz\16z\u07b9\13z\3z\3z\3z\3z\5z\u07bf\nz\5z\u07c1"+
		"\nz\3z\3z\3z\5z\u07c6\nz\7z\u07c8\nz\fz\16z\u07cb\13z\5z\u07cd\nz\3z\3"+
		"z\3z\3z\3z\3z\6z\u07d5\nz\rz\16z\u07d6\5z\u07d9\nz\3{\3{\5{\u07dd\n{\3"+
		"{\3{\3|\3|\3}\5}\u07e4\n}\3}\3}\5}\u07e8\n}\3}\3}\5}\u07ec\n}\7}\u07ee"+
		"\n}\f}\16}\u07f1\13}\3}\5}\u07f4\n}\3}\5}\u07f7\n}\3~\3~\3~\5~\u07fc\n"+
		"~\3\177\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\5\u0081\u0805\n"+
		"\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\7\u0082\u080c\n\u0082\f"+
		"\u0082\16\u0082\u080f\13\u0082\3\u0083\5\u0083\u0812\n\u0083\3\u0083\3"+
		"\u0083\5\u0083\u0816\n\u0083\3\u0083\5\u0083\u0819\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u081e\n\u0083\3\u0083\5\u0083\u0821\n\u0083\3\u0083\3"+
		"\u0083\3\u0083\5\u0083\u0826\n\u0083\3\u0083\3\u0083\5\u0083\u082a\n\u0083"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0832\n\u0084"+
		"\3\u0084\3\u0084\5\u0084\u0836\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u083d\n\u0084\5\u0084\u083f\n\u0084\3\u0085\3\u0085\3"+
		"\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0848\n\u0086\3\u0087\3"+
		"\u0087\5\u0087\u084c\n\u0087\3\u0088\5\u0088\u084f\n\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\5\u0088\u0856\n\u0088\3\u0088\5\u0088\u0859\n"+
		"\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u085e\n\u0088\3\u0089\3\u0089\5"+
		"\u0089\u0862\n\u0089\3\u0089\3\u0089\6\u0089\u0866\n\u0089\r\u0089\16"+
		"\u0089\u0867\3\u0089\7\u0089\u086b\n\u0089\f\u0089\16\u0089\u086e\13\u0089"+
		"\5\u0089\u0870\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\7\u008f\u0887\n\u008f"+
		"\f\u008f\16\u008f\u088a\13\u008f\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\5\u0091\u0893\n\u0091\3\u0092\3\u0092\3\u0092\3\u0093"+
		"\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u089e\n\u0094\3\u0094"+
		"\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u08a7\n\u0095"+
		"\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0099"+
		"\3\u0099\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\5\u009c\u08bc\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e"+
		"\3\u009e\3\u009e\5\u009e\u08c5\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u08cb\n\u009f\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u08d0\n\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\5\u00a2\u08dd\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u08e8\n\u00a4\3\u00a4"+
		"\3\u00a4\5\u00a4\u08ec\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5"+
		"\u08f2\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u08f8\n\u00a6\3"+
		"\u00a6\3\u00a6\5\u00a6\u08fc\n\u00a6\3\u00a6\5\u00a6\u08ff\n\u00a6\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0907\n\u00a7\5\u00a7"+
		"\u0909\n\u00a7\3\u00a7\3\u00a7\5\u00a7\u090d\n\u00a7\3\u00a8\3\u00a8\5"+
		"\u00a8\u0911\n\u00a8\3\u00a9\3\u00a9\5\u00a9\u0915\n\u00a9\3\u00aa\3\u00aa"+
		"\3\u00aa\5\u00aa\u091a\n\u00aa\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u091f\n"+
		"\u00ab\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0924\n\u00ac\3\u00ad\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u092d\n\u00ad\3\u00ae\3"+
		"\u00ae\3\u00ae\3\u00ae\5\u00ae\u0933\n\u00ae\3\u00ae\5\u00ae\u0936\n\u00ae"+
		"\3\u00ae\5\u00ae\u0939\n\u00ae\3\u00ae\5\u00ae\u093c\n\u00ae\3\u00ae\5"+
		"\u00ae\u093f\n\u00ae\3\u00af\3\u00af\5\u00af\u0943\n\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u094c\n\u00b1\f\u00b1"+
		"\16\u00b1\u094f\13\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3"+
		"\3\u00b3\7\u00b3\u0958\n\u00b3\f\u00b3\16\u00b3\u095b\13\u00b3\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0964\n\u00b4"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u097f"+
		"\n\u00b9\f\u00b9\16\u00b9\u0982\13\u00b9\3\u00ba\3\u00ba\3\u00ba\7\u00ba"+
		"\u0987\n\u00ba\f\u00ba\16\u00ba\u098a\13\u00ba\3\u00bb\3\u00bb\3\u00bb"+
		"\7\u00bb\u098f\n\u00bb\f\u00bb\16\u00bb\u0992\13\u00bb\3\u00bc\3\u00bc"+
		"\3\u00bc\5\u00bc\u0997\n\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u099c\n"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u09a1\n\u00bd\5\u00bd\u09a3\n\u00bd"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u09a9\n\u00be\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u09b0\n\u00bf\3\u00c0\3\u00c0\3\u00c1"+
		"\3\u00c1\3\u00c1\7\u00c1\u09b7\n\u00c1\f\u00c1\16\u00c1\u09ba\13\u00c1"+
		"\3\u00c2\3\u00c2\5\u00c2\u09be\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\5\u00c3\u09c5\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u09d8\n\u00c4\3\u00c4\5\u00c4\u09db\n"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\5\u00c4\u09e5\n\u00c4\3\u00c5\3\u00c5\5\u00c5\u09e9\n\u00c5\3\u00c6\3"+
		"\u00c6\5\u00c6\u09ed\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0a09\n\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\5\u00cb\u0a0f\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u0a15\n\u00cb\5\u00cb\u0a17\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\7"+
		"\u00cc\u0a1d\n\u00cc\f\u00cc\16\u00cc\u0a20\13\u00cc\3\u00cd\3\u00cd\5"+
		"\u00cd\u0a24\n\u00cd\3\u00cd\3\u00cd\5\u00cd\u0a28\n\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u0a2d\n\u00cd\3\u00cd\5\u00cd\u0a30\n\u00cd\3\u00ce\3"+
		"\u00ce\3\u00ce\7\u00ce\u0a35\n\u00ce\f\u00ce\16\u00ce\u0a38\13\u00ce\3"+
		"\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0a3e\n\u00cf\3\u00cf\3\u00cf\3"+
		"\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u0a47\n\u00cf\f\u00cf\16"+
		"\u00cf\u0a4a\13\u00cf\5\u00cf\u0a4c\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3"+
		"\u00cf\5\u00cf\u0a52\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0a58"+
		"\n\u00cf\5\u00cf\u0a5a\n\u00cf\5\u00cf\u0a5c\n\u00cf\3\u00cf\5\u00cf\u0a5f"+
		"\n\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1"+
		"\3\u00d1\3\u00d1\7\u00d1\u0a6b\n\u00d1\f\u00d1\16\u00d1\u0a6e\13\u00d1"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\5\u00d2\u0a79\n\u00d2\5\u00d2\u0a7b\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0a87\n"+
		"\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0a8e\n\u00d5\3"+
		"\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0a94\n\u00d6\3\u00d7\3\u00d7\3"+
		"\u00d7\7\u00d7\u0a99\n\u00d7\f\u00d7\16\u00d7\u0a9c\13\u00d7\3\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0aa4\n\u00d8\f\u00d8\16"+
		"\u00d8\u0aa7\13\u00d8\3\u00d8\3\u00d8\7\u00d8\u0aab\n\u00d8\f\u00d8\16"+
		"\u00d8\u0aae\13\u00d8\5\u00d8\u0ab0\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3"+
		"\u00d9\7\u00d9\u0ab6\n\u00d9\f\u00d9\16\u00d9\u0ab9\13\u00d9\3\u00d9\3"+
		"\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da\u0ac1\n\u00da\f\u00da\16"+
		"\u00da\u0ac4\13\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\5\u00db"+
		"\u0acb\n\u00db\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u0ad0\n\u00dc\f\u00dc\16"+
		"\u00dc\u0ad3\13\u00dc\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u0ada\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de"+
		"\u0ae2\n\u00de\f\u00de\16\u00de\u0ae5\13\u00de\3\u00de\3\u00de\5\u00de"+
		"\u0ae9\n\u00de\5\u00de\u0aeb\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\5"+
		"\u00df\u0af1\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\7\u00df\u0afb\n\u00df\f\u00df\16\u00df\u0afe\13\u00df\5"+
		"\u00df\u0b00\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0b06\n\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0b0c\n\u00df\5\u00df\u0b0e\n"+
		"\u00df\5\u00df\u0b10\n\u00df\3\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0\5"+
		"\u00e0\u0b17\n\u00e0\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u0b1c\n\u00e1\f\u00e1"+
		"\16\u00e1\u0b1f\13\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\7\u00e2\u0b25"+
		"\n\u00e2\f\u00e2\16\u00e2\u0b28\13\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0b31\n\u00e4\3\u00e4\5\u00e4\u0b34\n"+
		"\u00e4\3\u00e4\5\u00e4\u0b37\n\u00e4\3\u00e4\5\u00e4\u0b3a\n\u00e4\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u0b3f\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u0b47\n\u00e5\5\u00e5\u0b49\n\u00e5\3\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\5\u00e6\u0b55\n\u00e6\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0b5a\n\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0b61\n\u00e7\5\u00e7\u0b63"+
		"\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0b6a\n\u00e8"+
		"\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u0b6f\n\u00e9\f\u00e9\16\u00e9\u0b72"+
		"\13\u00e9\3\u00ea\3\u00ea\3\u00ea\7\u00ea\u0b77\n\u00ea\f\u00ea\16\u00ea"+
		"\u0b7a\13\u00ea\3\u00eb\3\u00eb\5\u00eb\u0b7e\n\u00eb\3\u00eb\3\u00eb"+
		"\3\u00ec\3\u00ec\7\u00ec\u0b84\n\u00ec\f\u00ec\16\u00ec\u0b87\13\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\6\u00ec\u0b8d\n\u00ec\r\u00ec\16\u00ec"+
		"\u0b8e\5\u00ec\u0b91\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\7\u00ed\u0b9a\n\u00ed\f\u00ed\16\u00ed\u0b9d\13\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0ba3\n\u00ed\f\u00ed\16\u00ed"+
		"\u0ba6\13\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed"+
		"\u0bae\n\u00ed\3\u00ed\5\u00ed\u0bb1\n\u00ed\3\u00ed\5\u00ed\u0bb4\n\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0bbc\n\u00ed"+
		"\f\u00ed\16\u00ed\u0bbf\13\u00ed\3\u00ed\3\u00ed\5\u00ed\u0bc3\n\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0bcb\n\u00ed"+
		"\3\u00ed\5\u00ed\u0bce\n\u00ed\5\u00ed\u0bd0\n\u00ed\5\u00ed\u0bd2\n\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0bdb"+
		"\n\u00ed\5\u00ed\u0bdd\n\u00ed\3\u00ee\5\u00ee\u0be0\n\u00ee\3\u00ee\3"+
		"\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u0be9\n\u00ef\f"+
		"\u00ef\16\u00ef\u0bec\13\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0bfa"+
		"\n\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0bff\n\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\5\u00f1\u0c04\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\5\u00f1\u0c0d\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u0c18\n\u00f2\f\u00f2"+
		"\16\u00f2\u0c1b\13\u00f2\5\u00f2\u0c1d\n\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u0c27\n\u00f2\f\u00f2"+
		"\16\u00f2\u0c2a\13\u00f2\5\u00f2\u0c2c\n\u00f2\3\u00f3\3\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\7\u00f4\u0c3b\n\u00f4\f\u00f4\16\u00f4\u0c3e\13\u00f4\5\u00f4"+
		"\u0c40\n\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u0c49\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5"+
		"\u0c50\n\u00f5\3\u00f6\3\u00f6\5\u00f6\u0c54\n\u00f6\3\u00f7\3\u00f7\5"+
		"\u00f7\u0c58\n\u00f7\3\u00f7\5\u00f7\u0c5b\n\u00f7\3\u00f7\5\u00f7\u0c5e"+
		"\n\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0c63\n\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\7\u00f7\u0c69\n\u00f7\f\u00f7\16\u00f7\u0c6c\13\u00f7"+
		"\3\u00f7\3\u00f7\5\u00f7\u0c70\n\u00f7\5\u00f7\u0c72\n\u00f7\3\u00f8\3"+
		"\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0c7b\n\u00f9\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\5\u00fa\u0c88\n\u00fa\3\u00fb\3\u00fb\5\u00fb\u0c8c\n"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u0c91\n\u00fb\3\u00fb\3\u00fb\5"+
		"\u00fb\u0c95\n\u00fb\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0c9a\n\u00fc\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u0ca1\n\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\7\u00fd"+
		"\u0cad\n\u00fd\f\u00fd\16\u00fd\u0cb0\13\u00fd\5\u00fd\u0cb2\n\u00fd\3"+
		"\u00fd\3\u00fd\5\u00fd\u0cb6\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\7\u00ff\u0cbf\n\u00ff\f\u00ff\16\u00ff\u0cc2\13"+
		"\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\7\u0100\u0cc9\n\u0100\f"+
		"\u0100\16\u0100\u0ccc\13\u0100\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0cd9\n\u0102"+
		"\3\u0103\5\u0103\u0cdc\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\7\u0103\u0ce3\n\u0103\f\u0103\16\u0103\u0ce6\13\u0103\3\u0103\3\u0103"+
		"\3\u0104\3\u0104\5\u0104\u0cec\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\7\u0104\u0cf2\n\u0104\f\u0104\16\u0104\u0cf5\13\u0104\3\u0104\3\u0104"+
		"\3\u0105\3\u0105\5\u0105\u0cfb\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\7\u0106\u0d03\n\u0106\f\u0106\16\u0106\u0d06\13\u0106"+
		"\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\5\u0107\u0d0d\n\u0107\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108\u0d14\n\u0108\f\u0108\16\u0108"+
		"\u0d17\13\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u0d1e"+
		"\n\u0108\3\u0109\3\u0109\5\u0109\u0d22\n\u0109\3\u010a\3\u010a\5\u010a"+
		"\u0d26\n\u010a\3\u010a\3\u010a\7\u010a\u0d2a\n\u010a\f\u010a\16\u010a"+
		"\u0d2d\13\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c"+
		"\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f"+
		"\7\u010f\u0d3f\n\u010f\f\u010f\16\u010f\u0d42\13\u010f\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\7\u0111\u0d4b\n\u0111\f\u0111"+
		"\16\u0111\u0d4e\13\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\7\u0112"+
		"\u0d55\n\u0112\f\u0112\16\u0112\u0d58\13\u0112\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0114\3\u0114\3\u0114\7\u0114\u0d61\n\u0114\f\u0114\16\u0114"+
		"\u0d64\13\u0114\3\u0115\3\u0115\5\u0115\u0d68\n\u0115\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\5\u0116\u0d6e\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\5\u0117\u0d74\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u0d7a\n"+
		"\u0118\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u0d80\n\u0119\3\u011a\3"+
		"\u011a\3\u011a\3\u011a\5\u011a\u0d86\n\u011a\3\u011b\3\u011b\3\u011b\3"+
		"\u011b\5\u011b\u0d8c\n\u011b\3\u011b\3\u011b\3\u011b\7\u011b\u0d91\n\u011b"+
		"\f\u011b\16\u011b\u0d94\13\u011b\5\u011b\u0d96\n\u011b\5\u011b\u0d98\n"+
		"\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b"+
		"\u0da1\n\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u0da8\n"+
		"\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u0daf\n\u011b\3"+
		"\u011b\3\u011b\5\u011b\u0db3\n\u011b\5\u011b\u0db5\n\u011b\3\u011b\5\u011b"+
		"\u0db8\n\u011b\3\u011c\3\u011c\3\u011c\5\u011c\u0dbd\n\u011c\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u0dcd\n\u011d\3\u011d\3\u011d"+
		"\5\u011d\u0dd1\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\5\u011e\u0dda\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\6\u0120\u0dea\n\u0120\r\u0120\16\u0120\u0deb\3\u0120\3\u0120\5\u0120"+
		"\u0df0\n\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\6\u0121\u0dfa\n\u0121\r\u0121\16\u0121\u0dfb\3\u0121\3\u0121"+
		"\5\u0121\u0e00\n\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122"+
		"\u0e10\n\u0122\3\u0123\3\u0123\3\u0124\6\u0124\u0e15\n\u0124\r\u0124\16"+
		"\u0124\u0e16\3\u0125\3\u0125\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\5"+
		"\u0127\u0e20\n\u0127\3\u0128\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\3"+
		"\u0129\5\u0129\u0e29\n\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\5\u012a\u0e33\n\u012a\3\u012b\3\u012b\5\u012b\u0e37"+
		"\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u0e3c\n\u012b\3\u012b\3\u012b"+
		"\5\u012b\u0e40\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u0e45\n\u012b\3"+
		"\u012b\3\u012b\5\u012b\u0e49\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u0e4e"+
		"\n\u012b\3\u012b\3\u012b\5\u012b\u0e52\n\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u0e57\n\u012b\3\u012b\3\u012b\5\u012b\u0e5b\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\5\u012b\u0e60\n\u012b\3\u012b\3\u012b\5\u012b\u0e64\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\5\u012b\u0e69\n\u012b\3\u012b\3\u012b\5\u012b"+
		"\u0e6d\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u0e72\n\u012b\3\u012b\3"+
		"\u012b\5\u012b\u0e76\n\u012b\5\u012b\u0e78\n\u012b\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u0e86\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012e\3\u012e"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\7\u012f\u0e93\n\u012f\f\u012f"+
		"\16\u012f\u0e96\13\u012f\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\5\u0130\u0e9e\n\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u0eae\n\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3\u0135\3\u0135\3\u0136"+
		"\3\u0136\3\u0136\2\7|~\u0082\u0084\u0088\u0137\2\4\6\b\n\f\16\20\22\24"+
		"\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtv"+
		"xz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244"+
		"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c"+
		"\u025e\u0260\u0262\u0264\u0266\u0268\u026a\2\26\6\2mm\u0110\u0111\u011c"+
		"\u011c\u0127\u0127\3\2\u019c\u019c\4\2\37\37\\\\\4\2]]\u00c5\u00c5\4\2"+
		"\u00d1\u00d1\u0142\u0142\5\2\u0199\u0199\u01ac\u01ac\u01cd\u01cd\7\2\u0199"+
		"\u0199\u01ac\u01ad\u01b6\u01b7\u01c3\u01c3\u01cc\u01cc\6\2\u0199\u019a"+
		"\u01aa\u01aa\u01ac\u01ac\u01cb\u01cb\3\2\3\4\4\2\'\'\u00cb\u00cb\4\2\u00c7"+
		"\u00c7\u017c\u017c\5\2##}}\u00e0\u00e0\4\2\u0118\u0118\u011b\u011b\3\2"+
		"\u01bc\u01bd\3\2\24\25\3\2\u0199\u019a\65\2\36\37!!,,\66\668ACCEGIKMP"+
		"VVXX[[^`bbddkkoosy{{~\u0093\u0095\u0095\u009a\u009e\u00a1\u00a3\u00a5"+
		"\u00a9\u00ab\u00ae\u00b1\u00b6\u00bc\u00bd\u00bf\u00c4\u00c6\u00c7\u00ca"+
		"\u00ca\u00cd\u00d0\u00d3\u00d9\u00db\u00dd\u00df\u00df\u00e1\u00e2\u00e7"+
		"\u00e7\u00ea\u00ed\u00ef\u00f3\u00fb\u00fe\u0100\u0103\u0105\u0106\u0114"+
		"\u0114\u0116\u0116\u0119\u011a\u011d\u0125\u0129\u0135\u0137\u013a\u013d"+
		"\u013d\u0184\u0189\u018b\u018f\u0194\u0198\7\2ccejll\u00e5\u00e5\u010e"+
		"\u010f\64\2\24\27\33\33\35\35  \"\"$$((++--\61\63\65\65\67\67BBDDHHLL"+
		"QU\\]aaccejllnnrrzz|}\u0096\u0098\u00aa\u00aa\u00b0\u00b0\u00c5\u00c5"+
		"\u00c8\u00c9\u00cb\u00cb\u00d1\u00d2\u00da\u00da\u00de\u00de\u00e0\u00e0"+
		"\u00e3\u00e5\u00e8\u00e9\u00ee\u00ee\u00ff\u00ff\u0104\u0104\u0107\u0108"+
		"\u010e\u010f\u0113\u0113\u0115\u0115\u0118\u0118\u011b\u011b\u0126\u0126"+
		"\u0128\u0128\u0182\u0182\22\2\30\34%\')*.\60\64\64WWpq\u0094\u0094\u0099"+
		"\u0099\u00a0\u00a0\u00a4\u00a4\u00b7\u00bb\u00e6\u00e6\u0109\u010c\u0112"+
		"\u0112\u0117\u0117\2\u1070\2\u026d\3\2\2\2\4\u0278\3\2\2\2\6\u027a\3\2"+
		"\2\2\b\u027c\3\2\2\2\n\u0280\3\2\2\2\f\u0289\3\2\2\2\16\u02a3\3\2\2\2"+
		"\20\u02b3\3\2\2\2\22\u02b7\3\2\2\2\24\u02c4\3\2\2\2\26\u02dc\3\2\2\2\30"+
		"\u02de\3\2\2\2\32\u02e7\3\2\2\2\34\u02ef\3\2\2\2\36\u02f7\3\2\2\2 \u02fd"+
		"\3\2\2\2\"\u0316\3\2\2\2$\u0319\3\2\2\2&\u032c\3\2\2\2(\u0343\3\2\2\2"+
		"*\u034f\3\2\2\2,\u0353\3\2\2\2.\u0355\3\2\2\2\60\u0358\3\2\2\2\62\u0360"+
		"\3\2\2\2\64\u0368\3\2\2\2\66\u0371\3\2\2\28\u0375\3\2\2\2:\u037d\3\2\2"+
		"\2<\u0385\3\2\2\2>\u038d\3\2\2\2@\u0390\3\2\2\2B\u039f\3\2\2\2D\u03ab"+
		"\3\2\2\2F\u03ad\3\2\2\2H\u03b1\3\2\2\2J\u03b5\3\2\2\2L\u03c7\3\2\2\2N"+
		"\u03c9\3\2\2\2P\u03cb\3\2\2\2R\u03d2\3\2\2\2T\u0400\3\2\2\2V\u0404\3\2"+
		"\2\2X\u0409\3\2\2\2Z\u040b\3\2\2\2\\\u042e\3\2\2\2^\u0431\3\2\2\2`\u0438"+
		"\3\2\2\2b\u0442\3\2\2\2d\u044a\3\2\2\2f\u04bb\3\2\2\2h\u04bd\3\2\2\2j"+
		"\u04c3\3\2\2\2l\u04c7\3\2\2\2n\u04cc\3\2\2\2p\u04d1\3\2\2\2r\u04d4\3\2"+
		"\2\2t\u04d7\3\2\2\2v\u04e5\3\2\2\2x\u04ec\3\2\2\2z\u04f4\3\2\2\2|\u04fb"+
		"\3\2\2\2~\u051d\3\2\2\2\u0080\u052e\3\2\2\2\u0082\u0530\3\2\2\2\u0084"+
		"\u0541\3\2\2\2\u0086\u0552\3\2\2\2\u0088\u0557\3\2\2\2\u008a\u057c\3\2"+
		"\2\2\u008c\u0580\3\2\2\2\u008e\u0588\3\2\2\2\u0090\u058a\3\2\2\2\u0092"+
		"\u05bb\3\2\2\2\u0094\u05bd\3\2\2\2\u0096\u05c3\3\2\2\2\u0098\u05cd\3\2"+
		"\2\2\u009a\u05d6\3\2\2\2\u009c\u05df\3\2\2\2\u009e\u05e6\3\2\2\2\u00a0"+
		"\u05ed\3\2\2\2\u00a2\u05f1\3\2\2\2\u00a4\u05f5\3\2\2\2\u00a6\u05fe\3\2"+
		"\2\2\u00a8\u0605\3\2\2\2\u00aa\u060b\3\2\2\2\u00ac\u060e\3\2\2\2\u00ae"+
		"\u0612\3\2\2\2\u00b0\u0616\3\2\2\2\u00b2\u0619\3\2\2\2\u00b4\u0622\3\2"+
		"\2\2\u00b6\u0634\3\2\2\2\u00b8\u063a\3\2\2\2\u00ba\u0640\3\2\2\2\u00bc"+
		"\u0644\3\2\2\2\u00be\u0648\3\2\2\2\u00c0\u065c\3\2\2\2\u00c2\u0662\3\2"+
		"\2\2\u00c4\u0680\3\2\2\2\u00c6\u068b\3\2\2\2\u00c8\u0696\3\2\2\2\u00ca"+
		"\u06a0\3\2\2\2\u00cc\u06a4\3\2\2\2\u00ce\u06bc\3\2\2\2\u00d0\u06cc\3\2"+
		"\2\2\u00d2\u06e3\3\2\2\2\u00d4\u06f0\3\2\2\2\u00d6\u06fd\3\2\2\2\u00d8"+
		"\u0709\3\2\2\2\u00da\u0710\3\2\2\2\u00dc\u0718\3\2\2\2\u00de\u0720\3\2"+
		"\2\2\u00e0\u0734\3\2\2\2\u00e2\u0749\3\2\2\2\u00e4\u075c\3\2\2\2\u00e6"+
		"\u0768\3\2\2\2\u00e8\u077b\3\2\2\2\u00ea\u0780\3\2\2\2\u00ec\u0792\3\2"+
		"\2\2\u00ee\u0797\3\2\2\2\u00f0\u079a\3\2\2\2\u00f2\u07aa\3\2\2\2\u00f4"+
		"\u07dc\3\2\2\2\u00f6\u07e0\3\2\2\2\u00f8\u07f6\3\2\2\2\u00fa\u07fb\3\2"+
		"\2\2\u00fc\u07fd\3\2\2\2\u00fe\u07ff\3\2\2\2\u0100\u0804\3\2\2\2\u0102"+
		"\u0808\3\2\2\2\u0104\u0829\3\2\2\2\u0106\u082b\3\2\2\2\u0108\u0840\3\2"+
		"\2\2\u010a\u0842\3\2\2\2\u010c\u084b\3\2\2\2\u010e\u085d\3\2\2\2\u0110"+
		"\u086f\3\2\2\2\u0112\u0871\3\2\2\2\u0114\u0875\3\2\2\2\u0116\u0879\3\2"+
		"\2\2\u0118\u087d\3\2\2\2\u011a\u0881\3\2\2\2\u011c\u0883\3\2\2\2\u011e"+
		"\u088b\3\2\2\2\u0120\u0892\3\2\2\2\u0122\u0894\3\2\2\2\u0124\u0897\3\2"+
		"\2\2\u0126\u0899\3\2\2\2\u0128\u08a6\3\2\2\2\u012a\u08a8\3\2\2\2\u012c"+
		"\u08aa\3\2\2\2\u012e\u08ad\3\2\2\2\u0130\u08b0\3\2\2\2\u0132\u08b2\3\2"+
		"\2\2\u0134\u08b4\3\2\2\2\u0136\u08bb\3\2\2\2\u0138\u08bd\3\2\2\2\u013a"+
		"\u08c1\3\2\2\2\u013c\u08c6\3\2\2\2\u013e\u08cc\3\2\2\2\u0140\u08d3\3\2"+
		"\2\2\u0142\u08dc\3\2\2\2\u0144\u08de\3\2\2\2\u0146\u08e3\3\2\2\2\u0148"+
		"\u08ed\3\2\2\2\u014a\u08f3\3\2\2\2\u014c\u0900\3\2\2\2\u014e\u0910\3\2"+
		"\2\2\u0150\u0914\3\2\2\2\u0152\u0919\3\2\2\2\u0154\u091e\3\2\2\2\u0156"+
		"\u0923\3\2\2\2\u0158\u0925\3\2\2\2\u015a\u092e\3\2\2\2\u015c\u0942\3\2"+
		"\2\2\u015e\u0944\3\2\2\2\u0160\u0948\3\2\2\2\u0162\u0950\3\2\2\2\u0164"+
		"\u0954\3\2\2\2\u0166\u095c\3\2\2\2\u0168\u0965\3\2\2\2\u016a\u096b\3\2"+
		"\2\2\u016c\u0971\3\2\2\2\u016e\u0976\3\2\2\2\u0170\u097b\3\2\2\2\u0172"+
		"\u0983\3\2\2\2\u0174\u098b\3\2\2\2\u0176\u0993\3\2\2\2\u0178\u0998\3\2"+
		"\2\2\u017a\u09a4\3\2\2\2\u017c\u09aa\3\2\2\2\u017e\u09b1\3\2\2\2\u0180"+
		"\u09b3\3\2\2\2\u0182\u09bd\3\2\2\2\u0184\u09c4\3\2\2\2\u0186\u09e4\3\2"+
		"\2\2\u0188\u09e8\3\2\2\2\u018a\u09ec\3\2\2\2\u018c\u09ee\3\2\2\2\u018e"+
		"\u09f3\3\2\2\2\u0190\u09f8\3\2\2\2\u0192\u09ff\3\2\2\2\u0194\u0a16\3\2"+
		"\2\2\u0196\u0a18\3\2\2\2\u0198\u0a2f\3\2\2\2\u019a\u0a31\3\2\2\2\u019c"+
		"\u0a39\3\2\2\2\u019e\u0a62\3\2\2\2\u01a0\u0a67\3\2\2\2\u01a2\u0a7a\3\2"+
		"\2\2\u01a4\u0a7c\3\2\2\2\u01a6\u0a81\3\2\2\2\u01a8\u0a88\3\2\2\2\u01aa"+
		"\u0a8f\3\2\2\2\u01ac\u0a95\3\2\2\2\u01ae\u0a9d\3\2\2\2\u01b0\u0ab1\3\2"+
		"\2\2\u01b2\u0abc\3\2\2\2\u01b4\u0aca\3\2\2\2\u01b6\u0acc\3\2\2\2\u01b8"+
		"\u0ad4\3\2\2\2\u01ba\u0aea\3\2\2\2\u01bc\u0af0\3\2\2\2\u01be\u0b16\3\2"+
		"\2\2\u01c0\u0b18\3\2\2\2\u01c2\u0b20\3\2\2\2\u01c4\u0b29\3\2\2\2\u01c6"+
		"\u0b39\3\2\2\2\u01c8\u0b48\3\2\2\2\u01ca\u0b54\3\2\2\2\u01cc\u0b62\3\2"+
		"\2\2\u01ce\u0b69\3\2\2\2\u01d0\u0b6b\3\2\2\2\u01d2\u0b73\3\2\2\2\u01d4"+
		"\u0b7b\3\2\2\2\u01d6\u0b90\3\2\2\2\u01d8\u0bdc\3\2\2\2\u01da\u0bdf\3\2"+
		"\2\2\u01dc\u0be4\3\2\2\2\u01de\u0bef\3\2\2\2\u01e0\u0c0c\3\2\2\2\u01e2"+
		"\u0c2b\3\2\2\2\u01e4\u0c2d\3\2\2\2\u01e6\u0c2f\3\2\2\2\u01e8\u0c4f\3\2"+
		"\2\2\u01ea\u0c53\3\2\2\2\u01ec\u0c55\3\2\2\2\u01ee\u0c73\3\2\2\2\u01f0"+
		"\u0c7a\3\2\2\2\u01f2\u0c87\3\2\2\2\u01f4\u0c94\3\2\2\2\u01f6\u0c99\3\2"+
		"\2\2\u01f8\u0c9b\3\2\2\2\u01fa\u0cb7\3\2\2\2\u01fc\u0cba\3\2\2\2\u01fe"+
		"\u0cc5\3\2\2\2\u0200\u0ccd\3\2\2\2\u0202\u0cd8\3\2\2\2\u0204\u0cdb\3\2"+
		"\2\2\u0206\u0ceb\3\2\2\2\u0208\u0cfa\3\2\2\2\u020a\u0cfc\3\2\2\2\u020c"+
		"\u0d0c\3\2\2\2\u020e\u0d0e\3\2\2\2\u0210\u0d21\3\2\2\2\u0212\u0d23\3\2"+
		"\2\2\u0214\u0d30\3\2\2\2\u0216\u0d32\3\2\2\2\u0218\u0d35\3\2\2\2\u021a"+
		"\u0d37\3\2\2\2\u021c\u0d3b\3\2\2\2\u021e\u0d43\3\2\2\2\u0220\u0d47\3\2"+
		"\2\2\u0222\u0d4f\3\2\2\2\u0224\u0d59\3\2\2\2\u0226\u0d5d\3\2\2\2\u0228"+
		"\u0d67\3\2\2\2\u022a\u0d69\3\2\2\2\u022c\u0d6f\3\2\2\2\u022e\u0d75\3\2"+
		"\2\2\u0230\u0d7b\3\2\2\2\u0232\u0d81\3\2\2\2\u0234\u0db7\3\2\2\2\u0236"+
		"\u0dbc\3\2\2\2\u0238\u0dd0\3\2\2\2\u023a\u0dd9\3\2\2\2\u023c\u0ddb\3\2"+
		"\2\2\u023e\u0de2\3\2\2\2\u0240\u0df3\3\2\2\2\u0242\u0e0f\3\2\2\2\u0244"+
		"\u0e11\3\2\2\2\u0246\u0e14\3\2\2\2\u0248\u0e18\3\2\2\2\u024a\u0e1a\3\2"+
		"\2\2\u024c\u0e1f\3\2\2\2\u024e\u0e21\3\2\2\2\u0250\u0e28\3\2\2\2\u0252"+
		"\u0e32\3\2\2\2\u0254\u0e77\3\2\2\2\u0256\u0e85\3\2\2\2\u0258\u0e87\3\2"+
		"\2\2\u025a\u0e8b\3\2\2\2\u025c\u0e8d\3\2\2\2\u025e\u0e99\3\2\2\2\u0260"+
		"\u0e9f\3\2\2\2\u0262\u0ead\3\2\2\2\u0264\u0eaf\3\2\2\2\u0266\u0eb1\3\2"+
		"\2\2\u0268\u0eb3\3\2\2\2\u026a\u0eb5\3\2\2\2\u026c\u026e\5\4\3\2\u026d"+
		"\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\7\u019c"+
		"\2\2\u0270\u0271\7\2\2\3\u0271\3\3\2\2\2\u0272\u0279\5\u0126\u0094\2\u0273"+
		"\u0279\5\u0092J\2\u0274\u0279\5\b\5\2\u0275\u0279\5\u0142\u00a2\2\u0276"+
		"\u0279\5\u0136\u009c\2\u0277\u0279\5\6\4\2\u0278\u0272\3\2\2\2\u0278\u0273"+
		"\3\2\2\2\u0278\u0274\3\2\2\2\u0278\u0275\3\2\2\2\u0278\u0276\3\2\2\2\u0278"+
		"\u0277\3\2\2\2\u0279\5\3\2\2\2\u027a\u027b\7\u0147\2\2\u027b\7\3\2\2\2"+
		"\u027c\u027d\7\17\2\2\u027d\u027e\7\u013d\2\2\u027e\u027f\5p9\2\u027f"+
		"\t\3\2\2\2\u0280\u0284\7\u013b\2\2\u0281\u0283\5\4\3\2\u0282\u0281\3\2"+
		"\2\2\u0283\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2\u0285"+
		"\u0287\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u0288\7\u00bb\2\2\u0288\13\3"+
		"\2\2\2\u0289\u0295\5j\66\2\u028a\u028b\7\u019d\2\2\u028b\u028c\5\u0174"+
		"\u00bb\2\u028c\u028d\7\u019e\2\2\u028d\u0296\3\2\2\2\u028e\u0293\5\22"+
		"\n\2\u028f\u0290\7\u013c\2\2\u0290\u0291\5J&\2\u0291\u0292\5\26\f\2\u0292"+
		"\u0294\3\2\2\2\u0293\u028f\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0296\3\2"+
		"\2\2\u0295\u028a\3\2\2\2\u0295\u028e\3\2\2\2\u0295\u0296\3\2\2\2\u0296"+
		"\u0297\3\2\2\2\u0297\u02a0\7(\2\2\u0298\u029b\7\u019d\2\2\u0299\u029c"+
		"\5\64\33\2\u029a\u029c\5\u008eH\2\u029b\u0299\3\2\2\2\u029b\u029a\3\2"+
		"\2\2\u029c\u029d\3\2\2\2\u029d\u029e\7\u019e\2\2\u029e\u02a1\3\2\2\2\u029f"+
		"\u02a1\5\n\6\2\u02a0\u0298\3\2\2\2\u02a0\u029f\3\2\2\2\u02a1\r\3\2\2\2"+
		"\u02a2\u02a4\7(\2\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5"+
		"\3\2\2\2\u02a5\u02b1\5j\66\2\u02a6\u02a7\7\u019d\2\2\u02a7\u02ac\5j\66"+
		"\2\u02a8\u02a9\7\u019b\2\2\u02a9\u02ab\5j\66\2\u02aa\u02a8\3\2\2\2\u02ab"+
		"\u02ae\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02af\3\2"+
		"\2\2\u02ae\u02ac\3\2\2\2\u02af\u02b0\7\u019e\2\2\u02b0\u02b2\3\2\2\2\u02b1"+
		"\u02a6\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\17\3\2\2\2\u02b3\u02b5\5@!\2"+
		"\u02b4\u02b6\5\16\b\2\u02b5\u02b4\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\21"+
		"\3\2\2\2\u02b7\u02c0\7\u019d\2\2\u02b8\u02bd\5\24\13\2\u02b9\u02ba\7\u019b"+
		"\2\2\u02ba\u02bc\5\24\13\2\u02bb\u02b9\3\2\2\2\u02bc\u02bf\3\2\2\2\u02bd"+
		"\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf\u02bd\3\2"+
		"\2\2\u02c0\u02b8\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2"+
		"\u02c3\7\u019e\2\2\u02c3\23\3\2\2\2\u02c4\u02c5\5J&\2\u02c5\u02c8\5\26"+
		"\f\2\u02c6\u02c7\7\u01a3\2\2\u02c7\u02c9\5\u008eH\2\u02c8\u02c6\3\2\2"+
		"\2\u02c8\u02c9\3\2\2\2\u02c9\u02cc\3\2\2\2\u02ca\u02cb\7b\2\2\u02cb\u02cd"+
		"\5\u0246\u0124\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\25\3\2"+
		"\2\2\u02ce\u02cf\7\67\2\2\u02cf\u02d6\7\u019d\2\2\u02d0\u02d7\5 \21\2"+
		"\u02d1\u02d4\5\34\17\2\u02d2\u02d3\7\u019b\2\2\u02d3\u02d5\5 \21\2\u02d4"+
		"\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d7\3\2\2\2\u02d6\u02d0\3\2"+
		"\2\2\u02d6\u02d1\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02d9\7\u019e\2\2\u02d9"+
		"\u02dd\3\2\2\2\u02da\u02dd\5\30\r\2\u02db\u02dd\5\u0182\u00c2\2\u02dc"+
		"\u02ce\3\2\2\2\u02dc\u02da\3\2\2\2\u02dc\u02db\3\2\2\2\u02dd\27\3\2\2"+
		"\2\u02de\u02df\7\u009f\2\2\u02df\u02e1\7\u019d\2\2\u02e0\u02e2\5\32\16"+
		"\2\u02e1\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4"+
		"\7\u019e\2\2\u02e4\u02e5\7\u013c\2\2\u02e5\u02e6\5\26\f\2\u02e6\31\3\2"+
		"\2\2\u02e7\u02ec\5\26\f\2\u02e8\u02e9\7\u019b\2\2\u02e9\u02eb\5\26\f\2"+
		"\u02ea\u02e8\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed"+
		"\3\2\2\2\u02ed\33\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef\u02f4\5\36\20\2\u02f0"+
		"\u02f1\7\u019b\2\2\u02f1\u02f3\5\36\20\2\u02f2\u02f0\3\2\2\2\u02f3\u02f6"+
		"\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\35\3\2\2\2\u02f6"+
		"\u02f4\3\2\2\2\u02f7\u02f8\5j\66\2\u02f8\u02fb\5\u0182\u00c2\2\u02f9\u02fa"+
		"\7b\2\2\u02fa\u02fc\5\u0246\u0124\2\u02fb\u02f9\3\2\2\2\u02fb\u02fc\3"+
		"\2\2\2\u02fc\37\3\2\2\2\u02fd\u02fe\7\u01ad\2\2\u02fe\u02ff\5\u0182\u00c2"+
		"\2\u02ff!\3\2\2\2\u0300\u0302\5\u01fa\u00fe\2\u0301\u0303\5\u020e\u0108"+
		"\2\u0302\u0301\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0305\3\2\2\2\u0304\u0306"+
		"\5\u0216\u010c\2\u0305\u0304\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308\3"+
		"\2\2\2\u0307\u0309\5\u01c2\u00e2\2\u0308\u0307\3\2\2\2\u0308\u0309\3\2"+
		"\2\2\u0309\u0317\3\2\2\2\u030a\u030c\5\u020e\u0108\2\u030b\u030d\5\u0216"+
		"\u010c\2\u030c\u030b\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u030f\3\2\2\2\u030e"+
		"\u0310\5\u01c2\u00e2\2\u030f\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0317"+
		"\3\2\2\2\u0311\u0313\5\u0216\u010c\2\u0312\u0314\5\u01c2\u00e2\2\u0313"+
		"\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0317\5\u01c2"+
		"\u00e2\2\u0316\u0300\3\2\2\2\u0316\u030a\3\2\2\2\u0316\u0311\3\2\2\2\u0316"+
		"\u0315\3\2\2\2\u0317#\3\2\2\2\u0318\u031a\5\u0222\u0112\2\u0319\u0318"+
		"\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031c\3\2\2\2\u031b\u031d\5\u022c\u0117"+
		"\2\u031c\u031b\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031f\3\2\2\2\u031e\u0320"+
		"\5\u0230\u0119\2\u031f\u031e\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0322\3"+
		"\2\2\2\u0321\u0323\5\u0232\u011a\2\u0322\u0321\3\2\2\2\u0322\u0323\3\2"+
		"\2\2\u0323\u0325\3\2\2\2\u0324\u0326\5\u022a\u0116\2\u0325\u0324\3\2\2"+
		"\2\u0325\u0326\3\2\2\2\u0326\u0328\3\2\2\2\u0327\u0329\5B\"\2\u0328\u0327"+
		"\3\2\2\2\u0328\u0329\3\2\2\2\u0329%\3\2\2\2\u032a\u032d\5\u01d4\u00eb"+
		"\2\u032b\u032d\5\u01e2\u00f2\2\u032c\u032a\3\2\2\2\u032c\u032b\3\2\2\2"+
		"\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2\u032e\u0330\5\"\22\2\u032f\u032e"+
		"\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0332\5$\23\2\u0332"+
		"\'\3\2\2\2\u0333\u0335\5\u0198\u00cd\2\u0334\u0336\5\u01e2\u00f2\2\u0335"+
		"\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0339\5\""+
		"\22\2\u0338\u0337\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033a\3\2\2\2\u033a"+
		"\u033b\5$\23\2\u033b\u0344\3\2\2\2\u033c\u033e\5\u01e2\u00f2\2\u033d\u033c"+
		"\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340\5\"\22\2"+
		"\u0340\u0341\5\u0198\u00cd\2\u0341\u0342\5$\23\2\u0342\u0344\3\2\2\2\u0343"+
		"\u0333\3\2\2\2\u0343\u033d\3\2\2\2\u0344)\3\2\2\2\u0345\u0347\5\u0198"+
		"\u00cd\2\u0346\u0348\5\"\22\2\u0347\u0346\3\2\2\2\u0347\u0348\3\2\2\2"+
		"\u0348\u0349\3\2\2\2\u0349\u034a\5$\23\2\u034a\u0350\3\2\2\2\u034b\u034c"+
		"\5\"\22\2\u034c\u034d\5\u0198\u00cd\2\u034d\u034e\5$\23\2\u034e\u0350"+
		"\3\2\2\2\u034f\u0345\3\2\2\2\u034f\u034b\3\2\2\2\u0350+\3\2\2\2\u0351"+
		"\u0354\5.\30\2\u0352\u0354\5\60\31\2\u0353\u0351\3\2\2\2\u0353\u0352\3"+
		"\2\2\2\u0354-\3\2\2\2\u0355\u0356\5\u0198\u00cd\2\u0356\u0357\5&\24\2"+
		"\u0357/\3\2\2\2\u0358\u0359\5\u01d4\u00eb\2\u0359\u035a\5*\26\2\u035a"+
		"\61\3\2\2\2\u035b\u0361\5,\27\2\u035c\u035d\7\u019d\2\2\u035d\u035e\5"+
		"\64\33\2\u035e\u035f\7\u019e\2\2\u035f\u0361\3\2\2\2\u0360\u035b\3\2\2"+
		"\2\u0360\u035c\3\2\2\2\u0361\63\3\2\2\2\u0362\u0363\7\u019d\2\2\u0363"+
		"\u0364\5\64\33\2\u0364\u0365\7\u019e\2\2\u0365\u0366\58\35\2\u0366\u0369"+
		"\3\2\2\2\u0367\u0369\5,\27\2\u0368\u0362\3\2\2\2\u0368\u0367\3\2\2\2\u0369"+
		"\u036d\3\2\2\2\u036a\u036c\58\35\2\u036b\u036a\3\2\2\2\u036c\u036f\3\2"+
		"\2\2\u036d\u036b\3\2\2\2\u036d\u036e\3\2\2\2\u036e\65\3\2\2\2\u036f\u036d"+
		"\3\2\2\2\u0370\u0372\5\u0196\u00cc\2\u0371\u0370\3\2\2\2\u0371\u0372\3"+
		"\2\2\2\u0372\u0373\3\2\2\2\u0373\u0374\5\64\33\2\u0374\67\3\2\2\2\u0375"+
		"\u0376\5\u0194\u00cb\2\u0376\u0377\5\62\32\2\u03779\3\2\2\2\u0378\u037e"+
		"\5*\26\2\u0379\u037a\7\u019d\2\2\u037a\u037b\5<\37\2\u037b\u037c\7\u019e"+
		"\2\2\u037c\u037e\3\2\2\2\u037d\u0378\3\2\2\2\u037d\u0379\3\2\2\2\u037e"+
		";\3\2\2\2\u037f\u0380\7\u019d\2\2\u0380\u0381\5<\37\2\u0381\u0382\7\u019e"+
		"\2\2\u0382\u0383\5> \2\u0383\u0386\3\2\2\2\u0384\u0386\5(\25\2\u0385\u037f"+
		"\3\2\2\2\u0385\u0384\3\2\2\2\u0386\u038a\3\2\2\2\u0387\u0389\5> \2\u0388"+
		"\u0387\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2"+
		"\2\2\u038b=\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u038e\5\u0194\u00cb\2\u038e"+
		"\u038f\5:\36\2\u038f?\3\2\2\2\u0390\u0391\7\u019d\2\2\u0391\u0392\5\64"+
		"\33\2\u0392\u0393\7\u019e\2\2\u0393A\3\2\2\2\u0394\u0395\7\u00ae\2\2\u0395"+
		"\u0396\5|?\2\u0396\u0397\7\u019b\2\2\u0397\u0398\5|?\2\u0398\u03a0\3\2"+
		"\2\2\u0399\u039a\7\u00ae\2\2\u039a\u039d\5|?\2\u039b\u039c\7\u00af\2\2"+
		"\u039c\u039e\5|?\2\u039d\u039b\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0"+
		"\3\2\2\2\u039f\u0394\3\2\2\2\u039f\u0399\3\2\2\2\u03a0C\3\2\2\2\u03a1"+
		"\u03ac\5\u01f8\u00fd\2\u03a2\u03ac\5\u01ec\u00f7\2\u03a3\u03ac\5\20\t"+
		"\2\u03a4\u03ac\5\u0202\u0102\2\u03a5\u03ac\5F$\2\u03a6\u03ac\5H%\2\u03a7"+
		"\u03a8\7\u019d\2\2\u03a8\u03a9\5\u01d6\u00ec\2\u03a9\u03aa\7\u019e\2\2"+
		"\u03aa\u03ac\3\2\2\2\u03ab\u03a1\3\2\2\2\u03ab\u03a2\3\2\2\2\u03ab\u03a3"+
		"\3\2\2\2\u03ab\u03a4\3\2\2\2\u03ab\u03a5\3\2\2\2\u03ab\u03a6\3\2\2\2\u03ab"+
		"\u03a7\3\2\2\2\u03acE\3\2\2\2\u03ad\u03af\5J&\2\u03ae\u03b0\5\16\b\2\u03af"+
		"\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0G\3\2\2\2\u03b1\u03b3\5\u0234"+
		"\u011b\2\u03b2\u03b4\5\16\b\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2"+
		"\u03b4I\3\2\2\2\u03b5\u03b6\7\u01c4\2\2\u03b6K\3\2\2\2\u03b7\u03c8\7R"+
		"\2\2\u03b8\u03c8\5\u0242\u0122\2\u03b9\u03c8\5\u023c\u011f\2\u03ba\u03c8"+
		"\5\u023e\u0120\2\u03bb\u03c8\5\u0240\u0121\2\u03bc\u03bd\7\u019d\2\2\u03bd"+
		"\u03be\5\u008eH\2\u03be\u03bf\7\u019e\2\2\u03bf\u03c8\3\2\2\2\u03c0\u03c8"+
		"\5N(\2\u03c1\u03c8\5P)\2\u03c2\u03c8\5\u0234\u011b\2\u03c3\u03c8\5X-\2"+
		"\u03c4\u03c8\5Z.\2\u03c5\u03c8\5\\/\2\u03c6\u03c8\5^\60\2\u03c7\u03b7"+
		"\3\2\2\2\u03c7\u03b8\3\2\2\2\u03c7\u03b9\3\2\2\2\u03c7\u03ba\3\2\2\2\u03c7"+
		"\u03bb\3\2\2\2\u03c7\u03bc\3\2\2\2\u03c7\u03c0\3\2\2\2\u03c7\u03c1\3\2"+
		"\2\2\u03c7\u03c2\3\2\2\2\u03c7\u03c3\3\2\2\2\u03c7\u03c4\3\2\2\2\u03c7"+
		"\u03c5\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c8M\3\2\2\2\u03c9\u03ca\5J&\2\u03ca"+
		"O\3\2\2\2\u03cb\u03cc\5J&\2\u03cc\u03ce\7\u019d\2\2\u03cd\u03cf\5\u01d0"+
		"\u00e9\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0"+
		"\u03d1\7\u019e\2\2\u03d1Q\3\2\2\2\u03d2\u03d3\5j\66\2\u03d3\u03d4\7\u019a"+
		"\2\2\u03d4\u03d5\5j\66\2\u03d5S\3\2\2\2\u03d6\u03d7\7\u009f\2\2\u03d7"+
		"\u03e0\7\u019d\2\2\u03d8\u03dd\5V,\2\u03d9\u03da\7\u019b\2\2\u03da\u03dc"+
		"\5V,\2\u03db\u03d9\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd"+
		"\u03de\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0\u03d8\3\2"+
		"\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e7\7\u019e\2\2\u03e3"+
		"\u03e4\7\u013c\2\2\u03e4\u03e5\5J&\2\u03e5\u03e6\5\26\f\2\u03e6\u03e8"+
		"\3\2\2\2\u03e7\u03e3\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9"+
		"\u03ed\7(\2\2\u03ea\u03ee\5\n\6\2\u03eb\u03ee\5\66\34\2\u03ec\u03ee\5"+
		"\u008eH\2\u03ed\u03ea\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ec\3\2\2\2"+
		"\u03ee\u0401\3\2\2\2\u03ef\u03fd\5V,\2\u03f0\u03f9\7\u019d\2\2\u03f1\u03f6"+
		"\5V,\2\u03f2\u03f3\7\u019b\2\2\u03f3\u03f5\5V,\2\u03f4\u03f2\3\2\2\2\u03f5"+
		"\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03fa\3\2"+
		"\2\2\u03f8\u03f6\3\2\2\2\u03f9\u03f1\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa"+
		"\u03fb\3\2\2\2\u03fb\u03fd\7\u019e\2\2\u03fc\u03ef\3\2\2\2\u03fc\u03f0"+
		"\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\7\u01b9\2\2\u03ff\u0401\5\u008e"+
		"H\2\u0400\u03d6\3\2\2\2\u0400\u03fc\3\2\2\2\u0401U\3\2\2\2\u0402\u0405"+
		"\5J&\2\u0403\u0405\5j\66\2\u0404\u0402\3\2\2\2\u0404\u0403\3\2\2\2\u0405"+
		"\u0407\3\2\2\2\u0406\u0408\5\26\f\2\u0407\u0406\3\2\2\2\u0407\u0408\3"+
		"\2\2\2\u0408W\3\2\2\2\u0409\u040a\5j\66\2\u040aY\3\2\2\2\u040b\u040c\7"+
		"\u013f\2\2\u040c\u042c\5`\61\2\u040d\u040f\7\u019d\2\2\u040e\u0410\5\u01d0"+
		"\u00e9\2\u040f\u040e\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\3\2\2\2\u0411"+
		"\u042d\7\u019e\2\2\u0412\u0413\7\u019f\2\2\u0413\u0415\7\u01a0\2\2\u0414"+
		"\u0412\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0414\3\2\2\2\u0416\u0417\3\2"+
		"\2\2\u0417\u0418\3\2\2\2\u0418\u041a\7\u01a1\2\2\u0419\u041b\5\u01d0\u00e9"+
		"\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u042d"+
		"\7\u01a2\2\2\u041d\u041e\7\u019f\2\2\u041e\u041f\5\u008eH\2\u041f\u0420"+
		"\7\u01a0\2\2\u0420\u0422\3\2\2\2\u0421\u041d\3\2\2\2\u0422\u0423\3\2\2"+
		"\2\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0429\3\2\2\2\u0425\u0426"+
		"\7\u019f\2\2\u0426\u0428\7\u01a0\2\2\u0427\u0425\3\2\2\2\u0428\u042b\3"+
		"\2\2\2\u0429\u0427\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042d\3\2\2\2\u042b"+
		"\u0429\3\2\2\2\u042c\u040d\3\2\2\2\u042c\u0414\3\2\2\2\u042c\u0421\3\2"+
		"\2\2\u042d[\3\2\2\2\u042e\u042f\7\35\2\2\u042f\u0430\5@!\2\u0430]\3\2"+
		"\2\2\u0431\u0432\5@!\2\u0432_\3\2\2\2\u0433\u0434\5j\66\2\u0434\u0435"+
		"\7\u0199\2\2\u0435\u0437\3\2\2\2\u0436\u0433\3\2\2\2\u0437\u043a\3\2\2"+
		"\2\u0438\u0436\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b\3\2\2\2\u043a\u0438"+
		"\3\2\2\2\u043b\u0440\5j\66\2\u043c\u043d\7\u01a7\2\2\u043d\u043e\5d\63"+
		"\2\u043e\u043f\7\u01a9\2\2\u043f\u0441\3\2\2\2\u0440\u043c\3\2\2\2\u0440"+
		"\u0441\3\2\2\2\u0441a\3\2\2\2\u0442\u0447\5`\61\2\u0443\u0444\7\u019f"+
		"\2\2\u0444\u0446\7\u01a0\2\2\u0445\u0443\3\2\2\2\u0446\u0449\3\2\2\2\u0447"+
		"\u0445\3\2\2\2\u0447\u0448\3\2\2\2\u0448c\3\2\2\2\u0449\u0447\3\2\2\2"+
		"\u044a\u044f\5b\62\2\u044b\u044c\7\u019b\2\2\u044c\u044e\5b\62\2\u044d"+
		"\u044b\3\2\2\2\u044e\u0451\3\2\2\2\u044f\u044d\3\2\2\2\u044f\u0450\3\2"+
		"\2\2\u0450e\3\2\2\2\u0451\u044f\3\2\2\2\u0452\u04bc\7\u013c\2\2\u0453"+
		"\u04bc\7\u013b\2\2\u0454\u04bc\7\u013e\2\2\u0455\u04bc\7\u013f\2\2\u0456"+
		"\u04bc\7\u0141\2\2\u0457\u04bc\7\u0142\2\2\u0458\u04bc\7\u0143\2\2\u0459"+
		"\u04bc\7\u0144\2\2\u045a\u04bc\7\u0145\2\2\u045b\u04bc\7\u0146\2\2\u045c"+
		"\u04bc\7\u0147\2\2\u045d\u04bc\7\u0148\2\2\u045e\u04bc\7\u0149\2\2\u045f"+
		"\u04bc\7\u014a\2\2\u0460\u04bc\7\u0151\2\2\u0461\u04bc\7\u0152\2\2\u0462"+
		"\u04bc\7\u0153\2\2\u0463\u04bc\7\u0154\2\2\u0464\u04bc\7\u014b\2\2\u0465"+
		"\u04bc\7\u014c\2\2\u0466\u04bc\7\u014d\2\2\u0467\u04bc\7\u014e\2\2\u0468"+
		"\u04bc\7\u014f\2\2\u0469\u04bc\7\u0150\2\2\u046a\u04bc\7\u0155\2\2\u046b"+
		"\u04bc\7\u0156\2\2\u046c\u04bc\7\u0157\2\2\u046d\u04bc\7\u0158\2\2\u046e"+
		"\u04bc\7\u0159\2\2\u046f\u04bc\7\u015a\2\2\u0470\u04bc\7\u015d\2\2\u0471"+
		"\u04bc\7\u015c\2\2\u0472\u04bc\7\u015b\2\2\u0473\u04bc\7\u015e\2\2\u0474"+
		"\u04bc\7\u015f\2\2\u0475\u04bc\7\u0160\2\2\u0476\u04bc\7\u0161\2\2\u0477"+
		"\u04bc\7\u0162\2\2\u0478\u04bc\7\u0163\2\2\u0479\u04bc\7\u0164\2\2\u047a"+
		"\u04bc\7\u0165\2\2\u047b\u04bc\7\u0166\2\2\u047c\u04bc\7\u0167\2\2\u047d"+
		"\u04bc\7\u0168\2\2\u047e\u04bc\7\u0169\2\2\u047f\u04bc\7\u016a\2\2\u0480"+
		"\u04bc\7\u016b\2\2\u0481\u04bc\7\u016c\2\2\u0482\u04bc\7\u016e\2\2\u0483"+
		"\u04bc\7\u016d\2\2\u0484\u04bc\7\u0192\2\2\u0485\u04bc\7\u0191\2\2\u0486"+
		"\u04bc\7\u016f\2\2\u0487\u04bc\7\u0170\2\2\u0488\u04bc\7\u0171\2\2\u0489"+
		"\u04bc\7\u0172\2\2\u048a\u04bc\7\u0173\2\2\u048b\u04bc\7\u0174\2\2\u048c"+
		"\u04bc\7\u0175\2\2\u048d\u04bc\7\u0193\2\2\u048e\u04bc\7\u0176\2\2\u048f"+
		"\u04bc\7\u0177\2\2\u0490\u04bc\7\u0178\2\2\u0491\u04bc\5h\65\2\u0492\u04bc"+
		"\7\u00f4\2\2\u0493\u04bc\7\u00f5\2\2\u0494\u04bc\7\u00f6\2\2\u0495\u04bc"+
		"\7\u00f7\2\2\u0496\u04bc\7\u00f8\2\2\u0497\u04bc\7\u00f9\2\2\u0498\u04bc"+
		"\7\u00fa\2\2\u0499\u04bc\7#\2\2\u049a\u04bc\7\u0179\2\2\u049b\u04bc\7"+
		"\u01c2\2\2\u049c\u04bc\7\u017b\2\2\u049d\u04bc\7\u017c\2\2\u049e\u04bc"+
		"\7\u017d\2\2\u049f\u04bc\7\u010d\2\2\u04a0\u04bc\7\u017e\2\2\u04a1\u04bc"+
		"\7\u017f\2\2\u04a2\u04bc\7Y\2\2\u04a3\u04bc\7Z\2\2\u04a4\u04bc\7\u0180"+
		"\2\2\u04a5\u04bc\7\u0181\2\2\u04a6\u04bc\7\u00af\2\2\u04a7\u04bc\7\u018a"+
		"\2\2\u04a8\u04bc\7\u0183\2\2\u04a9\u04bc\7.\2\2\u04aa\u04bc\7\u0094\2"+
		"\2\u04ab\u04bc\7\u00a0\2\2\u04ac\u04bc\7\u00a1\2\2\u04ad\u04bc\7\u00be"+
		"\2\2\u04ae\u04bc\7\u00cc\2\2\u04af\u04bc\7\u0136\2\2\u04b0\u04bc\7\u0109"+
		"\2\2\u04b1\u04bc\7\u010a\2\2\u04b2\u04bc\7\u010b\2\2\u04b3\u04bc\7\u0111"+
		"\2\2\u04b4\u04bc\7\u0112\2\2\u04b5\u04bc\7\u0117\2\2\u04b6\u04bc\7\u011c"+
		"\2\2\u04b7\u04bc\7\u0127\2\2\u04b8\u04bc\7\u0140\2\2\u04b9\u04bc\7\u017a"+
		"\2\2\u04ba\u04bc\7\u0190\2\2\u04bb\u0452\3\2\2\2\u04bb\u0453\3\2\2\2\u04bb"+
		"\u0454\3\2\2\2\u04bb\u0455\3\2\2\2\u04bb\u0456\3\2\2\2\u04bb\u0457\3\2"+
		"\2\2\u04bb\u0458\3\2\2\2\u04bb\u0459\3\2\2\2\u04bb\u045a\3\2\2\2\u04bb"+
		"\u045b\3\2\2\2\u04bb\u045c\3\2\2\2\u04bb\u045d\3\2\2\2\u04bb\u045e\3\2"+
		"\2\2\u04bb\u045f\3\2\2\2\u04bb\u0460\3\2\2\2\u04bb\u0461\3\2\2\2\u04bb"+
		"\u0462\3\2\2\2\u04bb\u0463\3\2\2\2\u04bb\u0464\3\2\2\2\u04bb\u0465\3\2"+
		"\2\2\u04bb\u0466\3\2\2\2\u04bb\u0467\3\2\2\2\u04bb\u0468\3\2\2\2\u04bb"+
		"\u0469\3\2\2\2\u04bb\u046a\3\2\2\2\u04bb\u046b\3\2\2\2\u04bb\u046c\3\2"+
		"\2\2\u04bb\u046d\3\2\2\2\u04bb\u046e\3\2\2\2\u04bb\u046f\3\2\2\2\u04bb"+
		"\u0470\3\2\2\2\u04bb\u0471\3\2\2\2\u04bb\u0472\3\2\2\2\u04bb\u0473\3\2"+
		"\2\2\u04bb\u0474\3\2\2\2\u04bb\u0475\3\2\2\2\u04bb\u0476\3\2\2\2\u04bb"+
		"\u0477\3\2\2\2\u04bb\u0478\3\2\2\2\u04bb\u0479\3\2\2\2\u04bb\u047a\3\2"+
		"\2\2\u04bb\u047b\3\2\2\2\u04bb\u047c\3\2\2\2\u04bb\u047d\3\2\2\2\u04bb"+
		"\u047e\3\2\2\2\u04bb\u047f\3\2\2\2\u04bb\u0480\3\2\2\2\u04bb\u0481\3\2"+
		"\2\2\u04bb\u0482\3\2\2\2\u04bb\u0483\3\2\2\2\u04bb\u0484\3\2\2\2\u04bb"+
		"\u0485\3\2\2\2\u04bb\u0486\3\2\2\2\u04bb\u0487\3\2\2\2\u04bb\u0488\3\2"+
		"\2\2\u04bb\u0489\3\2\2\2\u04bb\u048a\3\2\2\2\u04bb\u048b\3\2\2\2\u04bb"+
		"\u048c\3\2\2\2\u04bb\u048d\3\2\2\2\u04bb\u048e\3\2\2\2\u04bb\u048f\3\2"+
		"\2\2\u04bb\u0490\3\2\2\2\u04bb\u0491\3\2\2\2\u04bb\u0492\3\2\2\2\u04bb"+
		"\u0493\3\2\2\2\u04bb\u0494\3\2\2\2\u04bb\u0495\3\2\2\2\u04bb\u0496\3\2"+
		"\2\2\u04bb\u0497\3\2\2\2\u04bb\u0498\3\2\2\2\u04bb\u0499\3\2\2\2\u04bb"+
		"\u049a\3\2\2\2\u04bb\u049b\3\2\2\2\u04bb\u049c\3\2\2\2\u04bb\u049d\3\2"+
		"\2\2\u04bb\u049e\3\2\2\2\u04bb\u049f\3\2\2\2\u04bb\u04a0\3\2\2\2\u04bb"+
		"\u04a1\3\2\2\2\u04bb\u04a2\3\2\2\2\u04bb\u04a3\3\2\2\2\u04bb\u04a4\3\2"+
		"\2\2\u04bb\u04a5\3\2\2\2\u04bb\u04a6\3\2\2\2\u04bb\u04a7\3\2\2\2\u04bb"+
		"\u04a8\3\2\2\2\u04bb\u04a9\3\2\2\2\u04bb\u04aa\3\2\2\2\u04bb\u04ab\3\2"+
		"\2\2\u04bb\u04ac\3\2\2\2\u04bb\u04ad\3\2\2\2\u04bb\u04ae\3\2\2\2\u04bb"+
		"\u04af\3\2\2\2\u04bb\u04b0\3\2\2\2\u04bb\u04b1\3\2\2\2\u04bb\u04b2\3\2"+
		"\2\2\u04bb\u04b3\3\2\2\2\u04bb\u04b4\3\2\2\2\u04bb\u04b5\3\2\2\2\u04bb"+
		"\u04b6\3\2\2\2\u04bb\u04b7\3\2\2\2\u04bb\u04b8\3\2\2\2\u04bb\u04b9\3\2"+
		"\2\2\u04bb\u04ba\3\2\2\2\u04bcg\3\2\2\2\u04bd\u04be\t\2\2\2\u04bei\3\2"+
		"\2\2\u04bf\u04c4\7\u01c5\2\2\u04c0\u04c4\5\u0264\u0133\2\u04c1\u04c4\5"+
		"\u0268\u0135\2\u04c2\u04c4\5f\64\2\u04c3\u04bf\3\2\2\2\u04c3\u04c0\3\2"+
		"\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c2\3\2\2\2\u04c4k\3\2\2\2\u04c5\u04c8"+
		"\5j\66\2\u04c6\u04c8\5\u0248\u0125\2\u04c7\u04c5\3\2\2\2\u04c7\u04c6\3"+
		"\2\2\2\u04c8m\3\2\2\2\u04c9\u04cd\7\u01c5\2\2\u04ca\u04cd\5\u0264\u0133"+
		"\2\u04cb\u04cd\5f\64\2\u04cc\u04c9\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cc\u04cb"+
		"\3\2\2\2\u04cdo\3\2\2\2\u04ce\u04d0\n\3\2\2\u04cf\u04ce\3\2\2\2\u04d0"+
		"\u04d3\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2q\3\2\2\2"+
		"\u04d3\u04d1\3\2\2\2\u04d4\u04d5\7\u0199\2\2\u04d5\u04d6\5j\66\2\u04d6"+
		"s\3\2\2\2\u04d7\u04dc\7\u0199\2\2\u04d8\u04d9\7\u01a7\2\2\u04d9\u04da"+
		"\5d\63\2\u04da\u04db\7\u01a9\2\2\u04db\u04dd\3\2\2\2\u04dc\u04d8\3\2\2"+
		"\2\u04dc\u04dd\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\5j\66\2\u04df\u04e1"+
		"\7\u019d\2\2\u04e0\u04e2\5\u01d0\u00e9\2\u04e1\u04e0\3\2\2\2\u04e1\u04e2"+
		"\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4\7\u019e\2\2\u04e4u\3\2\2\2\u04e5"+
		"\u04e7\7Q\2\2\u04e6\u04e8\7\32\2\2\u04e7\u04e6\3\2\2\2\u04e7\u04e8\3\2"+
		"\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\7R\2\2\u04eaw\3\2\2\2\u04eb\u04ed"+
		"\7\32\2\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\3\2\2\2"+
		"\u04ee\u04f1\7\u00cb\2\2\u04ef\u04f2\5\u021a\u010e\2\u04f0\u04f2\5@!\2"+
		"\u04f1\u04ef\3\2\2\2\u04f1\u04f0\3\2\2\2\u04f2y\3\2\2\2\u04f3\u04f5\7"+
		"\32\2\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6"+
		"\u04f7\7\u00e3\2\2\u04f7\u04f8\5|?\2\u04f8\u04f9\7\30\2\2\u04f9\u04fa"+
		"\5|?\2\u04fa{\3\2\2\2\u04fb\u04fc\b?\1\2\u04fc\u04fd\5~@\2\u04fd\u051a"+
		"\3\2\2\2\u04fe\u04ff\f\t\2\2\u04ff\u0500\7\u01b4\2\2\u0500\u0519\5|?\n"+
		"\u0501\u0506\f\b\2\2\u0502\u0507\7\u01ad\2\2\u0503\u0507\7\u01aa\2\2\u0504"+
		"\u0507\7\u01ae\2\2\u0505\u0507\7\u01af\2\2\u0506\u0502\3\2\2\2\u0506\u0503"+
		"\3\2\2\2\u0506\u0504\3\2\2\2\u0506\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508"+
		"\u0519\5|?\t\u0509\u050c\f\7\2\2\u050a\u050d\7\u01ab\2\2\u050b\u050d\7"+
		"\u01ac\2\2\u050c\u050a\3\2\2\2\u050c\u050b\3\2\2\2\u050d\u050e\3\2\2\2"+
		"\u050e\u0519\5|?\b\u050f\u0510\f\6\2\2\u0510\u0511\7\u01b3\2\2\u0511\u0519"+
		"\5|?\7\u0512\u0513\f\5\2\2\u0513\u0514\7\u01b0\2\2\u0514\u0519\5|?\6\u0515"+
		"\u0516\f\4\2\2\u0516\u0517\7\u01b2\2\2\u0517\u0519\5|?\5\u0518\u04fe\3"+
		"\2\2\2\u0518\u0501\3\2\2\2\u0518\u0509\3\2\2\2\u0518\u050f\3\2\2\2\u0518"+
		"\u0512\3\2\2\2\u0518\u0515\3\2\2\2\u0519\u051c\3\2\2\2\u051a\u0518\3\2"+
		"\2\2\u051a\u051b\3\2\2\2\u051b}\3\2\2\2\u051c\u051a\3\2\2\2\u051d\u051e"+
		"\b@\1\2\u051e\u051f\5\u0080A\2\u051f\u0524\3\2\2\2\u0520\u0521\f\4\2\2"+
		"\u0521\u0523\5v<\2\u0522\u0520\3\2\2\2\u0523\u0526\3\2\2\2\u0524\u0522"+
		"\3\2\2\2\u0524\u0525\3\2\2\2\u0525\177\3\2\2\2\u0526\u0524\3\2\2\2\u0527"+
		"\u052b\7\u01ab\2\2\u0528\u052b\7\u01ac\2\2\u0529\u052b\7\u01b1\2\2\u052a"+
		"\u0527\3\2\2\2\u052a\u0528\3\2\2\2\u052a\u0529\3\2\2\2\u052b\u052c\3\2"+
		"\2\2\u052c\u052f\5\u0080A\2\u052d\u052f\5\u0082B\2\u052e\u052a\3\2\2\2"+
		"\u052e\u052d\3\2\2\2\u052f\u0081\3\2\2\2\u0530\u0531\bB\1\2\u0531\u0532"+
		"\5L\'\2\u0532\u053e\3\2\2\2\u0533\u053a\f\4\2\2\u0534\u053b\5r:\2\u0535"+
		"\u0536\7\u019f\2\2\u0536\u0537\5\u008eH\2\u0537\u0538\7\u01a0\2\2\u0538"+
		"\u053b\3\2\2\2\u0539\u053b\5t;\2\u053a\u0534\3\2\2\2\u053a\u0535\3\2\2"+
		"\2\u053a\u0539\3\2\2\2\u053b\u053d\3\2\2\2\u053c\u0533\3\2\2\2\u053d\u0540"+
		"\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0083\3\2\2\2\u0540"+
		"\u053e\3\2\2\2\u0541\u0542\bC\1\2\u0542\u0543\5\u0086D\2\u0543\u054c\3"+
		"\2\2\2\u0544\u0545\f\5\2\2\u0545\u0546\7\30\2\2\u0546\u054b\5\u0084C\6"+
		"\u0547\u0548\f\4\2\2\u0548\u0549\7\31\2\2\u0549\u054b\5\u0084C\5\u054a"+
		"\u0544\3\2\2\2\u054a\u0547\3\2\2\2\u054b\u054e\3\2\2\2\u054c\u054a\3\2"+
		"\2\2\u054c\u054d\3\2\2\2\u054d\u0085\3\2\2\2\u054e\u054c\3\2\2\2\u054f"+
		"\u0550\7\32\2\2\u0550\u0553\5\u0086D\2\u0551\u0553\5\u0088E\2\u0552\u054f"+
		"\3\2\2\2\u0552\u0551\3\2\2\2\u0553\u0087\3\2\2\2\u0554\u0555\bE\1\2\u0555"+
		"\u0558\5|?\2\u0556\u0558\5\u008aF\2\u0557\u0554\3\2\2\2\u0557\u0556\3"+
		"\2\2\2\u0558\u0579\3\2\2\2\u0559\u056f\f\6\2\2\u055a\u055c\7\32\2\2\u055b"+
		"\u055a\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u0560\3\2\2\2\u055d\u0561\7\33"+
		"\2\2\u055e\u0561\7\u009c\2\2\u055f\u0561\7\u009d\2\2\u0560\u055d\3\2\2"+
		"\2\u0560\u055e\3\2\2\2\u0560\u055f\3\2\2\2\u0561\u0570\3\2\2\2\u0562\u0570"+
		"\7\u01a3\2\2\u0563\u0570\7\u01a4\2\2\u0564\u0566\7Q\2\2\u0565\u0567\7"+
		"\32\2\2\u0566\u0565\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0568\3\2\2\2\u0568"+
		"\u0569\7*\2\2\u0569\u0570\7\'\2\2\u056a\u0570\7\u01a5\2\2\u056b\u0570"+
		"\7\u01a6\2\2\u056c\u0570\7\u01a7\2\2\u056d\u0570\7\u01a8\2\2\u056e\u0570"+
		"\7\u01a9\2\2\u056f\u055b\3\2\2\2\u056f\u0562\3\2\2\2\u056f\u0563\3\2\2"+
		"\2\u056f\u0564\3\2\2\2\u056f\u056a\3\2\2\2\u056f\u056b\3\2\2\2\u056f\u056c"+
		"\3\2\2\2\u056f\u056d\3\2\2\2\u056f\u056e\3\2\2\2\u0570\u0571\3\2\2\2\u0571"+
		"\u0578\5\u0088E\7\u0572\u0575\f\5\2\2\u0573\u0576\5x=\2\u0574\u0576\5"+
		"z>\2\u0575\u0573\3\2\2\2\u0575\u0574\3\2\2\2\u0576\u0578\3\2\2\2\u0577"+
		"\u0559\3\2\2\2\u0577\u0572\3\2\2\2\u0578\u057b\3\2\2\2\u0579\u0577\3\2"+
		"\2\2\u0579\u057a\3\2\2\2\u057a\u0089\3\2\2\2\u057b\u0579\3\2\2\2\u057c"+
		"\u057d\7\u019d\2\2\u057d\u057e\5\u008cG\2\u057e\u057f\7\u019e\2\2\u057f"+
		"\u008b\3\2\2\2\u0580\u0585\5|?\2\u0581\u0582\7\u019b\2\2\u0582\u0584\5"+
		"|?\2\u0583\u0581\3\2\2\2\u0584\u0587\3\2\2\2\u0585\u0583\3\2\2\2\u0585"+
		"\u0586\3\2\2\2\u0586\u008d\3\2\2\2\u0587\u0585\3\2\2\2\u0588\u0589\5\u0084"+
		"C\2\u0589\u008f\3\2\2\2\u058a\u058b\7\u01c5\2\2\u058b\u0091\3\2\2\2\u058c"+
		"\u05bc\5\u0098M\2\u058d\u05bc\5\u009cO\2\u058e\u05bc\5\u009aN\2\u058f"+
		"\u05bc\5\u009eP\2\u0590\u05bc\5\u00a0Q\2\u0591\u05bc\5\u00a2R\2\u0592"+
		"\u05bc\5\u0094K\2\u0593\u05bc\5\u0096L\2\u0594\u05bc\5\u00a4S\2\u0595"+
		"\u05bc\5\u00a6T\2\u0596\u05bc\5\u00a8U\2\u0597\u05bc\5\u00aaV\2\u0598"+
		"\u05bc\5\u00acW\2\u0599\u05bc\5\u00aeX\2\u059a\u05bc\5\u00b0Y\2\u059b"+
		"\u05bc\5\u00b2Z\2\u059c\u05bc\5\u00b4[\2\u059d\u05bc\5\u0106\u0084\2\u059e"+
		"\u05bc\5\u00b6\\\2\u059f\u05bc\5\u00b8]\2\u05a0\u05bc\5\u00ba^\2\u05a1"+
		"\u05bc\5\u00bc_\2\u05a2\u05bc\5\u00be`\2\u05a3\u05bc\5\u00c0a\2\u05a4"+
		"\u05bc\5\u00c2b\2\u05a5\u05bc\5\u00c4c\2\u05a6\u05bc\5\u00c6d\2\u05a7"+
		"\u05bc\5\u00c8e\2\u05a8\u05bc\5\u00caf\2\u05a9\u05bc\5\u00ccg\2\u05aa"+
		"\u05bc\5\u00ceh\2\u05ab\u05bc\5\u00d0i\2\u05ac\u05bc\5\u00d2j\2\u05ad"+
		"\u05bc\5\u00d4k\2\u05ae\u05bc\5\u00e8u\2\u05af\u05bc\5\u00d6l\2\u05b0"+
		"\u05bc\5\u00d8m\2\u05b1\u05bc\5\u00dan\2\u05b2\u05bc\5\u00dco\2\u05b3"+
		"\u05bc\5\u00dep\2\u05b4\u05bc\5\u00e0q\2\u05b5\u05bc\5\u00e2r\2\u05b6"+
		"\u05bc\5\u00e6t\2\u05b7\u05bc\5\u00eav\2\u05b8\u05bc\5\u00ecw\2\u05b9"+
		"\u05bc\5\u00eex\2\u05ba\u05bc\5\u00f0y\2\u05bb\u058c\3\2\2\2\u05bb\u058d"+
		"\3\2\2\2\u05bb\u058e\3\2\2\2\u05bb\u058f\3\2\2\2\u05bb\u0590\3\2\2\2\u05bb"+
		"\u0591\3\2\2\2\u05bb\u0592\3\2\2\2\u05bb\u0593\3\2\2\2\u05bb\u0594\3\2"+
		"\2\2\u05bb\u0595\3\2\2\2\u05bb\u0596\3\2\2\2\u05bb\u0597\3\2\2\2\u05bb"+
		"\u0598\3\2\2\2\u05bb\u0599\3\2\2\2\u05bb\u059a\3\2\2\2\u05bb\u059b\3\2"+
		"\2\2\u05bb\u059c\3\2\2\2\u05bb\u059d\3\2\2\2\u05bb\u059e\3\2\2\2\u05bb"+
		"\u059f\3\2\2\2\u05bb\u05a0\3\2\2\2\u05bb\u05a1\3\2\2\2\u05bb\u05a2\3\2"+
		"\2\2\u05bb\u05a3\3\2\2\2\u05bb\u05a4\3\2\2\2\u05bb\u05a5\3\2\2\2\u05bb"+
		"\u05a6\3\2\2\2\u05bb\u05a7\3\2\2\2\u05bb\u05a8\3\2\2\2\u05bb\u05a9\3\2"+
		"\2\2\u05bb\u05aa\3\2\2\2\u05bb\u05ab\3\2\2\2\u05bb\u05ac\3\2\2\2\u05bb"+
		"\u05ad\3\2\2\2\u05bb\u05ae\3\2\2\2\u05bb\u05af\3\2\2\2\u05bb\u05b0\3\2"+
		"\2\2\u05bb\u05b1\3\2\2\2\u05bb\u05b2\3\2\2\2\u05bb\u05b3\3\2\2\2\u05bb"+
		"\u05b4\3\2\2\2\u05bb\u05b5\3\2\2\2\u05bb\u05b6\3\2\2\2\u05bb\u05b7\3\2"+
		"\2\2\u05bb\u05b8\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bb\u05ba\3\2\2\2\u05bc"+
		"\u0093\3\2\2\2\u05bd\u05bf\7\u0145\2\2\u05be\u05c0\7\u0190\2\2\u05bf\u05be"+
		"\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2\7\u0146\2"+
		"\2\u05c2\u0095\3\2\2\2\u05c3\u05c5\7\u0145\2\2\u05c4\u05c6\7\u0190\2\2"+
		"\u05c5\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05cb"+
		"\7#\2\2\u05c8\u05c9\7\u0107\2\2\u05c9\u05ca\7\u0118\2\2\u05ca\u05cc\5"+
		"\u00f2z\2\u05cb\u05c8\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u0097\3\2\2\2"+
		"\u05cd\u05cf\7\u009a\2\2\u05ce\u05d0\7\u0190\2\2\u05cf\u05ce\3\2\2\2\u05cf"+
		"\u05d0\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05d2\7\u0118\2\2\u05d2\u05d4"+
		"\5\u00f2z\2\u05d3\u05d5\5\u00f4{\2\u05d4\u05d3\3\2\2\2\u05d4\u05d5\3\2"+
		"\2\2\u05d5\u0099\3\2\2\2\u05d6\u05d8\7\u009a\2\2\u05d7\u05d9\7\u0190\2"+
		"\2\u05d8\u05d7\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05db"+
		"\7\"\2\2\u05db\u05dd\5\u0108\u0085\2\u05dc\u05de\5\u00f4{\2\u05dd\u05dc"+
		"\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u009b\3\2\2\2\u05df\u05e1\7\u0141\2"+
		"\2\u05e0\u05e2\7\u0190\2\2\u05e1\u05e0\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2"+
		"\u05e3\3\2\2\2\u05e3\u05e4\7\u0118\2\2\u05e4\u05e5\5\u00f2z\2\u05e5\u009d"+
		"\3\2\2\2\u05e6\u05e8\7\u0141\2\2\u05e7\u05e9\7\u0190\2\2\u05e8\u05e7\3"+
		"\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05eb\7\"\2\2\u05eb"+
		"\u05ec\5\u0108\u0085\2\u05ec\u009f\3\2\2\2\u05ed\u05ee\7\u009a\2\2\u05ee"+
		"\u05ef\7\u0166\2\2\u05ef\u05f0\5\u00f6|\2\u05f0\u00a1\3\2\2\2\u05f1\u05f2"+
		"\7\u0141\2\2\u05f2\u05f3\7\u0166\2\2\u05f3\u05f4\5\u00f6|\2\u05f4\u00a3"+
		"\3\2\2\2\u05f5\u05f6\7>\2\2\u05f6\u05f7\7\u0143\2\2\u05f7\u05f8\7\u0107"+
		"\2\2\u05f8\u05fc\5\u00f8}\2\u05f9\u05fa\7\64\2\2\u05fa\u05fb\7\u0144\2"+
		"\2\u05fb\u05fd\5\u00fa~\2\u05fc\u05f9\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd"+
		"\u00a5\3\2\2\2\u05fe\u0600\t\4\2\2\u05ff\u0601\7\u0190\2\2\u0600\u05ff"+
		"\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0603\7\u0119\2"+
		"\2\u0603\u0604\5\u00fc\177\2\u0604\u00a7\3\2\2\2\u0605\u0607\7\u0145\2"+
		"\2\u0606\u0608\7\u0190\2\2\u0607\u0606\3\2\2\2\u0607\u0608\3\2\2\2\u0608"+
		"\u0609\3\2\2\2\u0609\u060a\7\u011a\2\2\u060a\u00a9\3\2\2\2\u060b\u060c"+
		"\7\u0145\2\2\u060c\u060d\7\u0148\2\2\u060d\u00ab\3\2\2\2\u060e\u060f\7"+
		"\u009a\2\2\u060f\u0610\7\u0149\2\2\u0610\u0611\5\u0124\u0093\2\u0611\u00ad"+
		"\3\2\2\2\u0612\u0613\7\u0141\2\2\u0613\u0614\7\u0149\2\2\u0614\u0615\5"+
		"\u0124\u0093\2\u0615\u00af\3\2\2\2\u0616\u0617\7>\2\2\u0617\u0618\7\u014a"+
		"\2\2\u0618\u00b1\3\2\2\2\u0619\u061a\7>\2\2\u061a\u061d\7\u0152\2\2\u061b"+
		"\u061c\7\u00aa\2\2\u061c\u061e\5\u010e\u0088\2\u061d\u061b\3\2\2\2\u061d"+
		"\u061e\3\2\2\2\u061e\u0620\3\2\2\2\u061f\u0621\5\u00e4s\2\u0620\u061f"+
		"\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u00b3\3\2\2\2\u0622\u0623\7>\2\2\u0623"+
		"\u062f\7\u0151\2\2\u0624\u0630\5\u00fe\u0080\2\u0625\u0628\7\u0084\2\2"+
		"\u0626\u0627\7\'\2\2\u0627\u0629\5\u0124\u0093\2\u0628\u0626\3\2\2\2\u0628"+
		"\u0629\3\2\2\2\u0629\u062d\3\2\2\2\u062a\u062b\7\64\2\2\u062b\u062c\7"+
		"\u0144\2\2\u062c\u062e\5\u00fa~\2\u062d\u062a\3\2\2\2\u062d\u062e\3\2"+
		"\2\2\u062e\u0630\3\2\2\2\u062f\u0624\3\2\2\2\u062f\u0625\3\2\2\2\u0630"+
		"\u0632\3\2\2\2\u0631\u0633\5\u00e4s\2\u0632\u0631\3\2\2\2\u0632\u0633"+
		"\3\2\2\2\u0633\u00b5\3\2\2\2\u0634\u0635\7\u0153\2\2\u0635\u0636\7\u0151"+
		"\2\2\u0636\u0638\5\u0100\u0081\2\u0637\u0639\5\u00e4s\2\u0638\u0637\3"+
		"\2\2\2\u0638\u0639\3\2\2\2\u0639\u00b7\3\2\2\2\u063a\u063b\7\u0154\2\2"+
		"\u063b\u063c\7\u0151\2\2\u063c\u063e\5\u0100\u0081\2\u063d\u063f\5\u00e4"+
		"s\2\u063e\u063d\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u00b9\3\2\2\2\u0640"+
		"\u0641\7S\2\2\u0641\u0642\7\u0151\2\2\u0642\u0643\5\u00fe\u0080\2\u0643"+
		"\u00bb\3\2\2\2\u0644\u0645\t\5\2\2\u0645\u0646\7\u0151\2\2\u0646\u0647"+
		"\5\u00fe\u0080\2\u0647\u00bd\3\2\2\2\u0648\u0649\7\u009a\2\2\u0649\u064a"+
		"\5\u010e\u0088\2\u064a\u064b\7a\2\2\u064b\u064c\7\u0151\2\2\u064c\u0657"+
		"\5\u00fe\u0080\2\u064d\u064e\7\u00aa\2\2\u064e\u064f\7\u014b\2\2\u064f"+
		"\u0654\5\u010a\u0086\2\u0650\u0651\7\u019b\2\2\u0651\u0653\5\u010a\u0086"+
		"\2\u0652\u0650\3\2\2\2\u0653\u0656\3\2\2\2\u0654\u0652\3\2\2\2\u0654\u0655"+
		"\3\2\2\2\u0655\u0658\3\2\2\2\u0656\u0654\3\2\2\2\u0657\u064d\3\2\2\2\u0657"+
		"\u0658\3\2\2\2\u0658\u065a\3\2\2\2\u0659\u065b\5\u00e4s\2\u065a\u0659"+
		"\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u00bf\3\2\2\2\u065c\u065d\7\u0141\2"+
		"\2\u065d\u065e\5\u010e\u0088\2\u065e\u065f\7\'\2\2\u065f\u0660\7\u0151"+
		"\2\2\u0660\u0661\5\u00fe\u0080\2\u0661\u00c1\3\2\2\2\u0662\u0663\7\u014f"+
		"\2\2\u0663\u0666\7\u014c\2\2\u0664\u0667\5\u0124\u0093\2\u0665\u0667\7"+
		"\u01ad\2\2\u0666\u0664\3\2\2\2\u0666\u0665\3\2\2\2\u0667\u0668\3\2\2\2"+
		"\u0668\u0669\7a\2\2\u0669\u066a\7\u0153\2\2\u066a\u066b\7\u0151\2\2\u066b"+
		"\u0675\5\u00fe\u0080\2\u066c\u066d\7\u00aa\2\2\u066d\u0672\5\u010a\u0086"+
		"\2\u066e\u066f\7\u019b\2\2\u066f\u0671\5\u010a\u0086\2\u0670\u066e\3\2"+
		"\2\2\u0671\u0674\3\2\2\2\u0672\u0670\3\2\2\2\u0672\u0673\3\2\2\2\u0673"+
		"\u0676\3\2\2\2\u0674\u0672\3\2\2\2\u0675\u066c\3\2\2\2\u0675\u0676\3\2"+
		"\2\2\u0676\u067a\3\2\2\2\u0677\u0678\7D\2\2\u0678\u0679\7\u014e\2\2\u0679"+
		"\u067b\5\u011a\u008e\2\u067a\u0677\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u067e"+
		"\3\2\2\2\u067c\u067d\7\u0165\2\2\u067d\u067f\7\u01c3\2\2\u067e\u067c\3"+
		"\2\2\2\u067e\u067f\3\2\2\2\u067f\u00c3\3\2\2\2\u0680\u0681\7\u0150\2\2"+
		"\u0681\u0684\7\u014c\2\2\u0682\u0685\5\u0124\u0093\2\u0683\u0685\7\u01ad"+
		"\2\2\u0684\u0682\3\2\2\2\u0684\u0683\3\2\2\2\u0685\u0686\3\2\2\2\u0686"+
		"\u0687\7a\2\2\u0687\u0688\7\u0153\2\2\u0688\u0689\7\u0151\2\2\u0689\u068a"+
		"\5\u00fe\u0080\2\u068a\u00c5\3\2\2\2\u068b\u068c\7\u015f\2\2\u068c\u068d"+
		"\7\u0160\2\2\u068d\u0694\5\u0110\u0089\2\u068e\u0690\7\64\2\2\u068f\u0691"+
		"\7\u0190\2\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0692\3\2\2"+
		"\2\u0692\u0693\7\u0119\2\2\u0693\u0695\5\u00fc\177\2\u0694\u068e\3\2\2"+
		"\2\u0694\u0695\3\2\2\2\u0695\u00c7\3\2\2\2\u0696\u0697\7\u015e\2\2\u0697"+
		"\u069e\7\u0160\2\2\u0698\u069a\7\64\2\2\u0699\u069b\7\u0190\2\2\u069a"+
		"\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069d\7\u0119"+
		"\2\2\u069d\u069f\5\u00fc\177\2\u069e\u0698\3\2\2\2\u069e\u069f\3\2\2\2"+
		"\u069f\u00c9\3\2\2\2\u06a0\u06a1\7\u0163\2\2\u06a1\u06a2\7\u0164\2\2\u06a2"+
		"\u06a3\7\u0142\2\2\u06a3\u00cb\3\2\2\2\u06a4\u06a5\7\u00d1\2\2\u06a5\u06a6"+
		"\7\u014e\2\2\u06a6\u06a7\5\u011a\u008e\2\u06a7\u06a8\7\64\2\2\u06a8\u06a9"+
		"\7\67\2\2\u06a9\u06ae\5\u00f8}\2\u06aa\u06ab\7\u019d\2\2\u06ab\u06ac\5"+
		"\u011c\u008f\2\u06ac\u06ad\7\u019e\2\2\u06ad\u06af\3\2\2\2\u06ae\u06aa"+
		"\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b7\7a\2\2\u06b1"+
		"\u06b2\5\u0104\u0083\2\u06b2\u06b3\7\u00aa\2\2\u06b3\u06b4\7\u0165\2\2"+
		"\u06b4\u06b5\7\u01c3\2\2\u06b5\u06b8\3\2\2\2\u06b6\u06b8\5\u0104\u0083"+
		"\2\u06b7\u06b1\3\2\2\2\u06b7\u06b6\3\2\2\2\u06b8\u06ba\3\2\2\2\u06b9\u06bb"+
		"\5\u00e4s\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u00cd\3\2\2"+
		"\2\u06bc\u06bd\7\u00d2\2\2\u06bd\u06be\7\u014e\2\2\u06be\u06bf\7\64\2"+
		"\2\u06bf\u06c0\7\67\2\2\u06c0\u06c5\5\u00f8}\2\u06c1\u06c2\7\u019d\2\2"+
		"\u06c2\u06c3\5\u011c\u008f\2\u06c3\u06c4\7\u019e\2\2\u06c4\u06c6\3\2\2"+
		"\2\u06c5\u06c1\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c8"+
		"\7\'\2\2\u06c8\u06ca\5\u0104\u0083\2\u06c9\u06cb\5\u00e4s\2\u06ca\u06c9"+
		"\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u00cf\3\2\2\2\u06cc\u06cd\7>\2\2\u06cd"+
		"\u06cf\7\u014e\2\2\u06ce\u06d0\5\u011a\u008e\2\u06cf\u06ce\3\2\2\2\u06cf"+
		"\u06d0\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06de\7\u0142\2\2\u06d2\u06d3"+
		"\7\64\2\2\u06d3\u06d4\7\67\2\2\u06d4\u06d7\5\u00f8}\2\u06d5\u06d6\7\u0107"+
		"\2\2\u06d6\u06d8\5\u0104\u0083\2\u06d7\u06d5\3\2\2\2\u06d7\u06d8\3\2\2"+
		"\2\u06d8\u06df\3\2\2\2\u06d9\u06da\7\u0107\2\2\u06da\u06df\5\u0104\u0083"+
		"\2\u06db\u06dc\7\u0107\2\2\u06dc\u06dd\7\67\2\2\u06dd\u06df\5\u00f8}\2"+
		"\u06de\u06d2\3\2\2\2\u06de\u06d9\3\2\2\2\u06de\u06db\3\2\2\2\u06de\u06df"+
		"\3\2\2\2\u06df\u06e1\3\2\2\2\u06e0\u06e2\5\u00e4s\2\u06e1\u06e0\3\2\2"+
		"\2\u06e1\u06e2\3\2\2\2\u06e2\u00d1\3\2\2\2\u06e3\u06e4\7\u00d1\2\2\u06e4"+
		"\u06e5\7\u0167\2\2\u06e5\u06ea\5\u010a\u0086\2\u06e6\u06e7\7\u019b\2\2"+
		"\u06e7\u06e9\5\u010a\u0086\2\u06e8\u06e6\3\2\2\2\u06e9\u06ec\3\2\2\2\u06ea"+
		"\u06e8\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ed\3\2\2\2\u06ec\u06ea\3\2"+
		"\2\2\u06ed\u06ee\7a\2\2\u06ee\u06ef\5\u0104\u0083\2\u06ef\u00d3\3\2\2"+
		"\2\u06f0\u06f1\7\u00d2\2\2\u06f1\u06f2\7\u0167\2\2\u06f2\u06f7\5\u010a"+
		"\u0086\2\u06f3\u06f4\7\u019b\2\2\u06f4\u06f6\5\u010a\u0086\2\u06f5\u06f3"+
		"\3\2\2\2\u06f6\u06f9\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8"+
		"\u06fa\3\2\2\2\u06f9\u06f7\3\2\2\2\u06fa\u06fb\7\'\2\2\u06fb\u06fc\5\u0104"+
		"\u0083\2\u06fc\u00d5\3\2\2\2\u06fd\u06ff\7S\2\2\u06fe\u0700\7\u0190\2"+
		"\2\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0702"+
		"\7\u0119\2\2\u0702\u0704\5\u00fc\177\2\u0703\u0705\5\u00f4{\2\u0704\u0703"+
		"\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0707\3\2\2\2\u0706\u0708\5\u00e4s"+
		"\2\u0707\u0706\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u00d7\3\2\2\2\u0709\u070b"+
		"\t\5\2\2\u070a\u070c\7\u0190\2\2\u070b\u070a\3\2\2\2\u070b\u070c\3\2\2"+
		"\2\u070c\u070d\3\2\2\2\u070d\u070e\7\u0119\2\2\u070e\u070f\5\u00fc\177"+
		"\2\u070f\u00d9\3\2\2\2\u0710\u0711\7\u009a\2\2\u0711\u0712\7\u0190\2\2"+
		"\u0712\u0713\7\u0119\2\2\u0713\u0714\5\u00fc\177\2\u0714\u0715\7a\2\2"+
		"\u0715\u0716\7\u014c\2\2\u0716\u0717\5\u0124\u0093\2\u0717\u00db\3\2\2"+
		"\2\u0718\u0719\7\u0141\2\2\u0719\u071a\7\u0190\2\2\u071a\u071b\7\u0119"+
		"\2\2\u071b\u071c\5\u00fc\177\2\u071c\u071d\7\'\2\2\u071d\u071e\7\u014c"+
		"\2\2\u071e\u071f\5\u0124\u0093\2\u071f\u00dd\3\2\2\2\u0720\u0725\7\u00d1"+
		"\2\2\u0721\u0723\7\u0190\2\2\u0722\u0721\3\2\2\2\u0722\u0723\3\2\2\2\u0723"+
		"\u0724\3\2\2\2\u0724\u0726\7\u0119\2\2\u0725\u0722\3\2\2\2\u0725\u0726"+
		"\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u072c\5\u00fc\177\2\u0728\u0729\7\u019b"+
		"\2\2\u0729\u072b\5\u00fc\177\2\u072a\u0728\3\2\2\2\u072b\u072e\3\2\2\2"+
		"\u072c\u072a\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u072f\3\2\2\2\u072e\u072c"+
		"\3\2\2\2\u072f\u0730\7a\2\2\u0730\u0732\5\u0102\u0082\2\u0731\u0733\5"+
		"\u0114\u008b\2\u0732\u0731\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u00df\3\2"+
		"\2\2\u0734\u0736\7\u00d2\2\2\u0735\u0737\5\u0112\u008a\2\u0736\u0735\3"+
		"\2\2\2\u0736\u0737\3\2\2\2\u0737\u073c\3\2\2\2\u0738\u073a\7\u0190\2\2"+
		"\u0739\u0738\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d"+
		"\7\u0119\2\2\u073c\u0739\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u073e\3\2\2"+
		"\2\u073e\u0743\5\u00fc\177\2\u073f\u0740\7\u019b\2\2\u0740\u0742\5\u00fc"+
		"\177\2\u0741\u073f\3\2\2\2\u0742\u0745\3\2\2\2\u0743\u0741\3\2\2\2\u0743"+
		"\u0744\3\2\2\2\u0744\u0746\3\2\2\2\u0745\u0743\3\2\2\2\u0746\u0747\7\'"+
		"\2\2\u0747\u0748\5\u0102\u0082\2\u0748\u00e1\3\2\2\2\u0749\u074a\7\u00d1"+
		"\2\2\u074a\u074f\5\u010a\u0086\2\u074b\u074c\7\u019b\2\2\u074c\u074e\5"+
		"\u010a\u0086\2\u074d\u074b\3\2\2\2\u074e\u0751\3\2\2\2\u074f\u074d\3\2"+
		"\2\2\u074f\u0750\3\2\2\2\u0750\u0752\3\2\2\2\u0751\u074f\3\2\2\2\u0752"+
		"\u0753\7\64\2\2\u0753\u0754\5\u010e\u0088\2\u0754\u0755\7a\2\2\u0755\u0757"+
		"\5\u0102\u0082\2\u0756\u0758\5\u0116\u008c\2\u0757\u0756\3\2\2\2\u0757"+
		"\u0758\3\2\2\2\u0758\u075a\3\2\2\2\u0759\u075b\5\u00e4s\2\u075a\u0759"+
		"\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u00e3\3\2\2\2\u075c\u075d\7\u0178\2"+
		"\2\u075d\u075e\7\u019d\2\2\u075e\u0763\5\u0162\u00b2\2\u075f\u0760\7\u019b"+
		"\2\2\u0760\u0762\5\u0162\u00b2\2\u0761\u075f\3\2\2\2\u0762\u0765\3\2\2"+
		"\2\u0763\u0761\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0766\3\2\2\2\u0765\u0763"+
		"\3\2\2\2\u0766\u0767\7\u019e\2\2\u0767\u00e5\3\2\2\2\u0768\u076a\7\u00d2"+
		"\2\2\u0769\u076b\5\u0118\u008d\2\u076a\u0769\3\2\2\2\u076a\u076b\3\2\2"+
		"\2\u076b\u076c\3\2\2\2\u076c\u0771\5\u010a\u0086\2\u076d\u076e\7\u019b"+
		"\2\2\u076e\u0770\5\u010a\u0086\2\u076f\u076d\3\2\2\2\u0770\u0773\3\2\2"+
		"\2\u0771\u076f\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0774\3\2\2\2\u0773\u0771"+
		"\3\2\2\2\u0774\u0775\7\64\2\2\u0775\u0776\5\u010e\u0088\2\u0776\u0777"+
		"\7\'\2\2\u0777\u0779\5\u0102\u0082\2\u0778\u077a\5\u00e4s\2\u0779\u0778"+
		"\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u00e7\3\2\2\2\u077b\u077c\7\u00df\2"+
		"\2\u077c\u077d\7\u014b\2\2\u077d\u077e\7\'\2\2\u077e\u077f\5\u0102\u0082"+
		"\2\u077f\u00e9\3\2\2\2\u0780\u0781\7>\2\2\u0781\u0783\t\6\2\2\u0782\u0784"+
		"\7\u0107\2\2\u0783\u0782\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0786\3\2\2"+
		"\2\u0785\u0787\5\u0104\u0083\2\u0786\u0785\3\2\2\2\u0786\u0787\3\2\2\2"+
		"\u0787\u078d\3\2\2\2\u0788\u0789\7\64\2\2\u0789\u078a\7\u0144\2\2\u078a"+
		"\u078e\5\u00fa~\2\u078b\u078c\7\64\2\2\u078c\u078e\5\u010e\u0088\2\u078d"+
		"\u0788\3\2\2\2\u078d\u078b\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790\3\2"+
		"\2\2\u078f\u0791\5\u00e4s\2\u0790\u078f\3\2\2\2\u0790\u0791\3\2\2\2\u0791"+
		"\u00eb\3\2\2\2\u0792\u0793\7>\2\2\u0793\u0794\7\u0119\2\2\u0794\u0795"+
		"\7\u00d1\2\2\u0795\u0796\5\u0104\u0083\2\u0796\u00ed\3\2\2\2\u0797\u0798"+
		"\7>\2\2\u0798\u0799\7\u011a\2\2\u0799\u00ef\3\2\2\2\u079a\u079b\7>\2\2"+
		"\u079b\u079d\7\u0121\2\2\u079c\u079e\7\u0107\2\2\u079d\u079c\3\2\2\2\u079d"+
		"\u079e\3\2\2\2\u079e\u07a0\3\2\2\2\u079f\u07a1\7\u0190\2\2\u07a0\u079f"+
		"\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a3\3\2\2\2\u07a2\u07a4\7\u0119\2"+
		"\2\u07a3\u07a2\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6"+
		"\5\u00fc\177\2\u07a6\u00f1\3\2\2\2\u07a7\u07a8\5\u0120\u0091\2\u07a8\u07a9"+
		"\7\u01b6\2\2\u07a9\u07ab\3\2\2\2\u07aa\u07a7\3\2\2\2\u07aa\u07ab\3\2\2"+
		"\2\u07ab\u07ae\3\2\2\2\u07ac\u07af\5\u0120\u0091\2\u07ad\u07af\7\u01c3"+
		"\2\2\u07ae\u07ac\3\2\2\2\u07ae\u07ad\3\2\2\2\u07af\u07b7\3\2\2\2\u07b0"+
		"\u07b3\t\7\2\2\u07b1\u07b4\5\u0120\u0091\2\u07b2\u07b4\7\u01c3\2\2\u07b3"+
		"\u07b1\3\2\2\2\u07b3\u07b2\3\2\2\2\u07b4\u07b6\3\2\2\2\u07b5\u07b0\3\2"+
		"\2\2\u07b6\u07b9\3\2\2\2\u07b7\u07b5\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8"+
		"\u07cc\3\2\2\2\u07b9\u07b7\3\2\2\2\u07ba\u07c1\7\u01c4\2\2\u07bb\u07be"+
		"\7\u01cc\2\2\u07bc\u07bf\5\u0120\u0091\2\u07bd\u07bf\7\u01c3\2\2\u07be"+
		"\u07bc\3\2\2\2\u07be\u07bd\3\2\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07ba\3\2"+
		"\2\2\u07c0\u07bb\3\2\2\2\u07c1\u07c9\3\2\2\2\u07c2\u07c5\t\7\2\2\u07c3"+
		"\u07c6\5\u0120\u0091\2\u07c4\u07c6\7\u01c3\2\2\u07c5\u07c3\3\2\2\2\u07c5"+
		"\u07c4\3\2\2\2\u07c6\u07c8\3\2\2\2\u07c7\u07c2\3\2\2\2\u07c8\u07cb\3\2"+
		"\2\2\u07c9\u07c7\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cd\3\2\2\2\u07cb"+
		"\u07c9\3\2\2\2\u07cc\u07c0\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07d8\3\2"+
		"\2\2\u07ce\u07d4\7\u019a\2\2\u07cf\u07d5\5j\66\2\u07d0\u07d5\7\u01c3\2"+
		"\2\u07d1\u07d5\7\u0199\2\2\u07d2\u07d5\7\u01ac\2\2\u07d3\u07d5\7\u01cc"+
		"\2\2\u07d4\u07cf\3\2\2\2\u07d4\u07d0\3\2\2\2\u07d4\u07d1\3\2\2\2\u07d4"+
		"\u07d2\3\2\2\2\u07d4\u07d3\3\2\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07d4\3\2"+
		"\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d9\3\2\2\2\u07d8\u07ce\3\2\2\2\u07d8"+
		"\u07d9\3\2\2\2\u07d9\u00f3\3\2\2\2\u07da\u07dd\7b\2\2\u07db\u07dd\5\u0122"+
		"\u0092\2\u07dc\u07da\3\2\2\2\u07dc\u07db\3\2\2\2\u07dd\u07de\3\2\2\2\u07de"+
		"\u07df\5\u0246\u0124\2\u07df\u00f5\3\2\2\2\u07e0\u07e1\5j\66\2\u07e1\u00f7"+
		"\3\2\2\2\u07e2\u07e4\7\u01ad\2\2\u07e3\u07e2\3\2\2\2\u07e3\u07e4\3\2\2"+
		"\2\u07e4\u07e5\3\2\2\2\u07e5\u07e8\5j\66\2\u07e6\u07e8\7\u01ad\2\2\u07e7"+
		"\u07e3\3\2\2\2\u07e7\u07e6\3\2\2\2\u07e8\u07ef\3\2\2\2\u07e9\u07eb\t\b"+
		"\2\2\u07ea\u07ec\5j\66\2\u07eb\u07ea\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec"+
		"\u07ee\3\2\2\2\u07ed\u07e9\3\2\2\2\u07ee\u07f1\3\2\2\2\u07ef\u07ed\3\2"+
		"\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f3\3\2\2\2\u07f1\u07ef\3\2\2\2\u07f2"+
		"\u07f4\7\u01ad\2\2\u07f3\u07f2\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f7"+
		"\3\2\2\2\u07f5\u07f7\7\u01ad\2\2\u07f6\u07e7\3\2\2\2\u07f6\u07f5\3\2\2"+
		"\2\u07f7\u00f9\3\2\2\2\u07f8\u07fc\5j\66\2\u07f9\u07fc\7\u009f\2\2\u07fa"+
		"\u07fc\7\u00cc\2\2\u07fb\u07f8\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fa"+
		"\3\2\2\2\u07fc\u00fb\3\2\2\2\u07fd\u07fe\5j\66\2\u07fe\u00fd\3\2\2\2\u07ff"+
		"\u0800\5j\66\2\u0800\u00ff\3\2\2\2\u0801\u0802\5j\66\2\u0802\u0803\7\u0199"+
		"\2\2\u0803\u0805\3\2\2\2\u0804\u0801\3\2\2\2\u0804\u0805\3\2\2\2\u0805"+
		"\u0806\3\2\2\2\u0806\u0807\5j\66\2\u0807\u0101\3\2\2\2\u0808\u080d\5\u0104"+
		"\u0083\2\u0809\u080a\7\u019b\2\2\u080a\u080c\5\u0104\u0083\2\u080b\u0809"+
		"\3\2\2\2\u080c\u080f\3\2\2\2\u080d\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080e"+
		"\u0103\3\2\2\2\u080f\u080d\3\2\2\2\u0810\u0812\7\u0118\2\2\u0811\u0810"+
		"\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0815\3\2\2\2\u0813\u0816\5\u0108\u0085"+
		"\2\u0814\u0816\5\u00f2z\2\u0815\u0813\3\2\2\2\u0815\u0814\3\2\2\2\u0816"+
		"\u082a\3\2\2\2\u0817\u0819\7\u0190\2\2\u0818\u0817\3\2\2\2\u0818\u0819"+
		"\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u081d\7\u0118\2\2\u081b\u081e\5\u0108"+
		"\u0085\2\u081c\u081e\5\u00f2z\2\u081d\u081b\3\2\2\2\u081d\u081c\3\2\2"+
		"\2\u081e\u082a\3\2\2\2\u081f\u0821\7\u0190\2\2\u0820\u081f\3\2\2\2\u0820"+
		"\u0821\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0823\7\"\2\2\u0823\u082a\5";
	private static final String _serializedATNSegment1 =
		"\u0108\u0085\2\u0824\u0826\7\u0190\2\2\u0825\u0824\3\2\2\2\u0825\u0826"+
		"\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0828\7\u0119\2\2\u0828\u082a\5j\66"+
		"\2\u0829\u0811\3\2\2\2\u0829\u0818\3\2\2\2\u0829\u0820\3\2\2\2\u0829\u0825"+
		"\3\2\2\2\u082a\u0105\3\2\2\2\u082b\u083e\t\4\2\2\u082c\u083f\3\2\2\2\u082d"+
		"\u0831\7\u0151\2\2\u082e\u082f\5\u0124\u0093\2\u082f\u0830\7\u0199\2\2"+
		"\u0830\u0832\3\2\2\2\u0831\u082e\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0833"+
		"\3\2\2\2\u0833\u0835\5\u00fe\u0080\2\u0834\u0836\5\u00e4s\2\u0835\u0834"+
		"\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u083f\3\2\2\2\u0837\u0838\7\u0151\2"+
		"\2\u0838\u0839\7\u0084\2\2\u0839\u083c\5\u010e\u0088\2\u083a\u083b\7\'"+
		"\2\2\u083b\u083d\5\u0124\u0093\2\u083c\u083a\3\2\2\2\u083c\u083d\3\2\2"+
		"\2\u083d\u083f\3\2\2\2\u083e\u082c\3\2\2\2\u083e\u082d\3\2\2\2\u083e\u0837"+
		"\3\2\2\2\u083f\u0107\3\2\2\2\u0840\u0841\5j\66\2\u0841\u0109\3\2\2\2\u0842"+
		"\u0847\5\u010c\u0087\2\u0843\u0844\7\u019d\2\2\u0844\u0845\5\u011c\u008f"+
		"\2\u0845\u0846\7\u019e\2\2\u0846\u0848\3\2\2\2\u0847\u0843\3\2\2\2\u0847"+
		"\u0848\3\2\2\2\u0848\u010b\3\2\2\2\u0849\u084c\5j\66\2\u084a\u084c\7)"+
		"\2\2\u084b\u0849\3\2\2\2\u084b\u084a\3\2\2\2\u084c\u010d\3\2\2\2\u084d"+
		"\u084f\7\67\2\2\u084e\u084d\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0850\3"+
		"\2\2\2\u0850\u0855\5\u01f2\u00fa\2\u0851\u0852\7\u019d\2\2\u0852\u0853"+
		"\5\u011c\u008f\2\u0853\u0854\7\u019e\2\2\u0854\u0856\3\2\2\2\u0855\u0851"+
		"\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0858\3\2\2\2\u0857\u0859\5\u025c\u012f"+
		"\2\u0858\u0857\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085e\3\2\2\2\u085a\u085b"+
		"\5\u00fa~\2\u085b\u085c\5\u00f8}\2\u085c\u085e\3\2\2\2\u085d\u084e\3\2"+
		"\2\2\u085d\u085a\3\2\2\2\u085e\u010f\3\2\2\2\u085f\u0870\5\u0246\u0124"+
		"\2\u0860\u0862\7\u01aa\2\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862"+
		"\u0863\3\2\2\2\u0863\u086c\5j\66\2\u0864\u0866\t\t\2\2\u0865\u0864\3\2"+
		"\2\2\u0866\u0867\3\2\2\2\u0867\u0865\3\2\2\2\u0867\u0868\3\2\2\2\u0868"+
		"\u0869\3\2\2\2\u0869\u086b\5j\66\2\u086a\u0865\3\2\2\2\u086b\u086e\3\2"+
		"\2\2\u086c\u086a\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u0870\3\2\2\2\u086e"+
		"\u086c\3\2\2\2\u086f\u085f\3\2\2\2\u086f\u0861\3\2\2\2\u0870\u0111\3\2"+
		"\2\2\u0871\u0872\7\u011f\2\2\u0872\u0873\7\u00fc\2\2\u0873\u0874\7\u0107"+
		"\2\2\u0874\u0113\3\2\2\2\u0875\u0876\7\u00aa\2\2\u0876\u0877\7\u011f\2"+
		"\2\u0877\u0878\7\u00fc\2\2\u0878\u0115\3\2\2\2\u0879\u087a\7\u00aa\2\2"+
		"\u087a\u087b\7\u00d1\2\2\u087b\u087c\7\u00fc\2\2\u087c\u0117\3\2\2\2\u087d"+
		"\u087e\7\u00d1\2\2\u087e\u087f\7\u00fc\2\2\u087f\u0880\7\u0107\2\2\u0880"+
		"\u0119\3\2\2\2\u0881\u0882\7\u01c3\2\2\u0882\u011b\3\2\2\2\u0883\u0888"+
		"\5\u011e\u0090\2\u0884\u0885\7\u019b\2\2\u0885\u0887\5\u011e\u0090\2\u0886"+
		"\u0884\3\2\2\2\u0887\u088a\3\2\2\2\u0888\u0886\3\2\2\2\u0888\u0889\3\2"+
		"\2\2\u0889\u011d\3\2\2\2\u088a\u0888\3\2\2\2\u088b\u088c\5j\66\2\u088c"+
		"\u011f\3\2\2\2\u088d\u0893\7\u01c5\2\2\u088e\u0893\5\u0264\u0133\2\u088f"+
		"\u0893\5\u0268\u0135\2\u0890\u0893\5f\64\2\u0891\u0893\5\u026a\u0136\2"+
		"\u0892\u088d\3\2\2\2\u0892\u088e\3\2\2\2\u0892\u088f\3\2\2\2\u0892\u0890"+
		"\3\2\2\2\u0892\u0891\3\2\2\2\u0893\u0121\3\2\2\2\u0894\u0895\7\u01ac\2"+
		"\2\u0895\u0896\5j\66\2\u0896\u0123\3\2\2\2\u0897\u0898\5j\66\2\u0898\u0125"+
		"\3\2\2\2\u0899\u089a\7U\2\2\u089a\u089b\7\67\2\2\u089b\u089d\5\u01f2\u00fa"+
		"\2\u089c\u089e\5\u025c\u012f\2\u089d\u089c\3\2\2\2\u089d\u089e\3\2\2\2"+
		"\u089e\u089f\3\2\2\2\u089f\u08a0\5\u0128\u0095\2\u08a0\u0127\3\2\2\2\u08a1"+
		"\u08a7\5\u012a\u0096\2\u08a2\u08a7\5\u012c\u0097\2\u08a3\u08a7\5\u012e"+
		"\u0098\2\u08a4\u08a7\5\u0132\u009a\2\u08a5\u08a7\5\u0134\u009b\2\u08a6"+
		"\u08a1\3\2\2\2\u08a6\u08a2\3\2\2\2\u08a6\u08a3\3\2\2\2\u08a6\u08a4\3\2"+
		"\2\2\u08a6\u08a5\3\2\2\2\u08a7\u0129\3\2\2\2\u08a8\u08a9\7\u00f0\2\2\u08a9"+
		"\u012b\3\2\2\2\u08aa\u08ab\7\u0170\2\2\u08ab\u08ac\7\u0171\2\2\u08ac\u012d"+
		"\3\2\2\2\u08ad\u08ae\7\u0122\2\2\u08ae\u08af\5\u0130\u0099\2\u08af\u012f"+
		"\3\2\2\2\u08b0\u08b1\t\n\2\2\u08b1\u0131\3\2\2\2\u08b2\u08b3\7\5\2\2\u08b3"+
		"\u0133\3\2\2\2\u08b4\u08b5\7\u018c\2\2\u08b5\u0135\3\2\2\2\u08b6\u08bc"+
		"\5\u013a\u009e\2\u08b7\u08bc\5\u013c\u009f\2\u08b8\u08bc\5\u013e\u00a0"+
		"\2\u08b9\u08bc\5\u0140\u00a1\2\u08ba\u08bc\5\u0138\u009d\2\u08bb\u08b6"+
		"\3\2\2\2\u08bb\u08b7\3\2\2\2\u08bb\u08b8\3\2\2\2\u08bb\u08b9\3\2\2\2\u08bb"+
		"\u08ba\3\2\2\2\u08bc\u0137\3\2\2\2\u08bd\u08be\t\4\2\2\u08be\u08bf\7\u00cf"+
		"\2\2\u08bf\u08c0\5\u01f0\u00f9\2\u08c0\u0139\3\2\2\2\u08c1\u08c2\t\4\2"+
		"\2\u08c2\u08c4\5\u01f2\u00fa\2\u08c3\u08c5\5\u025c\u012f\2\u08c4\u08c3"+
		"\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u013b\3\2\2\2\u08c6\u08c7\t\4\2\2\u08c7"+
		"\u08c8\7\u00a4\2\2\u08c8\u08ca\5\u01f2\u00fa\2\u08c9\u08cb\5\u025c\u012f"+
		"\2\u08ca\u08c9\3\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u013d\3\2\2\2\u08cc\u08cd"+
		"\t\4\2\2\u08cd\u08cf\7\u014c\2\2\u08ce\u08d0\7\u00a4\2\2\u08cf\u08ce\3"+
		"\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d2\5\u0124\u0093"+
		"\2\u08d2\u013f\3\2\2\2\u08d3\u08d4\t\4\2\2\u08d4\u08d5\7\23\2\2\u08d5"+
		"\u08d6\5\u0090I\2\u08d6\u0141\3\2\2\2\u08d7\u08dd\5\u014c\u00a7\2\u08d8"+
		"\u08dd\5\u0148\u00a5\2\u08d9\u08dd\5\u014a\u00a6\2\u08da\u08dd\5\u0146"+
		"\u00a4\2\u08db\u08dd\5\u0144\u00a3\2\u08dc\u08d7\3\2\2\2\u08dc\u08d8\3"+
		"\2\2\2\u08dc\u08d9\3\2\2\2\u08dc\u08da\3\2\2\2\u08dc\u08db\3\2\2\2\u08dd"+
		"\u0143\3\2\2\2\u08de\u08df\7>\2\2\u08df\u08e0\7S\2\2\u08e0\u08e1\7\67"+
		"\2\2\u08e1\u08e2\5\u01f2\u00fa\2\u08e2\u0145\3\2\2\2\u08e3\u08e4\7>\2"+
		"\2\u08e4\u08e7\7\u00d0\2\2\u08e5\u08e6\t\13\2\2\u08e6\u08e8\5j\66\2\u08e7"+
		"\u08e5\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08eb\3\2\2\2\u08e9\u08ea\7\33"+
		"\2\2\u08ea\u08ec\5\u0150\u00a9\2\u08eb\u08e9\3\2\2\2\u08eb\u08ec\3\2\2"+
		"\2\u08ec\u0147\3\2\2\2\u08ed\u08ee\7>\2\2\u08ee\u08ef\7\66\2\2\u08ef\u08f1"+
		"\5\u01f2\u00fa\2\u08f0\u08f2\5\u025c\u012f\2\u08f1\u08f0\3\2\2\2\u08f1"+
		"\u08f2\3\2\2\2\u08f2\u0149\3\2\2\2\u08f3\u08f4\7>\2\2\u08f4\u08f7\7\22"+
		"\2\2\u08f5\u08f6\7\'\2\2\u08f6\u08f8\5\u014e\u00a8\2\u08f7\u08f5\3\2\2"+
		"\2\u08f7\u08f8\3\2\2\2\u08f8\u08fb\3\2\2\2\u08f9\u08fa\7a\2\2\u08fa\u08fc"+
		"\5\u014e\u00a8\2\u08fb\u08f9\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fe\3"+
		"\2\2\2\u08fd\u08ff\7\u01bb\2\2\u08fe\u08fd\3\2\2\2\u08fe\u08ff\3\2\2\2"+
		"\u08ff\u014b\3\2\2\2\u0900\u0901\7>\2\2\u0901\u0908\78\2\2\u0902\u0903"+
		"\t\13\2\2\u0903\u0906\5j\66\2\u0904\u0905\7\u0199\2\2\u0905\u0907\5j\66"+
		"\2\u0906\u0904\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0909\3\2\2\2\u0908\u0902"+
		"\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090c\3\2\2\2\u090a\u090b\7\33\2\2"+
		"\u090b\u090d\5\u0150\u00a9\2\u090c\u090a\3\2\2\2\u090c\u090d\3\2\2\2\u090d"+
		"\u014d\3\2\2\2\u090e\u0911\5\u0246\u0124\2\u090f\u0911\5\u0260\u0131\2"+
		"\u0910\u090e\3\2\2\2\u0910\u090f\3\2\2\2\u0911\u014f\3\2\2\2\u0912\u0915"+
		"\5j\66\2\u0913\u0915\5\u0244\u0123\2\u0914\u0912\3\2\2\2\u0914\u0913\3"+
		"\2\2\2\u0915\u0151\3\2\2\2\u0916\u091a\5\u0158\u00ad\2\u0917\u091a\5\u015a"+
		"\u00ae\2\u0918\u091a\3\2\2\2\u0919\u0916\3\2\2\2\u0919\u0917\3\2\2\2\u0919"+
		"\u0918\3\2\2\2\u091a\u0153\3\2\2\2\u091b\u091c\7\u00ea\2\2\u091c\u091f"+
		"\5\u0246\u0124\2\u091d\u091f\3\2\2\2\u091e\u091b\3\2\2\2\u091e\u091d\3"+
		"\2\2\2\u091f\u0155\3\2\2\2\u0920\u0921\7\u00eb\2\2\u0921\u0924\5\u0246"+
		"\u0124\2\u0922\u0924\3\2\2\2\u0923\u0920\3\2\2\2\u0923\u0922\3\2\2\2\u0924"+
		"\u0157\3\2\2\2\u0925\u0926\7|\2\2\u0926\u0927\7~\2\2\u0927\u0928\7\u00a9"+
		"\2\2\u0928\u092c\5\u0246\u0124\2\u0929\u092a\7\u00aa\2\2\u092a\u092b\7"+
		"\u00ac\2\2\u092b\u092d\5\u015e\u00b0\2\u092c\u0929\3\2\2\2\u092c\u092d"+
		"\3\2\2\2\u092d\u0159\3\2\2\2\u092e\u092f\7|\2\2\u092f\u0930\7~\2\2\u0930"+
		"\u0932\7\177\2\2\u0931\u0933\5\u0166\u00b4\2\u0932\u0931\3\2\2\2\u0932"+
		"\u0933\3\2\2\2\u0933\u0935\3\2\2\2\u0934\u0936\5\u0168\u00b5\2\u0935\u0934"+
		"\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0938\3\2\2\2\u0937\u0939\5\u016a\u00b6"+
		"\2\u0938\u0937\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u093b\3\2\2\2\u093a\u093c"+
		"\5\u016c\u00b7\2\u093b\u093a\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u093e\3"+
		"\2\2\2\u093d\u093f\5\u016e\u00b8\2\u093e\u093d\3\2\2\2\u093e\u093f\3\2"+
		"\2\2\u093f\u015b\3\2\2\2\u0940\u0943\5\u015a\u00ae\2\u0941\u0943\5\u0158"+
		"\u00ad\2\u0942\u0940\3\2\2\2\u0942\u0941\3\2\2\2\u0943\u015d\3\2\2\2\u0944"+
		"\u0945\7\u019d\2\2\u0945\u0946\5\u0160\u00b1\2\u0946\u0947\7\u019e\2\2"+
		"\u0947\u015f\3\2\2\2\u0948\u094d\5\u0162\u00b2\2\u0949\u094a\7\u019b\2"+
		"\2\u094a\u094c\5\u0162\u00b2\2\u094b\u0949\3\2\2\2\u094c\u094f\3\2\2\2"+
		"\u094d\u094b\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u0161\3\2\2\2\u094f\u094d"+
		"\3\2\2\2\u0950\u0951\5\u0244\u0123\2\u0951\u0952\7\u01a3\2\2\u0952\u0953"+
		"\5\u0244\u0123\2\u0953\u0163\3\2\2\2\u0954\u0959\5\u0162\u00b2\2\u0955"+
		"\u0956\7\u019b\2\2\u0956\u0958\5\u0162\u00b2\2\u0957\u0955\3\2\2\2\u0958"+
		"\u095b\3\2\2\2\u0959\u0957\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u0165\3\2"+
		"\2\2\u095b\u0959\3\2\2\2\u095c\u095d\7\u0080\2\2\u095d\u095e\7\u0081\2"+
		"\2\u095e\u095f\7$\2\2\u095f\u0963\5\u0246\u0124\2\u0960\u0961\7\u0082"+
		"\2\2\u0961\u0962\7$\2\2\u0962\u0964\5\u0246\u0124\2\u0963\u0960\3\2\2"+
		"\2\u0963\u0964\3\2\2\2\u0964\u0167\3\2\2\2\u0965\u0966\7\u0083\2\2\u0966"+
		"\u0967\7\u0084\2\2\u0967\u0968\7\u0081\2\2\u0968\u0969\7$\2\2\u0969\u096a"+
		"\5\u0246\u0124\2\u096a\u0169\3\2\2\2\u096b\u096c\7t\2\2\u096c\u096d\7"+
		"\u0085\2\2\u096d\u096e\7\u0081\2\2\u096e\u096f\7$\2\2\u096f\u0970\5\u0246"+
		"\u0124\2\u0970\u016b\3\2\2\2\u0971\u0972\7\u0087\2\2\u0972\u0973\7\u0081"+
		"\2\2\u0973\u0974\7$\2\2\u0974\u0975\5\u0246\u0124\2\u0975\u016d\3\2\2"+
		"\2\u0976\u0977\7R\2\2\u0977\u0978\7\u00b6\2\2\u0978\u0979\7(\2\2\u0979"+
		"\u097a\5\u0246\u0124\2\u097a\u016f\3\2\2\2\u097b\u0980\5\u017a\u00be\2"+
		"\u097c\u097d\7\u019b\2\2\u097d\u097f\5\u017a\u00be\2\u097e\u097c\3\2\2"+
		"\2\u097f\u0982\3\2\2\2\u0980\u097e\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0171"+
		"\3\2\2\2\u0982\u0980\3\2\2\2\u0983\u0988\5\u017c\u00bf\2\u0984\u0985\7"+
		"\u019b\2\2\u0985\u0987\5\u017c\u00bf\2\u0986\u0984\3\2\2\2\u0987\u098a"+
		"\3\2\2\2\u0988\u0986\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u0173\3\2\2\2\u098a"+
		"\u0988\3\2\2\2\u098b\u0990\5\u0176\u00bc\2\u098c\u098d\7\u019b\2\2\u098d"+
		"\u098f\5\u0176\u00bc\2\u098e\u098c\3\2\2\2\u098f\u0992\3\2\2\2\u0990\u098e"+
		"\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0175\3\2\2\2\u0992\u0990\3\2\2\2\u0993"+
		"\u0996\5j\66\2\u0994\u0995\7b\2\2\u0995\u0997\5\u0246\u0124\2\u0996\u0994"+
		"\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0177\3\2\2\2\u0998\u099b\5\u008eH"+
		"\2\u0999\u099c\7\36\2\2\u099a\u099c\7\37\2\2\u099b\u0999\3\2\2\2\u099b"+
		"\u099a\3\2\2\2\u099b\u099c\3\2\2\2\u099c\u09a2\3\2\2\2\u099d\u09a0\7Z"+
		"\2\2\u099e\u09a1\7X\2\2\u099f\u09a1\7Y\2\2\u09a0\u099e\3\2\2\2\u09a0\u099f"+
		"\3\2\2\2\u09a1\u09a3\3\2\2\2\u09a2\u099d\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3"+
		"\u0179\3\2\2\2\u09a4\u09a5\5j\66\2\u09a5\u09a8\5\u017e\u00c0\2\u09a6\u09a7"+
		"\7b\2\2\u09a7\u09a9\5\u0246\u0124\2\u09a8\u09a6\3\2\2\2\u09a8\u09a9\3"+
		"\2\2\2\u09a9\u017b\3\2\2\2\u09aa\u09ab\5j\66\2\u09ab\u09ac\7\u019a\2\2"+
		"\u09ac\u09af\5\u0188\u00c5\2\u09ad\u09ae\7b\2\2\u09ae\u09b0\5\u0246\u0124"+
		"\2\u09af\u09ad\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u017d\3\2\2\2\u09b1\u09b2"+
		"\5\u0184\u00c3\2\u09b2\u017f\3\2\2\2\u09b3\u09b8\5\u017e\u00c0\2\u09b4"+
		"\u09b5\7\u019b\2\2\u09b5\u09b7\5\u017e\u00c0\2\u09b6\u09b4\3\2\2\2\u09b7"+
		"\u09ba\3\2\2\2\u09b8\u09b6\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u0181\3\2"+
		"\2\2\u09ba\u09b8\3\2\2\2\u09bb\u09be\5\u0184\u00c3\2\u09bc\u09be\7\u0181"+
		"\2\2\u09bd\u09bb\3\2\2\2\u09bd\u09bc\3\2\2\2\u09be\u0183\3\2\2\2\u09bf"+
		"\u09c5\5\u0186\u00c4\2\u09c0\u09c5\5\u018c\u00c7\2\u09c1\u09c5\5\u018e"+
		"\u00c8\2\u09c2\u09c5\5\u0190\u00c9\2\u09c3\u09c5\5\u0192\u00ca\2\u09c4"+
		"\u09bf\3\2\2\2\u09c4\u09c0\3\2\2\2\u09c4\u09c1\3\2\2\2\u09c4\u09c2\3\2"+
		"\2\2\u09c4\u09c3\3\2\2\2\u09c5\u0185\3\2\2\2\u09c6\u09e5\7d\2\2\u09c7"+
		"\u09e5\7e\2\2\u09c8\u09e5\7f\2\2\u09c9\u09e5\7g\2\2\u09ca\u09e5\7c\2\2"+
		"\u09cb\u09e5\7h\2\2\u09cc\u09e5\7i\2\2\u09cd\u09e5\7j\2\2\u09ce\u09e5"+
		"\7k\2\2\u09cf\u09e5\7l\2\2\u09d0\u09e5\7o\2\2\u09d1\u09e5\7\u00e5\2\2"+
		"\u09d2\u09da\7n\2\2\u09d3\u09d4\7\u019d\2\2\u09d4\u09d7\7\u01c3\2\2\u09d5"+
		"\u09d6\7\u019b\2\2\u09d6\u09d8\7\u01c3\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8"+
		"\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09db\7\u019e\2\2\u09da\u09d3\3\2\2"+
		"\2\u09da\u09db\3\2\2\2\u09db\u09e5\3\2\2\2\u09dc\u09dd\7q\2\2\u09dd\u09de"+
		"\7\u019d\2\2\u09de\u09df\7\u01c3\2\2\u09df\u09e5\7\u019e\2\2\u09e0\u09e1"+
		"\7p\2\2\u09e1\u09e2\7\u019d\2\2\u09e2\u09e3\7\u01c3\2\2\u09e3\u09e5\7"+
		"\u019e\2\2\u09e4\u09c6\3\2\2\2\u09e4\u09c7\3\2\2\2\u09e4\u09c8\3\2\2\2"+
		"\u09e4\u09c9\3\2\2\2\u09e4\u09ca\3\2\2\2\u09e4\u09cb\3\2\2\2\u09e4\u09cc"+
		"\3\2\2\2\u09e4\u09cd\3\2\2\2\u09e4\u09ce\3\2\2\2\u09e4\u09cf\3\2\2\2\u09e4"+
		"\u09d0\3\2\2\2\u09e4\u09d1\3\2\2\2\u09e4\u09d2\3\2\2\2\u09e4\u09dc\3\2"+
		"\2\2\u09e4\u09e0\3\2\2\2\u09e5\u0187\3\2\2\2\u09e6\u09e9\5\u0184\u00c3"+
		"\2\u09e7\u09e9\5b\62\2\u09e8\u09e6\3\2\2\2\u09e8\u09e7\3\2\2\2\u09e9\u0189"+
		"\3\2\2\2\u09ea\u09ed\5\u0186\u00c4\2\u09eb\u09ed\5b\62\2\u09ec\u09ea\3"+
		"\2\2\2\u09ec\u09eb\3\2\2\2\u09ed\u018b\3\2\2\2\u09ee\u09ef\7r\2\2\u09ef"+
		"\u09f0\7\u01a7\2\2\u09f0\u09f1\5\u0188\u00c5\2\u09f1\u09f2\7\u01a9\2\2"+
		"\u09f2\u018d\3\2\2\2\u09f3\u09f4\7s\2\2\u09f4\u09f5\7\u01a7\2\2\u09f5"+
		"\u09f6\5\u0172\u00ba\2\u09f6\u09f7\7\u01a9\2\2\u09f7\u018f\3\2\2\2\u09f8"+
		"\u09f9\7t\2\2\u09f9\u09fa\7\u01a7\2\2\u09fa\u09fb\5\u018a\u00c6\2\u09fb"+
		"\u09fc\7\u019b\2\2\u09fc\u09fd\5\u0188\u00c5\2\u09fd\u09fe\7\u01a9\2\2"+
		"\u09fe\u0191\3\2\2\2\u09ff\u0a00\7u\2\2\u0a00\u0a01\7\u01a7\2\2\u0a01"+
		"\u0a02\5\u0180\u00c1\2\u0a02\u0a03\7\u01a9\2\2\u0a03\u0193\3\2\2\2\u0a04"+
		"\u0a05\7H\2\2\u0a05\u0a17\7\26\2\2\u0a06\u0a08\7H\2\2\u0a07\u0a09\7*\2"+
		"\2\u0a08\u0a07\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a17\3\2\2\2\u0a0a\u0a0b"+
		"\7\u00c9\2\2\u0a0b\u0a17\7\26\2\2\u0a0c\u0a0e\7\u00c9\2\2\u0a0d\u0a0f"+
		"\7*\2\2\u0a0e\u0a0d\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f\u0a17\3\2\2\2\u0a10"+
		"\u0a11\t\f\2\2\u0a11\u0a17\7\26\2\2\u0a12\u0a14\t\f\2\2\u0a13\u0a15\7"+
		"*\2\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a17\3\2\2\2\u0a16"+
		"\u0a04\3\2\2\2\u0a16\u0a06\3\2\2\2\u0a16\u0a0a\3\2\2\2\u0a16\u0a0c\3\2"+
		"\2\2\u0a16\u0a10\3\2\2\2\u0a16\u0a12\3\2\2\2\u0a17\u0195\3\2\2\2\u0a18"+
		"\u0a19\7\u00aa\2\2\u0a19\u0a1e\5\f\7\2\u0a1a\u0a1b\7\u019b\2\2\u0a1b\u0a1d"+
		"\5\f\7\2\u0a1c\u0a1a\3\2\2\2\u0a1d\u0a20\3\2\2\2\u0a1e\u0a1c\3\2\2\2\u0a1e"+
		"\u0a1f\3\2\2\2\u0a1f\u0197\3\2\2\2\u0a20\u0a1e\3\2\2\2\u0a21\u0a23\7)"+
		"\2\2\u0a22\u0a24\5\u019e\u00d0\2\u0a23\u0a22\3\2\2\2\u0a23\u0a24\3\2\2"+
		"\2\u0a24\u0a2c\3\2\2\2\u0a25\u0a28\7\26\2\2\u0a26\u0a28\7*\2\2\u0a27\u0a25"+
		"\3\2\2\2\u0a27\u0a26\3\2\2\2\u0a27\u0a28\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29"+
		"\u0a2d\5\u019a\u00ce\2\u0a2a\u0a2b\7C\2\2\u0a2b\u0a2d\5\u019c\u00cf\2"+
		"\u0a2c\u0a27\3\2\2\2\u0a2c\u0a2a\3\2\2\2\u0a2d\u0a30\3\2\2\2\u0a2e\u0a30"+
		"\5\u01bc\u00df\2\u0a2f\u0a21\3\2\2\2\u0a2f\u0a2e\3\2\2\2\u0a30\u0199\3"+
		"\2\2\2\u0a31\u0a36\5\u01ba\u00de\2\u0a32\u0a33\7\u019b\2\2\u0a33\u0a35"+
		"\5\u01ba\u00de\2\u0a34\u0a32\3\2\2\2\u0a35\u0a38\3\2\2\2\u0a36\u0a34\3"+
		"\2\2\2\u0a36\u0a37\3\2\2\2\u0a37\u019b\3\2\2\2\u0a38\u0a36\3\2\2\2\u0a39"+
		"\u0a3a\7\u019d\2\2\u0a3a\u0a3b\5\u01c0\u00e1\2\u0a3b\u0a3d\7\u019e\2\2"+
		"\u0a3c\u0a3e\5\u015c\u00af\2\u0a3d\u0a3c\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e"+
		"\u0a3f\3\2\2\2\u0a3f\u0a40\5\u0156\u00ac\2\u0a40\u0a41\7D\2\2\u0a41\u0a4b"+
		"\5\u0246\u0124\2\u0a42\u0a43\7\u0159\2\2\u0a43\u0a48\5\u0246\u0124\2\u0a44"+
		"\u0a45\7\u019b\2\2\u0a45\u0a47\5\u0246\u0124\2\u0a46\u0a44\3\2\2\2\u0a47"+
		"\u0a4a\3\2\2\2\u0a48\u0a46\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a4c\3\2"+
		"\2\2\u0a4a\u0a48\3\2\2\2\u0a4b\u0a42\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c"+
		"\u0a5b\3\2\2\2\u0a4d\u0a59\7(\2\2\u0a4e\u0a51\7\u019d\2\2\u0a4f\u0a52"+
		"\5\u01d2\u00ea\2\u0a50\u0a52\5\u0170\u00b9\2\u0a51\u0a4f\3\2\2\2\u0a51"+
		"\u0a50\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a54\7\u019e\2\2\u0a54\u0a5a"+
		"\3\2\2\2\u0a55\u0a58\5\u01d2\u00ea\2\u0a56\u0a58\5\u0170\u00b9\2\u0a57"+
		"\u0a55\3\2\2\2\u0a57\u0a56\3\2\2\2\u0a58\u0a5a\3\2\2\2\u0a59\u0a4e\3\2"+
		"\2\2\u0a59\u0a57\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a4d\3\2\2\2\u0a5b"+
		"\u0a5c\3\2\2\2\u0a5c\u0a5e\3\2\2\2\u0a5d\u0a5f\5\u015c\u00af\2\u0a5e\u0a5d"+
		"\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a61\5\u0154\u00ab"+
		"\2\u0a61\u019d\3\2\2\2\u0a62\u0a63\7\u01ca\2\2\u0a63\u0a64\5\u01a0\u00d1"+
		"\2\u0a64\u0a65\7\u01ad\2\2\u0a65\u0a66\7\u01aa\2\2\u0a66\u019f\3\2\2\2"+
		"\u0a67\u0a6c\5\u01a2\u00d2\2\u0a68\u0a69\7\u019b\2\2\u0a69\u0a6b\5\u01a2"+
		"\u00d2\2\u0a6a\u0a68\3\2\2\2\u0a6b\u0a6e\3\2\2\2\u0a6c\u0a6a\3\2\2\2\u0a6c"+
		"\u0a6d\3\2\2\2\u0a6d\u01a1\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6f\u0a7b\5\u01a6"+
		"\u00d4\2\u0a70\u0a7b\5\u01a8\u00d5\2\u0a71\u0a7b\5\u01aa\u00d6\2\u0a72"+
		"\u0a7b\5\u01a4\u00d3\2\u0a73\u0a78\5\u01b4\u00db\2\u0a74\u0a75\7\u019d"+
		"\2\2\u0a75\u0a76\5\u01b6\u00dc\2\u0a76\u0a77\7\u019e\2\2\u0a77\u0a79\3"+
		"\2\2\2\u0a78\u0a74\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7b\3\2\2\2\u0a7a"+
		"\u0a6f\3\2\2\2\u0a7a\u0a70\3\2\2\2\u0a7a\u0a71\3\2\2\2\u0a7a\u0a72\3\2"+
		"\2\2\u0a7a\u0a73\3\2\2\2\u0a7b\u01a3\3\2\2\2\u0a7c\u0a7d\7\u00be\2\2\u0a7d"+
		"\u0a7e\7\u019d\2\2\u0a7e\u0a7f\5\u01b6\u00dc\2\u0a7f\u0a80\7\u019e\2\2"+
		"\u0a80\u01a5\3\2\2\2\u0a81\u0a86\7\u00bc\2\2\u0a82\u0a83\7\u019d\2\2\u0a83"+
		"\u0a84\5\u01b6\u00dc\2\u0a84\u0a85\7\u019e\2\2\u0a85\u0a87\3\2\2\2\u0a86"+
		"\u0a82\3\2\2\2\u0a86\u0a87\3\2\2\2\u0a87\u01a7\3\2\2\2\u0a88\u0a8d\7\u00bd"+
		"\2\2\u0a89\u0a8a\7\u019d\2\2\u0a8a\u0a8b\5\u01ac\u00d7\2\u0a8b\u0a8c\7"+
		"\u019e\2\2\u0a8c\u0a8e\3\2\2\2\u0a8d\u0a89\3\2\2\2\u0a8d\u0a8e\3\2\2\2"+
		"\u0a8e\u01a9\3\2\2\2\u0a8f\u0a93\7\u017d\2\2\u0a90\u0a91\7\u019d\2\2\u0a91"+
		"\u0a92\7\u01c3\2\2\u0a92\u0a94\7\u019e\2\2\u0a93\u0a90\3\2\2\2\u0a93\u0a94"+
		"\3\2\2\2\u0a94\u01ab\3\2\2\2\u0a95\u0a9a\5\u01ae\u00d8\2\u0a96\u0a97\7"+
		"\u019b\2\2\u0a97\u0a99\5\u01ae\u00d8\2\u0a98\u0a96\3\2\2\2\u0a99\u0a9c"+
		"\3\2\2\2\u0a9a\u0a98\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u01ad\3\2\2\2\u0a9c"+
		"\u0a9a\3\2\2\2\u0a9d\u0aaf\5j\66\2\u0a9e\u0aac\5\u01b0\u00d9\2\u0a9f\u0aa0"+
		"\7\u019d\2\2\u0aa0\u0aa5\5\u01b2\u00da\2\u0aa1\u0aa2\7\u019b\2\2\u0aa2"+
		"\u0aa4\5\u01b2\u00da\2\u0aa3\u0aa1\3\2\2\2\u0aa4\u0aa7\3\2\2\2\u0aa5\u0aa3"+
		"\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa8\3\2\2\2\u0aa7\u0aa5\3\2\2\2\u0aa8"+
		"\u0aa9\7\u019e\2\2\u0aa9\u0aab\3\2\2\2\u0aaa\u0a9f\3\2\2\2\u0aab\u0aae"+
		"\3\2\2\2\u0aac\u0aaa\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u0ab0\3\2\2\2\u0aae"+
		"\u0aac\3\2\2\2\u0aaf\u0a9e\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u01af\3\2"+
		"\2\2\u0ab1\u0ab2\7\u019d\2\2\u0ab2\u0ab7\5j\66\2\u0ab3\u0ab4\7\u019b\2"+
		"\2\u0ab4\u0ab6\5j\66\2\u0ab5\u0ab3\3\2\2\2\u0ab6\u0ab9\3\2\2\2\u0ab7\u0ab5"+
		"\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0aba\3\2\2\2\u0ab9\u0ab7\3\2\2\2\u0aba"+
		"\u0abb\7\u019e\2\2\u0abb\u01b1\3\2\2\2\u0abc\u0abd\7\u019d\2\2\u0abd\u0ac2"+
		"\5\u0242\u0122\2\u0abe\u0abf\7\u019b\2\2\u0abf\u0ac1\5\u0242\u0122\2\u0ac0"+
		"\u0abe\3\2\2\2\u0ac1\u0ac4\3\2\2\2\u0ac2\u0ac0\3\2\2\2\u0ac2\u0ac3\3\2"+
		"\2\2\u0ac3\u0ac5\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac5\u0ac6\7\u019e\2\2\u0ac6"+
		"\u01b3\3\2\2\2\u0ac7\u0acb\7\u00bf\2\2\u0ac8\u0acb\7\u00c0\2\2\u0ac9\u0acb"+
		"\5j\66\2\u0aca\u0ac7\3\2\2\2\u0aca\u0ac8\3\2\2\2\u0aca\u0ac9\3\2\2\2\u0acb"+
		"\u01b5\3\2\2\2\u0acc\u0ad1\5\u01b8\u00dd\2\u0acd\u0ace\7\u019b\2\2\u0ace"+
		"\u0ad0\5\u01b8\u00dd\2\u0acf\u0acd\3\2\2\2\u0ad0\u0ad3\3\2\2\2\u0ad1\u0acf"+
		"\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u01b7\3\2\2\2\u0ad3\u0ad1\3\2\2\2\u0ad4"+
		"\u0ad5\5j\66\2\u0ad5\u01b9\3\2\2\2\u0ad6\u0aeb\5\u01ce\u00e8\2\u0ad7\u0ae8"+
		"\5\u008eH\2\u0ad8\u0ada\7(\2\2\u0ad9\u0ad8\3\2\2\2\u0ad9\u0ada\3\2\2\2"+
		"\u0ada\u0adb\3\2\2\2\u0adb\u0ae9\5l\67\2\u0adc\u0add\7(\2\2\u0add\u0ade"+
		"\7\u019d\2\2\u0ade\u0ae3\5l\67\2\u0adf\u0ae0\7\u019b\2\2\u0ae0\u0ae2\5"+
		"l\67\2\u0ae1\u0adf\3\2\2\2\u0ae2\u0ae5\3\2\2\2\u0ae3\u0ae1\3\2\2\2\u0ae3"+
		"\u0ae4\3\2\2\2\u0ae4\u0ae6\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae6\u0ae7\7\u019e"+
		"\2\2\u0ae7\u0ae9\3\2\2\2\u0ae8\u0ad9\3\2\2\2\u0ae8\u0adc\3\2\2\2\u0ae8"+
		"\u0ae9\3\2\2\2\u0ae9\u0aeb\3\2\2\2\u0aea\u0ad6\3\2\2\2\u0aea\u0ad7\3\2"+
		"\2\2\u0aeb\u01bb\3\2\2\2\u0aec\u0aed\7t\2\2\u0aed\u0af1\5\u01c0\u00e1"+
		"\2\u0aee\u0aef\7v\2\2\u0aef\u0af1\5\u01c0\u00e1\2\u0af0\u0aec\3\2\2\2"+
		"\u0af0\u0aee\3\2\2\2\u0af1\u0af2\3\2\2\2\u0af2\u0af3\5\u0152\u00aa\2\u0af3"+
		"\u0af4\5\u0156\u00ac\2\u0af4\u0af5\7D\2\2\u0af5\u0aff\5\u0246\u0124\2"+
		"\u0af6\u0af7\7\u0159\2\2\u0af7\u0afc\5\u0246\u0124\2\u0af8\u0af9\7\u019b"+
		"\2\2\u0af9\u0afb\5\u0246\u0124\2\u0afa\u0af8\3\2\2\2\u0afb\u0afe\3\2\2"+
		"\2\u0afc\u0afa\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0b00\3\2\2\2\u0afe\u0afc"+
		"\3\2\2\2\u0aff\u0af6\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0b0f\3\2\2\2\u0b01"+
		"\u0b0d\7(\2\2\u0b02\u0b05\7\u019d\2\2\u0b03\u0b06\5\u01d2\u00ea\2\u0b04"+
		"\u0b06\5\u0170\u00b9\2\u0b05\u0b03\3\2\2\2\u0b05\u0b04\3\2\2\2\u0b06\u0b07"+
		"\3\2\2\2\u0b07\u0b08\7\u019e\2\2\u0b08\u0b0e\3\2\2\2\u0b09\u0b0c\5\u01d2"+
		"\u00ea\2\u0b0a\u0b0c\5\u0170\u00b9\2\u0b0b\u0b09\3\2\2\2\u0b0b\u0b0a\3"+
		"\2\2\2\u0b0c\u0b0e\3\2\2\2\u0b0d\u0b02\3\2\2\2\u0b0d\u0b0b\3\2\2\2\u0b0e"+
		"\u0b10\3\2\2\2\u0b0f\u0b01\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b11\3\2"+
		"\2\2\u0b11\u0b12\5\u0152\u00aa\2\u0b12\u0b13\5\u0154\u00ab\2\u0b13\u01bd"+
		"\3\2\2\2\u0b14\u0b17\5\u01ce\u00e8\2\u0b15\u0b17\5\u008eH\2\u0b16\u0b14"+
		"\3\2\2\2\u0b16\u0b15\3\2\2\2\u0b17\u01bf\3\2\2\2\u0b18\u0b1d\5\u01be\u00e0"+
		"\2\u0b19\u0b1a\7\u019b\2\2\u0b1a\u0b1c\5\u01be\u00e0\2\u0b1b\u0b19\3\2"+
		"\2\2\u0b1c\u0b1f\3\2\2\2\u0b1d\u0b1b\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e"+
		"\u01c1\3\2\2\2\u0b1f\u0b1d\3\2\2\2\u0b20\u0b21\7\u0108\2\2\u0b21\u0b26"+
		"\5\u01c4\u00e3\2\u0b22\u0b23\7\u019b\2\2\u0b23\u0b25\5\u01c4\u00e3\2\u0b24"+
		"\u0b22\3\2\2\2\u0b25\u0b28\3\2\2\2\u0b26\u0b24\3\2\2\2\u0b26\u0b27\3\2"+
		"\2\2\u0b27\u01c3\3\2\2\2\u0b28\u0b26\3\2\2\2\u0b29\u0b2a\5j\66\2\u0b2a"+
		"\u0b2b\7(\2\2\u0b2b\u0b2c\5\u01c6\u00e4\2\u0b2c\u01c5\3\2\2\2\u0b2d\u0b3a"+
		"\5j\66\2\u0b2e\u0b30\7\u019d\2\2\u0b2f\u0b31\5j\66\2\u0b30\u0b2f\3\2\2"+
		"\2\u0b30\u0b31\3\2\2\2\u0b31\u0b33\3\2\2\2\u0b32\u0b34\5\u01f4\u00fb\2"+
		"\u0b33\u0b32\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b36\3\2\2\2\u0b35\u0b37"+
		"\5\u01c8\u00e5\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b38\3"+
		"\2\2\2\u0b38\u0b3a\7\u019e\2\2\u0b39\u0b2d\3\2\2\2\u0b39\u0b2e\3\2\2\2"+
		"\u0b3a\u01c7\3\2\2\2\u0b3b\u0b3c\t\r\2\2\u0b3c\u0b3e\5\u01cc\u00e7\2\u0b3d"+
		"\u0b3f\5\u01ca\u00e6\2\u0b3e\u0b3d\3\2\2\2\u0b3e\u0b3f\3\2\2\2\u0b3f\u0b49"+
		"\3\2\2\2\u0b40\u0b41\t\r\2\2\u0b41\u0b42\7\u00e3\2\2\u0b42\u0b43\5\u01cc"+
		"\u00e7\2\u0b43\u0b44\7\30\2\2\u0b44\u0b46\5\u01cc\u00e7\2\u0b45\u0b47"+
		"\5\u01ca\u00e6\2\u0b46\u0b45\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b49\3"+
		"\2\2\2\u0b48\u0b3b\3\2\2\2\u0b48\u0b40\3\2\2\2\u0b49\u01c9\3\2\2\2\u0b4a"+
		"\u0b4b\7\u0137\2\2\u0b4b\u0b4c\7\u010c\2\2\u0b4c\u0b55\7|\2\2\u0b4d\u0b4e"+
		"\7\u0137\2\2\u0b4e\u0b55\7\"\2\2\u0b4f\u0b50\7\u0137\2\2\u0b50\u0b55\7"+
		"\u0138\2\2\u0b51\u0b52\7\u0137\2\2\u0b52\u0b53\7\u0139\2\2\u0b53\u0b55"+
		"\7\u013a\2\2\u0b54\u0b4a\3\2\2\2\u0b54\u0b4d\3\2\2\2\u0b54\u0b4f\3\2\2"+
		"\2\u0b54\u0b51\3\2\2\2\u0b55\u01cb\3\2\2\2\u0b56\u0b59\7\u0109\2\2\u0b57"+
		"\u0b5a\7\u010a\2\2\u0b58\u0b5a\7\u010b\2\2\u0b59\u0b57\3\2\2\2\u0b59\u0b58"+
		"\3\2\2\2\u0b5a\u0b63\3\2\2\2\u0b5b\u0b5c\7\u010c\2\2\u0b5c\u0b63\7|\2"+
		"\2\u0b5d\u0b60\5|?\2\u0b5e\u0b61\7\u010a\2\2\u0b5f\u0b61\7\u010b\2\2\u0b60"+
		"\u0b5e\3\2\2\2\u0b60\u0b5f\3\2\2\2\u0b61\u0b63\3\2\2\2\u0b62\u0b56\3\2"+
		"\2\2\u0b62\u0b5b\3\2\2\2\u0b62\u0b5d\3\2\2\2\u0b63\u01cd\3\2\2\2\u0b64"+
		"\u0b6a\7\u01ad\2\2\u0b65\u0b66\5j\66\2\u0b66\u0b67\7\u0199\2\2\u0b67\u0b68"+
		"\7\u01ad\2\2\u0b68\u0b6a\3\2\2\2\u0b69\u0b64\3\2\2\2\u0b69\u0b65\3\2\2"+
		"\2\u0b6a\u01cf\3\2\2\2\u0b6b\u0b70\5\u008eH\2\u0b6c\u0b6d\7\u019b\2\2"+
		"\u0b6d\u0b6f\5\u008eH\2\u0b6e\u0b6c\3\2\2\2\u0b6f\u0b72\3\2\2\2\u0b70"+
		"\u0b6e\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u01d1\3\2\2\2\u0b72\u0b70\3\2"+
		"\2\2\u0b73\u0b78\5l\67\2\u0b74\u0b75\7\u019b\2\2\u0b75\u0b77\5l\67\2\u0b76"+
		"\u0b74\3\2\2\2\u0b77\u0b7a\3\2\2\2\u0b78\u0b76\3\2\2\2\u0b78\u0b79\3\2"+
		"\2\2\u0b79\u01d3\3\2\2\2\u0b7a\u0b78\3\2\2\2\u0b7b\u0b7d\7\'\2\2\u0b7c"+
		"\u0b7e\5\u019e\u00d0\2\u0b7d\u0b7c\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e\u0b7f"+
		"\3\2\2\2\u0b7f\u0b80\5\u01d6\u00ec\2\u0b80\u01d5\3\2\2\2\u0b81\u0b85\5"+
		"D#\2\u0b82\u0b84\5\u01d8\u00ed\2\u0b83\u0b82\3\2\2\2\u0b84\u0b87\3\2\2"+
		"\2\u0b85\u0b83\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b91\3\2\2\2\u0b87\u0b85"+
		"\3\2\2\2\u0b88\u0b89\5\u01de\u00f0\2\u0b89\u0b8c\5\u01da\u00ee\2\u0b8a"+
		"\u0b8b\7\u019b\2\2\u0b8b\u0b8d\5\u01da\u00ee\2\u0b8c\u0b8a\3\2\2\2\u0b8d"+
		"\u0b8e\3\2\2\2\u0b8e\u0b8c\3\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b91\3\2"+
		"\2\2\u0b90\u0b81\3\2\2\2\u0b90\u0b88\3\2\2\2\u0b91\u01d7\3\2\2\2\u0b92"+
		"\u0b93\5\u01e0\u00f1\2\u0b93\u0bd1\5D#\2\u0b94\u0b95\7D\2\2\u0b95\u0b96"+
		"\7\u019d\2\2\u0b96\u0b9b\5j\66\2\u0b97\u0b98\7\u019b\2\2\u0b98\u0b9a\5"+
		"j\66\2\u0b99\u0b97\3\2\2\2\u0b9a\u0b9d\3\2\2\2\u0b9b\u0b99\3\2\2\2\u0b9b"+
		"\u0b9c\3\2\2\2\u0b9c\u0b9e\3\2\2\2\u0b9d\u0b9b\3\2\2\2\u0b9e\u0b9f\7\u019e"+
		"\2\2\u0b9f\u0bd2\3\2\2\2\u0ba0\u0ba1\7\64\2\2\u0ba1\u0ba3\5\u008eH\2\u0ba2"+
		"\u0ba0\3\2\2\2\u0ba3\u0ba6\3\2\2\2\u0ba4\u0ba2\3\2\2\2\u0ba4\u0ba5\3\2"+
		"\2\2\u0ba5\u0bcf\3\2\2\2\u0ba6\u0ba4\3\2\2\2\u0ba7\u0ba8\7D\2\2\u0ba8"+
		"\u0bad\5\u0262\u0132\2\u0ba9\u0baa\7\u019d\2\2\u0baa\u0bab\5\u01c0\u00e1"+
		"\2\u0bab\u0bac\7\u019e\2\2\u0bac\u0bae\3\2\2\2\u0bad\u0ba9\3\2\2\2\u0bad"+
		"\u0bae\3\2\2\2\u0bae\u0bb0\3\2\2\2\u0baf\u0bb1\5\u01e4\u00f3\2\u0bb0\u0baf"+
		"\3\2\2\2\u0bb0\u0bb1\3\2\2\2\u0bb1\u0bc2\3\2\2\2\u0bb2\u0bb4\7(\2\2\u0bb3"+
		"\u0bb2\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bc3\5l"+
		"\67\2\u0bb6\u0bb7\7(\2\2\u0bb7\u0bb8\7\u019d\2\2\u0bb8\u0bbd\5l\67\2\u0bb9"+
		"\u0bba\7\u019b\2\2\u0bba\u0bbc\5l\67\2\u0bbb\u0bb9\3\2\2\2\u0bbc\u0bbf"+
		"\3\2\2\2\u0bbd\u0bbb\3\2\2\2\u0bbd\u0bbe\3\2\2\2\u0bbe\u0bc0\3\2\2\2\u0bbf"+
		"\u0bbd\3\2\2\2\u0bc0\u0bc1\7\u019e\2\2\u0bc1\u0bc3\3\2\2\2\u0bc2\u0bb3"+
		"\3\2\2\2\u0bc2\u0bb6\3\2\2\2\u0bc2\u0bc3\3\2\2\2\u0bc3\u0bca\3\2\2\2\u0bc4"+
		"\u0bc5\7\u00aa\2\2\u0bc5\u0bc6\7\u0136\2\2\u0bc6\u0bc7\7\u019d\2\2\u0bc7"+
		"\u0bc8\5\u0164\u00b3\2\u0bc8\u0bc9\7\u019e\2\2\u0bc9\u0bcb\3\2\2\2\u0bca"+
		"\u0bc4\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bcd\3\2\2\2\u0bcc\u0bce\5\u0232"+
		"\u011a\2\u0bcd\u0bcc\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce\u0bd0\3\2\2\2\u0bcf"+
		"\u0ba7\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd2\3\2\2\2\u0bd1\u0b94\3\2"+
		"\2\2\u0bd1\u0ba4\3\2\2\2\u0bd2\u0bdd\3\2\2\2\u0bd3\u0bd4\7\u0182\2\2\u0bd4"+
		"\u0bd5\5\u01e0\u00f1\2\u0bd5\u0bd6\5D#\2\u0bd6\u0bdd\3\2\2\2\u0bd7\u0bda"+
		"\5\u01e2\u00f2\2\u0bd8\u0bd9\7\64\2\2\u0bd9\u0bdb\5\u008eH\2\u0bda\u0bd8"+
		"\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0bdd\3\2\2\2\u0bdc\u0b92\3\2\2\2\u0bdc"+
		"\u0bd3\3\2\2\2\u0bdc\u0bd7\3\2\2\2\u0bdd\u01d9\3\2\2\2\u0bde\u0be0\7/"+
		"\2\2\u0bdf\u0bde\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1"+
		"\u0be2\5D#\2\u0be2\u0be3\5\u01dc\u00ef\2\u0be3\u01db\3\2\2\2\u0be4\u0be5"+
		"\7\u019d\2\2\u0be5\u0bea\5\u008eH\2\u0be6\u0be7\7\u019b\2\2\u0be7\u0be9"+
		"\5\u008eH\2\u0be8\u0be6\3\2\2\2\u0be9\u0bec\3\2\2\2\u0bea\u0be8\3\2\2"+
		"\2\u0bea\u0beb\3\2\2\2\u0beb\u0bed\3\2\2\2\u0bec\u0bea\3\2\2\2\u0bed\u0bee"+
		"\7\u019e\2\2\u0bee\u01dd\3\2\2\2\u0bef\u0bf0\7.\2\2\u0bf0\u01df\3\2\2"+
		"\2\u0bf1\u0c0d\7\60\2\2\u0bf2\u0bf3\7\u011b\2\2\u0bf3\u0c0d\7\60\2\2\u0bf4"+
		"\u0c0d\7\u019b\2\2\u0bf5\u0bf6\7\u00e6\2\2\u0bf6\u0c0d\7\60\2\2\u0bf7"+
		"\u0bf9\7\61\2\2\u0bf8\u0bfa\7-\2\2\u0bf9\u0bf8\3\2\2\2\u0bf9\u0bfa\3\2"+
		"\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0c0d\7\60\2\2\u0bfc\u0bfe\7\62\2\2\u0bfd"+
		"\u0bff\7-\2\2\u0bfe\u0bfd\3\2\2\2\u0bfe\u0bff\3\2\2\2\u0bff\u0c00\3\2"+
		"\2\2\u0c00\u0c0d\7\60\2\2\u0c01\u0c03\7\63\2\2\u0c02\u0c04\7-\2\2\u0c03"+
		"\u0c02\3\2\2\2\u0c03\u0c04\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05\u0c0d\7\60"+
		"\2\2\u0c06\u0c07\7\61\2\2\u0c07\u0c08\7\u00ec\2\2\u0c08\u0c0d\7\60\2\2"+
		"\u0c09\u0c0a\7\61\2\2\u0c0a\u0c0b\7\u00ed\2\2\u0c0b\u0c0d\7\60\2\2\u0c0c"+
		"\u0bf1\3\2\2\2\u0c0c\u0bf2\3\2\2\2\u0c0c\u0bf4\3\2\2\2\u0c0c\u0bf5\3\2"+
		"\2\2\u0c0c\u0bf7\3\2\2\2\u0c0c\u0bfc\3\2\2\2\u0c0c\u0c01\3\2\2\2\u0c0c"+
		"\u0c06\3\2\2\2\u0c0c\u0c09\3\2\2\2\u0c0d\u01e1\3\2\2\2\u0c0e\u0c0f\7\u00ee"+
		"\2\2\u0c0f\u0c10\7\u00ca\2\2\u0c10\u0c11\7-\2\2\u0c11\u0c12\5\u0234\u011b"+
		"\2\u0c12\u0c1c\5\u01e4\u00f3\2\u0c13\u0c14\7(\2\2\u0c14\u0c19\5j\66\2"+
		"\u0c15\u0c16\7\u019b\2\2\u0c16\u0c18\5j\66\2\u0c17\u0c15\3\2\2\2\u0c18"+
		"\u0c1b\3\2\2\2\u0c19\u0c17\3\2\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u0c1d\3\2"+
		"\2\2\u0c1b\u0c19\3\2\2\2\u0c1c\u0c13\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d"+
		"\u0c2c\3\2\2\2\u0c1e\u0c1f\7\u00ee\2\2\u0c1f\u0c20\7\u00ca\2\2\u0c20\u0c21"+
		"\5\u0234\u011b\2\u0c21\u0c22\5\u01e4\u00f3\2\u0c22\u0c23\7(\2\2\u0c23"+
		"\u0c28\5j\66\2\u0c24\u0c25\7\u019b\2\2\u0c25\u0c27\5j\66\2\u0c26\u0c24"+
		"\3\2\2\2\u0c27\u0c2a\3\2\2\2\u0c28\u0c26\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29"+
		"\u0c2c\3\2\2\2\u0c2a\u0c28\3\2\2\2\u0c2b\u0c0e\3\2\2\2\u0c2b\u0c1e\3\2"+
		"\2\2\u0c2c\u01e3\3\2\2\2\u0c2d\u0c2e\5l\67\2\u0c2e\u01e5\3\2\2\2\u0c2f"+
		"\u0c30\7\u0094\2\2\u0c30\u0c31\7\u019d\2\2\u0c31\u0c32\7\u0095\2\2\u0c32"+
		"\u0c33\7\u01c3\2\2\u0c33\u0c34\7\u0096\2\2\u0c34\u0c35\7\u0097\2\2\u0c35"+
		"\u0c3f\7\u01c3\2\2\u0c36\u0c37\7\64\2\2\u0c37\u0c3c\5\u008eH\2\u0c38\u0c39"+
		"\7\u019b\2\2\u0c39\u0c3b\5\u008eH\2\u0c3a\u0c38\3\2\2\2\u0c3b\u0c3e\3"+
		"\2\2\2\u0c3c\u0c3a\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c40\3\2\2\2\u0c3e"+
		"\u0c3c\3\2\2\2\u0c3f\u0c36\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c41\3\2"+
		"\2\2\u0c41\u0c42\7\u019e\2\2\u0c42\u01e7\3\2\2\2\u0c43\u0c44\7\u0094\2"+
		"\2\u0c44\u0c45\7\u019d\2\2\u0c45\u0c48\7\u01c3\2\2\u0c46\u0c49\7\u0098"+
		"\2\2\u0c47\u0c49\7}\2\2\u0c48\u0c46\3\2\2\2\u0c48\u0c47\3\2\2\2\u0c49"+
		"\u0c4a\3\2\2\2\u0c4a\u0c50\7\u019e\2\2\u0c4b\u0c4c\7\u0094\2\2\u0c4c\u0c4d"+
		"\7\u019d\2\2\u0c4d\u0c4e\7\u01c2\2\2\u0c4e\u0c50\7\u019e\2\2\u0c4f\u0c43"+
		"\3\2\2\2\u0c4f\u0c4b\3\2\2\2\u0c50\u01e9\3\2\2\2\u0c51\u0c54\5\u01e6\u00f4"+
		"\2\u0c52\u0c54\5\u01e8\u00f5\2\u0c53\u0c51\3\2\2\2\u0c53\u0c52\3\2\2\2"+
		"\u0c54\u01eb\3\2\2\2\u0c55\u0c57\5\u01f2\u00fa\2\u0c56\u0c58\5\u015e\u00b0"+
		"\2\u0c57\u0c56\3\2\2\2\u0c57\u0c58\3\2\2\2\u0c58\u0c5a\3\2\2\2\u0c59\u0c5b"+
		"\5\u01ea\u00f6\2\u0c5a\u0c59\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c71\3"+
		"\2\2\2\u0c5c\u0c5e\7(\2\2\u0c5d\u0c5c\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e"+
		"\u0c62\3\2\2\2\u0c5f\u0c63\5n8\2\u0c60\u0c63\5\u01ee\u00f8\2\u0c61\u0c63"+
		"\5\u0248\u0125\2\u0c62\u0c5f\3\2\2\2\u0c62\u0c60\3\2\2\2\u0c62\u0c61\3"+
		"\2\2\2\u0c63\u0c6f\3\2\2\2\u0c64\u0c65\7\u019d\2\2\u0c65\u0c6a\5j\66\2"+
		"\u0c66\u0c67\7\u019b\2\2\u0c67\u0c69\5j\66\2\u0c68\u0c66\3\2\2\2\u0c69"+
		"\u0c6c\3\2\2\2\u0c6a\u0c68\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6d\3\2"+
		"\2\2\u0c6c\u0c6a\3\2\2\2\u0c6d\u0c6e\7\u019e\2\2\u0c6e\u0c70\3\2\2\2\u0c6f"+
		"\u0c64\3\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c72\3\2\2\2\u0c71\u0c5d\3\2"+
		"\2\2\u0c71\u0c72\3\2\2\2\u0c72\u01ed\3\2\2\2\u0c73\u0c74\t\16\2\2\u0c74"+
		"\u01ef\3\2\2\2\u0c75\u0c76\5j\66\2\u0c76\u0c77\7\u0199\2\2\u0c77\u0c78"+
		"\5j\66\2\u0c78\u0c7b\3\2\2\2\u0c79\u0c7b\5j\66\2\u0c7a\u0c75\3\2\2\2\u0c7a"+
		"\u0c79\3\2\2\2\u0c7b\u01f1\3\2\2\2\u0c7c\u0c7d\5j\66\2\u0c7d\u0c7e\7\u0199"+
		"\2\2\u0c7e\u0c7f\5j\66\2\u0c7f\u0c88\3\2\2\2\u0c80\u0c88\5j\66\2\u0c81"+
		"\u0c82\5j\66\2\u0c82\u0c83\7\u0199\2\2\u0c83\u0c84\5j\66\2\u0c84\u0c85"+
		"\7\u0199\2\2\u0c85\u0c86\5j\66\2\u0c86\u0c88\3\2\2\2\u0c87\u0c7c\3\2\2"+
		"\2\u0c87\u0c80\3\2\2\2\u0c87\u0c81\3\2\2\2\u0c88\u01f3\3\2\2\2\u0c89\u0c8b"+
		"\5\u022e\u0118\2\u0c8a\u0c8c\5\u0222\u0112\2\u0c8b\u0c8a\3\2\2\2\u0c8b"+
		"\u0c8c\3\2\2\2\u0c8c\u0c95\3\2\2\2\u0c8d\u0c95\5\u0222\u0112\2\u0c8e\u0c90"+
		"\5\u0230\u0119\2\u0c8f\u0c91\5\u0232\u011a\2\u0c90\u0c8f\3\2\2\2\u0c90"+
		"\u0c91\3\2\2\2\u0c91\u0c95\3\2\2\2\u0c92\u0c95\5\u0232\u011a\2\u0c93\u0c95"+
		"\5\u022c\u0117\2\u0c94\u0c89\3\2\2\2\u0c94\u0c8d\3\2\2\2\u0c94\u0c8e\3"+
		"\2\2\2\u0c94\u0c92\3\2\2\2\u0c94\u0c93\3\2\2\2\u0c95\u01f5\3\2\2\2\u0c96"+
		"\u0c9a\5\20\t\2\u0c97\u0c9a\5\u01ec\u00f7\2\u0c98\u0c9a\5\u01f8\u00fd"+
		"\2\u0c99\u0c96\3\2\2\2\u0c99\u0c97\3\2\2\2\u0c99\u0c98\3\2\2\2\u0c9a\u01f7"+
		"\3\2\2\2\u0c9b\u0c9c\7\u01c5\2\2\u0c9c\u0c9d\7\u019d\2\2\u0c9d\u0c9e\7"+
		"\64\2\2\u0c9e\u0ca0\5\u01f6\u00fc\2\u0c9f\u0ca1\5\u01f4\u00fb\2\u0ca0"+
		"\u0c9f\3\2\2\2\u0ca0\u0ca1\3\2\2\2\u0ca1\u0cb1\3\2\2\2\u0ca2\u0ca3\7\u01c5"+
		"\2\2\u0ca3\u0ca4\7\u019d\2\2\u0ca4\u0ca5\5\u008eH\2\u0ca5\u0cae\7\u019e"+
		"\2\2\u0ca6\u0ca7\7\u019b\2\2\u0ca7\u0ca8\7\u01c5\2\2\u0ca8\u0ca9\7\u019d"+
		"\2\2\u0ca9\u0caa\5\u008eH\2\u0caa\u0cab\7\u019e\2\2\u0cab\u0cad\3\2\2"+
		"\2\u0cac\u0ca6\3\2\2\2\u0cad\u0cb0\3\2\2\2\u0cae\u0cac\3\2\2\2\u0cae\u0caf"+
		"\3\2\2\2\u0caf\u0cb2\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb1\u0ca2\3\2\2\2\u0cb1"+
		"\u0cb2\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb5\7\u019e\2\2\u0cb4\u0cb6"+
		"\7\u01c5\2\2\u0cb5\u0cb4\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u01f9\3\2\2"+
		"\2\u0cb7\u0cb8\7&\2\2\u0cb8\u0cb9\5\u008eH\2\u0cb9\u01fb\3\2\2\2\u0cba"+
		"\u0cbb\7\u019d\2\2\u0cbb\u0cc0\5|?\2\u0cbc\u0cbd\7\u019b\2\2\u0cbd\u0cbf"+
		"\5|?\2\u0cbe\u0cbc\3\2\2\2\u0cbf\u0cc2\3\2\2\2\u0cc0\u0cbe\3\2\2\2\u0cc0"+
		"\u0cc1\3\2\2\2\u0cc1\u0cc3\3\2\2\2\u0cc2\u0cc0\3\2\2\2\u0cc3\u0cc4\7\u019e"+
		"\2\2\u0cc4\u01fd\3\2\2\2\u0cc5\u0cca\5\u01fc\u00ff\2\u0cc6\u0cc7\7\u019b"+
		"\2\2\u0cc7\u0cc9\5\u01fc\u00ff\2\u0cc8\u0cc6\3\2\2\2\u0cc9\u0ccc\3\2\2"+
		"\2\u0cca\u0cc8\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u01ff\3\2\2\2\u0ccc\u0cca"+
		"\3\2\2\2\u0ccd\u0cce\7\u0128\2\2\u0cce\u0ccf\5\u01fe\u0100\2\u0ccf\u0201"+
		"\3\2\2\2\u0cd0\u0cd1\7\u019d\2\2\u0cd1\u0cd2\5\u0200\u0101\2\u0cd2\u0cd3"+
		"\7\u019e\2\2\u0cd3\u0cd4\5\u0204\u0103\2\u0cd4\u0cd9\3\2\2\2\u0cd5\u0cd6"+
		"\5\u0200\u0101\2\u0cd6\u0cd7\5\u0204\u0103\2\u0cd7\u0cd9\3\2\2\2\u0cd8"+
		"\u0cd0\3\2\2\2\u0cd8\u0cd5\3\2\2\2\u0cd9\u0203\3\2\2\2\u0cda\u0cdc\7("+
		"\2\2\u0cdb\u0cda\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0cdd\3\2\2\2\u0cdd"+
		"\u0cde\5j\66\2\u0cde\u0cdf\7\u019d\2\2\u0cdf\u0ce4\5j\66\2\u0ce0\u0ce1"+
		"\7\u019b\2\2\u0ce1\u0ce3\5j\66\2\u0ce2\u0ce0\3\2\2\2\u0ce3\u0ce6\3\2\2"+
		"\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u0ce7\3\2\2\2\u0ce6\u0ce4"+
		"\3\2\2\2\u0ce7\u0ce8\7\u019e\2\2\u0ce8\u0205\3\2\2\2\u0ce9\u0cec\7\u0105"+
		"\2\2\u0cea\u0cec\7\u0104\2\2\u0ceb\u0ce9\3\2\2\2\u0ceb\u0cea\3\2\2\2\u0cec"+
		"\u0ced\3\2\2\2\u0ced\u0cee\7\u019d\2\2\u0cee\u0cf3\5\u0210\u0109\2\u0cef"+
		"\u0cf0\7\u019b\2\2\u0cf0\u0cf2\5\u0210\u0109\2\u0cf1\u0cef\3\2\2\2\u0cf2"+
		"\u0cf5\3\2\2\2\u0cf3\u0cf1\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf6\3\2"+
		"\2\2\u0cf5\u0cf3\3\2\2\2\u0cf6\u0cf7\7\u019e\2\2\u0cf7\u0207\3\2\2\2\u0cf8"+
		"\u0cfb\5\u0206\u0104\2\u0cf9\u0cfb\5\u0210\u0109\2\u0cfa\u0cf8\3\2\2\2"+
		"\u0cfa\u0cf9\3\2\2\2\u0cfb\u0209\3\2\2\2\u0cfc\u0cfd\7\u0113\2\2\u0cfd"+
		"\u0cfe\7\u0114\2\2\u0cfe\u0cff\7\u019d\2\2\u0cff\u0d04\5\u0208\u0105\2"+
		"\u0d00\u0d01\7\u019b\2\2\u0d01\u0d03\5\u0208\u0105\2\u0d02\u0d00\3\2\2"+
		"\2\u0d03\u0d06\3\2\2\2\u0d04\u0d02\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d07"+
		"\3\2\2\2\u0d06\u0d04\3\2\2\2\u0d07\u0d08\7\u019e\2\2\u0d08\u020b\3\2\2"+
		"\2\u0d09\u0d0d\5\u0206\u0104\2\u0d0a\u0d0d\5\u020a\u0106\2\u0d0b\u0d0d"+
		"\5\u008eH\2\u0d0c\u0d09\3\2\2\2\u0d0c\u0d0a\3\2\2\2\u0d0c\u0d0b\3\2\2"+
		"\2\u0d0d\u020d\3\2\2\2\u0d0e\u0d0f\7\"\2\2\u0d0f\u0d10\7$\2\2\u0d10\u0d15"+
		"\5\u020c\u0107\2\u0d11\u0d12\7\u019b\2\2\u0d12\u0d14\5\u020c\u0107\2\u0d13"+
		"\u0d11\3\2\2\2\u0d14\u0d17\3\2\2\2\u0d15\u0d13\3\2\2\2\u0d15\u0d16\3\2"+
		"\2\2\u0d16\u0d1d\3\2\2\2\u0d17\u0d15\3\2\2\2\u0d18\u0d19\7\u00aa\2\2\u0d19"+
		"\u0d1e\7\u0104\2\2\u0d1a\u0d1b\7\u00aa\2\2\u0d1b\u0d1e\7\u0105\2\2\u0d1c"+
		"\u0d1e\5\u020a\u0106\2\u0d1d\u0d18\3\2\2\2\u0d1d\u0d1a\3\2\2\2\u0d1d\u0d1c"+
		"\3\2\2\2\u0d1d\u0d1e\3\2\2\2\u0d1e\u020f\3\2\2\2\u0d1f\u0d22\5\u0212\u010a"+
		"\2\u0d20\u0d22\5\u0214\u010b\2\u0d21\u0d1f\3\2\2\2\u0d21\u0d20\3\2\2\2"+
		"\u0d22\u0211\3\2\2\2\u0d23\u0d25\7\u019d\2\2\u0d24\u0d26\5\u008eH\2\u0d25"+
		"\u0d24\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d2b\3\2\2\2\u0d27\u0d28\7\u019b"+
		"\2\2\u0d28\u0d2a\5\u008eH\2\u0d29\u0d27\3\2\2\2\u0d2a\u0d2d\3\2\2\2\u0d2b"+
		"\u0d29\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d\u0d2b\3\2"+
		"\2\2\u0d2e\u0d2f\7\u019e\2\2\u0d2f\u0213\3\2\2\2\u0d30\u0d31\5\u008eH"+
		"\2\u0d31\u0215\3\2\2\2\u0d32\u0d33\7%\2\2\u0d33\u0d34\5\u0218\u010d\2"+
		"\u0d34\u0217\3\2\2\2\u0d35\u0d36\5\u008eH\2\u0d36\u0219\3\2\2\2\u0d37"+
		"\u0d38\7\u019d\2\2\u0d38\u0d39\5\u021c\u010f\2\u0d39\u0d3a\7\u019e\2\2"+
		"\u0d3a\u021b\3\2\2\2\u0d3b\u0d40\5\u008eH\2\u0d3c\u0d3d\7\u019b\2\2\u0d3d"+
		"\u0d3f\5\u008eH\2\u0d3e\u0d3c\3\2\2\2\u0d3f\u0d42\3\2\2\2\u0d40\u0d3e"+
		"\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u021d\3\2\2\2\u0d42\u0d40\3\2\2\2\u0d43"+
		"\u0d44\7\u019d\2\2\u0d44\u0d45\5\u0220\u0111\2\u0d45\u0d46\7\u019e\2\2"+
		"\u0d46\u021f\3\2\2\2\u0d47\u0d4c\5\u0178\u00bd\2\u0d48\u0d49\7\u019b\2"+
		"\2\u0d49\u0d4b\5\u0178\u00bd\2\u0d4a\u0d48\3\2\2\2\u0d4b\u0d4e\3\2\2\2"+
		"\u0d4c\u0d4a\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0221\3\2\2\2\u0d4e\u0d4c"+
		"\3\2\2\2\u0d4f\u0d50\7 \2\2\u0d50\u0d51\7$\2\2\u0d51\u0d56\5\u0178\u00bd"+
		"\2\u0d52\u0d53\7\u019b\2\2\u0d53\u0d55\5\u0178\u00bd\2\u0d54\u0d52\3\2"+
		"\2\2\u0d55\u0d58\3\2\2\2\u0d56\u0d54\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57"+
		"\u0223\3\2\2\2\u0d58\u0d56\3\2\2\2\u0d59\u0d5a\7\u019d\2\2\u0d5a\u0d5b"+
		"\5\u0226\u0114\2\u0d5b\u0d5c\7\u019e\2\2\u0d5c\u0225\3\2\2\2\u0d5d\u0d62"+
		"\5\u0228\u0115\2\u0d5e\u0d5f\7\u019b\2\2\u0d5f\u0d61\5\u0228\u0115\2\u0d60"+
		"\u0d5e\3\2\2\2\u0d61\u0d64\3\2\2\2\u0d62\u0d60\3\2\2\2\u0d62\u0d63\3\2"+
		"\2\2\u0d63\u0227\3\2\2\2\u0d64\u0d62\3\2\2\2\u0d65\u0d68\5X-\2\u0d66\u0d68"+
		"\5\u0242\u0122\2\u0d67\u0d65\3\2\2\2\u0d67\u0d66\3\2\2\2\u0d68\u0229\3"+
		"\2\2\2\u0d69\u0d6a\7!\2\2\u0d6a\u0d6d\7$\2\2\u0d6b\u0d6e\5\u0224\u0113"+
		"\2\u0d6c\u0d6e\5\u0226\u0114\2\u0d6d\u0d6b\3\2\2\2\u0d6d\u0d6c\3\2\2\2"+
		"\u0d6e\u022b\3\2\2\2\u0d6f\u0d70\7E\2\2\u0d70\u0d73\7$\2\2\u0d71\u0d74"+
		"\5\u021a\u010e\2\u0d72\u0d74\5\u021c\u010f\2\u0d73\u0d71\3\2\2\2\u0d73"+
		"\u0d72\3\2\2\2\u0d74\u022d\3\2\2\2\u0d75\u0d76\7\65\2\2\u0d76\u0d79\7"+
		"$\2\2\u0d77\u0d7a\5\u021a\u010e\2\u0d78\u0d7a\5\u021c\u010f\2\u0d79\u0d77"+
		"\3\2\2\2\u0d79\u0d78\3\2\2\2\u0d7a\u022f\3\2\2\2\u0d7b\u0d7c\7F\2\2\u0d7c"+
		"\u0d7f\7$\2\2\u0d7d\u0d80\5\u021a\u010e\2\u0d7e\u0d80\5\u021c\u010f\2"+
		"\u0d7f\u0d7d\3\2\2\2\u0d7f\u0d7e\3\2\2\2\u0d80\u0231\3\2\2\2\u0d81\u0d82"+
		"\7G\2\2\u0d82\u0d85\7$\2\2\u0d83\u0d86\5\u021e\u0110\2\u0d84\u0d86\5\u0220"+
		"\u0111\2\u0d85\u0d83\3\2\2\2\u0d85\u0d84\3\2\2\2\u0d86\u0233\3\2\2\2\u0d87"+
		"\u0d88\5\u023a\u011e\2\u0d88\u0d97\7\u019d\2\2\u0d89\u0d98\7\u01ad\2\2"+
		"\u0d8a\u0d8c\7*\2\2\u0d8b\u0d8a\3\2\2\2\u0d8b\u0d8c\3\2\2\2\u0d8c\u0d95"+
		"\3\2\2\2\u0d8d\u0d92\5\u0236\u011c\2\u0d8e\u0d8f\7\u019b\2\2\u0d8f\u0d91"+
		"\5\u0236\u011c\2\u0d90\u0d8e\3\2\2\2\u0d91\u0d94\3\2\2\2\u0d92\u0d90\3"+
		"\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d96\3\2\2\2\u0d94\u0d92\3\2\2\2\u0d95"+
		"\u0d8d\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0d98\3\2\2\2\u0d97\u0d89\3\2"+
		"\2\2\u0d97\u0d8b\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0db4\7\u019e\2\2\u0d9a"+
		"\u0d9b\7\u018e\2\2\u0d9b\u0d9c\7\"\2\2\u0d9c\u0d9d\7\u019d\2\2\u0d9d\u0d9e"+
		"\5\u0222\u0112\2\u0d9e\u0d9f\7\u019e\2\2\u0d9f\u0da1\3\2\2\2\u0da0\u0d9a"+
		"\3\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u0da7\3\2\2\2\u0da2\u0da3\7\u018f\2"+
		"\2\u0da3\u0da4\7\u019d\2\2\u0da4\u0da5\5\u01fa\u00fe\2\u0da5\u0da6\7\u019e"+
		"\2\2\u0da6\u0da8\3\2\2\2\u0da7\u0da2\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8"+
		"\u0db5\3\2\2\2\u0da9\u0daa\7\u018f\2\2\u0daa\u0dab\7\u019d\2\2\u0dab\u0dac"+
		"\5\u01fa\u00fe\2\u0dac\u0dad\7\u019e\2\2\u0dad\u0daf\3\2\2\2\u0dae\u0da9"+
		"\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf\u0db2\3\2\2\2\u0db0\u0db1\7\u0112\2"+
		"\2\u0db1\u0db3\5\u01c6\u00e4\2\u0db2\u0db0\3\2\2\2\u0db2\u0db3\3\2\2\2"+
		"\u0db3\u0db5\3\2\2\2\u0db4\u0da0\3\2\2\2\u0db4\u0dae\3\2\2\2\u0db5\u0db8"+
		"\3\2\2\2\u0db6\u0db8\5\u0238\u011d\2\u0db7\u0d87\3\2\2\2\u0db7\u0db6\3"+
		"\2\2\2\u0db8\u0235\3\2\2\2\u0db9\u0dbd\5\u01be\u00e0\2\u0dba\u0dbd\5R"+
		"*\2\u0dbb\u0dbd\5T+\2\u0dbc\u0db9\3\2\2\2\u0dbc\u0dba\3\2\2\2\u0dbc\u0dbb"+
		"\3\2\2\2\u0dbd\u0237\3\2\2\2\u0dbe\u0dbf\7\u017e\2\2\u0dbf\u0dc0\7\u019d"+
		"\2\2\u0dc0\u0dc1\5\u0256\u012c\2\u0dc1\u0dc2\7\'\2\2\u0dc2\u0dc3\5\u008e"+
		"H\2\u0dc3\u0dc4\7\u019e\2\2\u0dc4\u0dd1\3\2\2\2\u0dc5\u0dc6\7\u017f\2"+
		"\2\u0dc6\u0dc7\7\u019d\2\2\u0dc7\u0dc8\5\u008eH\2\u0dc8\u0dc9\7\'\2\2"+
		"\u0dc9\u0dcc\5|?\2\u0dca\u0dcb\7\u0107\2\2\u0dcb\u0dcd\5|?\2\u0dcc\u0dca"+
		"\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dcf\7\u019e\2"+
		"\2\u0dcf\u0dd1\3\2\2\2\u0dd0\u0dbe\3\2\2\2\u0dd0\u0dc5\3\2\2\2\u0dd1\u0239"+
		"\3\2\2\2\u0dd2\u0dda\7\34\2\2\u0dd3\u0dda\7r\2\2\u0dd4\u0dda\7t\2\2\u0dd5"+
		"\u0dda\7s\2\2\u0dd6\u0dda\7u\2\2\u0dd7\u0dda\5\u0262\u0132\2\u0dd8\u0dda"+
		"\5\u0266\u0134\2\u0dd9\u0dd2\3\2\2\2\u0dd9\u0dd3\3\2\2\2\u0dd9\u0dd4\3"+
		"\2\2\2\u0dd9\u0dd5\3\2\2\2\u0dd9\u0dd6\3\2\2\2\u0dd9\u0dd7\3\2\2\2\u0dd9"+
		"\u0dd8\3\2\2\2\u0dda\u023b\3\2\2\2\u0ddb\u0ddc\7\u0099\2\2\u0ddc\u0ddd"+
		"\7\u019d\2\2\u0ddd\u0dde\5\u008eH\2\u0dde\u0ddf\7(\2\2\u0ddf\u0de0\5\u0188"+
		"\u00c5\2\u0de0\u0de1\7\u019e\2\2\u0de1\u023d\3\2\2\2\u0de2\u0de3\7\u00b7"+
		"\2\2\u0de3\u0de9\5\u008eH\2\u0de4\u0de5\7\u00b8\2\2\u0de5\u0de6\5\u008e"+
		"H\2\u0de6\u0de7\7\u00b9\2\2\u0de7\u0de8\5\u008eH\2\u0de8\u0dea\3\2\2\2"+
		"\u0de9\u0de4\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0de9\3\2\2\2\u0deb\u0dec"+
		"\3\2\2\2\u0dec\u0def\3\2\2\2\u0ded\u0dee\7\u00ba\2\2\u0dee\u0df0\5\u008e"+
		"H\2\u0def\u0ded\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df1\3\2\2\2\u0df1"+
		"\u0df2\7\u00bb\2\2\u0df2\u023f\3\2\2\2\u0df3\u0df9\7\u00b7\2\2\u0df4\u0df5"+
		"\7\u00b8\2\2\u0df5\u0df6\5\u008eH\2\u0df6\u0df7\7\u00b9\2\2\u0df7\u0df8"+
		"\5\u008eH\2\u0df8\u0dfa\3\2\2\2\u0df9\u0df4\3\2\2\2\u0dfa\u0dfb\3\2\2"+
		"\2\u0dfb\u0df9\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dff\3\2\2\2\u0dfd\u0dfe"+
		"\7\u00ba\2\2\u0dfe\u0e00\5\u008eH\2\u0dff\u0dfd\3\2\2\2\u0dff\u0e00\3"+
		"\2\2\2\u0e00\u0e01\3\2\2\2\u0e01\u0e02\7\u00bb\2\2\u0e02\u0241\3\2\2\2"+
		"\u0e03\u0e10\7\u01c3\2\2\u0e04\u0e10\5\u024c\u0127\2\u0e05\u0e10\5\u0250"+
		"\u0129\2\u0e06\u0e10\5\u024e\u0128\2\u0e07\u0e10\5\u0252\u012a\2\u0e08"+
		"\u0e10\5\u0246\u0124\2\u0e09\u0e10\7\u01be\2\2\u0e0a\u0e10\7\u01bf\2\2"+
		"\u0e0b\u0e10\7\u01c0\2\2\u0e0c\u0e10\7\u01c1\2\2\u0e0d\u0e10\5\u024a\u0126"+
		"\2\u0e0e\u0e10\5\u025a\u012e\2\u0e0f\u0e03\3\2\2\2\u0e0f\u0e04\3\2\2\2"+
		"\u0e0f\u0e05\3\2\2\2\u0e0f\u0e06\3\2\2\2\u0e0f\u0e07\3\2\2\2\u0e0f\u0e08"+
		"\3\2\2\2\u0e0f\u0e09\3\2\2\2\u0e0f\u0e0a\3\2\2\2\u0e0f\u0e0b\3\2\2\2\u0e0f"+
		"\u0e0c\3\2\2\2\u0e0f\u0e0d\3\2\2\2\u0e0f\u0e0e\3\2\2\2\u0e10\u0243\3\2"+
		"\2\2\u0e11\u0e12\t\17\2\2\u0e12\u0245\3\2\2\2\u0e13\u0e15\5\u0244\u0123"+
		"\2\u0e14\u0e13\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u0e14\3\2\2\2\u0e16\u0e17"+
		"\3\2\2\2\u0e17\u0247\3\2\2\2\u0e18\u0e19\7\u01bd\2\2\u0e19\u0249\3\2\2"+
		"\2\u0e1a\u0e1b\7\u01c7\2\2\u0e1b\u024b\3\2\2\2\u0e1c\u0e1d\7j\2\2\u0e1d"+
		"\u0e20\5\u0244\u0123\2\u0e1e\u0e20\7\u010e\2\2\u0e1f\u0e1c\3\2\2\2\u0e1f"+
		"\u0e1e\3\2\2\2\u0e20\u024d\3\2\2\2\u0e21\u0e22\7k\2\2\u0e22\u0e23\5\u0244"+
		"\u0123\2\u0e23\u024f\3\2\2\2\u0e24\u0e25\7l\2\2\u0e25\u0e29\5\u0244\u0123"+
		"\2\u0e26\u0e29\7\u010f\2\2\u0e27\u0e29\7\u010d\2\2\u0e28\u0e24\3\2\2\2"+
		"\u0e28\u0e26\3\2\2\2\u0e28\u0e27\3\2\2\2\u0e29\u0251\3\2\2\2\u0e2a\u0e2b"+
		"\7m\2\2\u0e2b\u0e2c\5\u0246\u0124\2\u0e2c\u0e2d\5\u0254\u012b\2\u0e2d"+
		"\u0e33\3\2\2\2\u0e2e\u0e2f\7m\2\2\u0e2f\u0e30\5|?\2\u0e30\u0e31\5\u0256"+
		"\u012c\2\u0e31\u0e33\3\2\2\2\u0e32\u0e2a\3\2\2\2\u0e32\u0e2e\3\2\2\2\u0e33"+
		"\u0253\3\2\2\2\u0e34\u0e36\7\u012a\2\2\u0e35\u0e37\5\u0258\u012d\2\u0e36"+
		"\u0e35\3\2\2\2\u0e36\u0e37\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e39\7a"+
		"\2\2\u0e39\u0e3b\7\u012b\2\2\u0e3a\u0e3c\5\u0258\u012d\2\u0e3b\u0e3a\3"+
		"\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e78\3\2\2\2\u0e3d\u0e3f\7\u012c\2\2"+
		"\u0e3e\u0e40\5\u0258\u012d\2\u0e3f\u0e3e\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40"+
		"\u0e41\3\2\2\2\u0e41\u0e42\7a\2\2\u0e42\u0e44\7\u012d\2\2\u0e43\u0e45"+
		"\5\u0258\u012d\2\u0e44\u0e43\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45\u0e78\3"+
		"\2\2\2\u0e46\u0e48\7\u012c\2\2\u0e47\u0e49\5\u0258\u012d\2\u0e48\u0e47"+
		"\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e4a\3\2\2\2\u0e4a\u0e4b\7a\2\2\u0e4b"+
		"\u0e4d\7\u012e\2\2\u0e4c\u0e4e\5\u0258\u012d\2\u0e4d\u0e4c\3\2\2\2\u0e4d"+
		"\u0e4e\3\2\2\2\u0e4e\u0e78\3\2\2\2\u0e4f\u0e51\7\u012c\2\2\u0e50\u0e52"+
		"\5\u0258\u012d\2\u0e51\u0e50\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e53\3"+
		"\2\2\2\u0e53\u0e54\7a\2\2\u0e54\u0e56\7\u012f\2\2\u0e55\u0e57\5\u0258"+
		"\u012d\2\u0e56\u0e55\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e78\3\2\2\2\u0e58"+
		"\u0e5a\7\u012d\2\2\u0e59\u0e5b\5\u0258\u012d\2\u0e5a\u0e59\3\2\2\2\u0e5a"+
		"\u0e5b\3\2\2\2\u0e5b\u0e5c\3\2\2\2\u0e5c\u0e5d\7a\2\2\u0e5d\u0e5f\7\u012e"+
		"\2\2\u0e5e\u0e60\5\u0258\u012d\2\u0e5f\u0e5e\3\2\2\2\u0e5f\u0e60\3\2\2"+
		"\2\u0e60\u0e78\3\2\2\2\u0e61\u0e63\7\u012d\2\2\u0e62\u0e64\5\u0258\u012d"+
		"\2\u0e63\u0e62\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66"+
		"\7a\2\2\u0e66\u0e68\7\u012f\2\2\u0e67\u0e69\5\u0258\u012d\2\u0e68\u0e67"+
		"\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e78\3\2\2\2\u0e6a\u0e6c\7\u012e\2"+
		"\2\u0e6b\u0e6d\5\u0258\u012d\2\u0e6c\u0e6b\3\2\2\2\u0e6c\u0e6d\3\2\2\2"+
		"\u0e6d\u0e6e\3\2\2\2\u0e6e\u0e6f\7a\2\2\u0e6f\u0e71\7\u012f\2\2\u0e70"+
		"\u0e72\5\u0258\u012d\2\u0e71\u0e70\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u0e78"+
		"\3\2\2\2\u0e73\u0e75\5\u0256\u012c\2\u0e74\u0e76\5\u0258\u012d\2\u0e75"+
		"\u0e74\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e78\3\2\2\2\u0e77\u0e34\3\2"+
		"\2\2\u0e77\u0e3d\3\2\2\2\u0e77\u0e46\3\2\2\2\u0e77\u0e4f\3\2\2\2\u0e77"+
		"\u0e58\3\2\2\2\u0e77\u0e61\3\2\2\2\u0e77\u0e6a\3\2\2\2\u0e77\u0e73\3\2"+
		"\2\2\u0e78\u0255\3\2\2\2\u0e79\u0e86\7\u012a\2\2\u0e7a\u0e86\7\u0130\2"+
		"\2\u0e7b\u0e86\7\u012b\2\2\u0e7c\u0e86\7\u0131\2\2\u0e7d\u0e86\7\u012c"+
		"\2\2\u0e7e\u0e86\7\u0132\2\2\u0e7f\u0e86\7\u012d\2\2\u0e80\u0e86\7\u0133"+
		"\2\2\u0e81\u0e86\7\u012e\2\2\u0e82\u0e86\7\u0134\2\2\u0e83\u0e86\7\u012f"+
		"\2\2\u0e84\u0e86\7\u0135\2\2\u0e85\u0e79\3\2\2\2\u0e85\u0e7a\3\2\2\2\u0e85"+
		"\u0e7b\3\2\2\2\u0e85\u0e7c\3\2\2\2\u0e85\u0e7d\3\2\2\2\u0e85\u0e7e\3\2"+
		"\2\2\u0e85\u0e7f\3\2\2\2\u0e85\u0e80\3\2\2\2\u0e85\u0e81\3\2\2\2\u0e85"+
		"\u0e82\3\2\2\2\u0e85\u0e83\3\2\2\2\u0e85\u0e84\3\2\2\2\u0e86\u0257\3\2"+
		"\2\2\u0e87\u0e88\7\u019d\2\2\u0e88\u0e89\7\u01c3\2\2\u0e89\u0e8a\7\u019e"+
		"\2\2\u0e8a\u0259\3\2\2\2\u0e8b\u0e8c\t\20\2\2\u0e8c\u025b\3\2\2\2\u0e8d"+
		"\u0e8e\7\65\2\2\u0e8e\u0e8f\7\u019d\2\2\u0e8f\u0e94\5\u025e\u0130\2\u0e90"+
		"\u0e91\7\u019b\2\2\u0e91\u0e93\5\u025e\u0130\2\u0e92\u0e90\3\2\2\2\u0e93"+
		"\u0e96\3\2\2\2\u0e94\u0e92\3\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u0e97\3\2"+
		"\2\2\u0e96\u0e94\3\2\2\2\u0e97\u0e98\7\u019e\2\2\u0e98\u025d\3\2\2\2\u0e99"+
		"\u0e9a\5j\66\2\u0e9a\u0e9d\7\u01a3\2\2\u0e9b\u0e9e\5\u0242\u0122\2\u0e9c"+
		"\u0e9e\5N(\2\u0e9d\u0e9b\3\2\2\2\u0e9d\u0e9c\3\2\2\2\u0e9e\u025f\3\2\2"+
		"\2\u0e9f\u0ea0\7\u01bb\2\2\u0ea0\u0ea1\7\u01ac\2\2\u0ea1\u0ea2\7\u01bb"+
		"\2\2\u0ea2\u0ea3\7\u01ac\2\2\u0ea3\u0ea4\7\u01bb\2\2\u0ea4\u0261\3\2\2"+
		"\2\u0ea5\u0ea6\5j\66\2\u0ea6\u0ea7\t\21\2\2\u0ea7\u0ea8\5j\66\2\u0ea8"+
		"\u0eae\3\2\2\2\u0ea9\u0eaa\7\u019a\2\2\u0eaa\u0eab\7\u019a\2\2\u0eab\u0eae"+
		"\5j\66\2\u0eac\u0eae\5j\66\2\u0ead\u0ea5\3\2\2\2\u0ead\u0ea9\3\2\2\2\u0ead"+
		"\u0eac\3\2\2\2\u0eae\u0263\3\2\2\2\u0eaf\u0eb0\t\22\2\2\u0eb0\u0265\3"+
		"\2\2\2\u0eb1\u0eb2\t\23\2\2\u0eb2\u0267\3\2\2\2\u0eb3\u0eb4\t\24\2\2\u0eb4"+
		"\u0269\3\2\2\2\u0eb5\u0eb6\t\25\2\2\u0eb6\u026b\3\2\2\2\u01c5\u026d\u0278"+
		"\u0284\u0293\u0295\u029b\u02a0\u02a3\u02ac\u02b1\u02b5\u02bd\u02c0\u02c8"+
		"\u02cc\u02d4\u02d6\u02dc\u02e1\u02ec\u02f4\u02fb\u0302\u0305\u0308\u030c"+
		"\u030f\u0313\u0316\u0319\u031c\u031f\u0322\u0325\u0328\u032c\u032f\u0335"+
		"\u0338\u033d\u0343\u0347\u034f\u0353\u0360\u0368\u036d\u0371\u037d\u0385"+
		"\u038a\u039d\u039f\u03ab\u03af\u03b3\u03c7\u03ce\u03dd\u03e0\u03e7\u03ed"+
		"\u03f6\u03f9\u03fc\u0400\u0404\u0407\u040f\u0416\u041a\u0423\u0429\u042c"+
		"\u0438\u0440\u0447\u044f\u04bb\u04c3\u04c7\u04cc\u04d1\u04dc\u04e1\u04e7"+
		"\u04ec\u04f1\u04f4\u0506\u050c\u0518\u051a\u0524\u052a\u052e\u053a\u053e"+
		"\u054a\u054c\u0552\u0557\u055b\u0560\u0566\u056f\u0575\u0577\u0579\u0585"+
		"\u05bb\u05bf\u05c5\u05cb\u05cf\u05d4\u05d8\u05dd\u05e1\u05e8\u05fc\u0600"+
		"\u0607\u061d\u0620\u0628\u062d\u062f\u0632\u0638\u063e\u0654\u0657\u065a"+
		"\u0666\u0672\u0675\u067a\u067e\u0684\u0690\u0694\u069a\u069e\u06ae\u06b7"+
		"\u06ba\u06c5\u06ca\u06cf\u06d7\u06de\u06e1\u06ea\u06f7\u06ff\u0704\u0707"+
		"\u070b\u0722\u0725\u072c\u0732\u0736\u0739\u073c\u0743\u074f\u0757\u075a"+
		"\u0763\u076a\u0771\u0779\u0783\u0786\u078d\u0790\u079d\u07a0\u07a3\u07aa"+
		"\u07ae\u07b3\u07b7\u07be\u07c0\u07c5\u07c9\u07cc\u07d4\u07d6\u07d8\u07dc"+
		"\u07e3\u07e7\u07eb\u07ef\u07f3\u07f6\u07fb\u0804\u080d\u0811\u0815\u0818"+
		"\u081d\u0820\u0825\u0829\u0831\u0835\u083c\u083e\u0847\u084b\u084e\u0855"+
		"\u0858\u085d\u0861\u0867\u086c\u086f\u0888\u0892\u089d\u08a6\u08bb\u08c4"+
		"\u08ca\u08cf\u08dc\u08e7\u08eb\u08f1\u08f7\u08fb\u08fe\u0906\u0908\u090c"+
		"\u0910\u0914\u0919\u091e\u0923\u092c\u0932\u0935\u0938\u093b\u093e\u0942"+
		"\u094d\u0959\u0963\u0980\u0988\u0990\u0996\u099b\u09a0\u09a2\u09a8\u09af"+
		"\u09b8\u09bd\u09c4\u09d7\u09da\u09e4\u09e8\u09ec\u0a08\u0a0e\u0a14\u0a16"+
		"\u0a1e\u0a23\u0a27\u0a2c\u0a2f\u0a36\u0a3d\u0a48\u0a4b\u0a51\u0a57\u0a59"+
		"\u0a5b\u0a5e\u0a6c\u0a78\u0a7a\u0a86\u0a8d\u0a93\u0a9a\u0aa5\u0aac\u0aaf"+
		"\u0ab7\u0ac2\u0aca\u0ad1\u0ad9\u0ae3\u0ae8\u0aea\u0af0\u0afc\u0aff\u0b05"+
		"\u0b0b\u0b0d\u0b0f\u0b16\u0b1d\u0b26\u0b30\u0b33\u0b36\u0b39\u0b3e\u0b46"+
		"\u0b48\u0b54\u0b59\u0b60\u0b62\u0b69\u0b70\u0b78\u0b7d\u0b85\u0b8e\u0b90"+
		"\u0b9b\u0ba4\u0bad\u0bb0\u0bb3\u0bbd\u0bc2\u0bca\u0bcd\u0bcf\u0bd1\u0bda"+
		"\u0bdc\u0bdf\u0bea\u0bf9\u0bfe\u0c03\u0c0c\u0c19\u0c1c\u0c28\u0c2b\u0c3c"+
		"\u0c3f\u0c48\u0c4f\u0c53\u0c57\u0c5a\u0c5d\u0c62\u0c6a\u0c6f\u0c71\u0c7a"+
		"\u0c87\u0c8b\u0c90\u0c94\u0c99\u0ca0\u0cae\u0cb1\u0cb5\u0cc0\u0cca\u0cd8"+
		"\u0cdb\u0ce4\u0ceb\u0cf3\u0cfa\u0d04\u0d0c\u0d15\u0d1d\u0d21\u0d25\u0d2b"+
		"\u0d40\u0d4c\u0d56\u0d62\u0d67\u0d6d\u0d73\u0d79\u0d7f\u0d85\u0d8b\u0d92"+
		"\u0d95\u0d97\u0da0\u0da7\u0dae\u0db2\u0db4\u0db7\u0dbc\u0dcc\u0dd0\u0dd9"+
		"\u0deb\u0def\u0dfb\u0dff\u0e0f\u0e16\u0e1f\u0e28\u0e32\u0e36\u0e3b\u0e3f"+
		"\u0e44\u0e48\u0e4d\u0e51\u0e56\u0e5a\u0e5f\u0e63\u0e68\u0e6c\u0e71\u0e75"+
		"\u0e77\u0e85\u0e94\u0e9d\u0ead";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}